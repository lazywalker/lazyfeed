{"site_title":"ArxivDaily","project_name":"notfeed","project_version":"0.2.1","project_homepage":"https://github.com/NotCraft/NotFeed","days":[{"datetime":"2021-09-03T01:51:21.306152010Z","channels":[{"title":"Rust.cc","link":"https://rustcc.cn/rss","description":"This Is Rust Crustacean Community RSS feed.","language":null,"copyright":null,"managing_editor":null,"webmaster":null,"pub_date":null,"last_build_date":null,"categories":[],"generator":null,"docs":null,"cloud":null,"rating":null,"ttl":null,"image":null,"text_input":null,"skip_hours":[],"skip_days":[],"items":[{"title":"【Rust日报】2021-09-02 pixels 0.6.0 发布","link":"https://rustcc.cn/article?id=069ce86c-0ff8-4ded-9367-3a19651144fe","description":"<h3>pilka - 用 Rust 写成跨平台实时编码工具</h3>\n<p>Pilka是一种用于创建着色器（shader）演示的跨平台实时编码工具，类似于 Bonzomatic 或 KodeLife 。支持热重载，能够在后台检查和更新资源。</p>\n<p><a href=\"https://github.com/pudnax/pilka\" rel=\"noopener noreferrer\">GitHub</a>: https://github.com/pudnax/pilka</p>\n<h3>ritecahce - 简单易用的 memory/disk cache</h3>\n<p>ritecache 是在流行的 sccache/lru_disk_cache 基础上派生出的内存/磁盘缓存。默认提供 <code>LruCache</code> 和 <code>LruDiskCache</code>，也支持开发者通过实现 <code>Cache</code> 特质来支持基于其他策略的内存/磁盘缓存。</p>\n<p>同时，得益于 ritelinked 的支持，性能优于基于 linked-hash-map 的版本。</p>\n<p><a href=\"https://github.com/ritelabs/ritecache\" rel=\"noopener noreferrer\">GitHub</a>: https://github.com/ritelabs/ritecache</p>\n<p><a href=\"https://crates.io/crates/ritecache\" rel=\"noopener noreferrer\">Crates.io</a>: https://crates.io/crates/ritecache</p>\n<h3>hebi - 由 Bevy 引擎驱动的贪吃蛇游戏</h3>\n<p>hebi 是一个高度可定制的贪吃蛇游戏复刻，使用 Rust 写就，由 Bevy 引擎驱动，命名源于日语中的“蛇”。</p>\n<p><a href=\"https://github.com/ElnuDev/hebi\" rel=\"noopener noreferrer\">GitHub</a>: https://github.com/ElnuDev/hebi</p>\n<h3>pixels 0.6.0 发布</h3>\n<p>pixels 是用于简单软件侧光栅化的板条箱。它可以提供一个像素缓冲区，用于插入颜色（在 CPU 端完成）。缓冲区作为纹理上载到GPU，所有缩放和剪裁都由默认着色器处理。对于其他控件，可以添加自己的自定义着色器以进行预处理和后处理。</p>\n<p><a href=\"https://github.com/parasyte/pixels\" rel=\"noopener noreferrer\">GitHub</a>: https://github.com/parasyte/pixels</p>\n<p><a href=\"https://crates.io/crates/pixels\" rel=\"noopener noreferrer\">Crates.io</a>: https://crates.io/crates/pixels</p>\n<h3>This Week in Datafuse 5</h3>\n<p>Datafuse 发布了第 5 期周报，感兴趣的朋友们可以关注 Datafuse 的最新进展。</p>\n<p>Datafuse 是一个开源、易用、便于扩展的云数仓，查询速度极快，并结合云的弹性、简单性和低成本，帮助用户轻松享受下一代数据云。</p>\n<p><a href=\"https://github.com/datafuselabs/datafuse\" rel=\"noopener noreferrer\">Datafuse</a>: https://github.com/datafuselabs/datafuse</p>\n<p><a href=\"https://datafuselabs.github.io/weekly/2021-09-01-datafuse-weekly/\" rel=\"noopener noreferrer\">This Week in Datafuse 5</a>: https://datafuselabs.github.io/weekly/2021-09-01-datafuse-weekly/</p>\n<hr>\n<p>From 日报小组 <a href=\"https://github.com/PsiACE\" rel=\"noopener noreferrer\">PsiACE</a></p>\n<p>社区学习交流平台订阅：</p>\n<ul>\n<li><a href=\"https://rustcc.cn/\" rel=\"noopener noreferrer\">Rust.cc 论坛: 支持 rss</a></li>\n<li><a href=\"https://rustcc.cn/article?id=ed7c9379-d681-47cb-9532-0db97d883f62\" rel=\"noopener noreferrer\">微信公众号：Rust 语言中文社区</a></li>\n</ul>\n","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":"2021-09-02 15:31:28","source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":null},{"title":"RustDesk寻找第一位员工，国内或者是新加坡由你决定","link":"https://rustcc.cn/article?id=ae7f2822-173b-45ba-9013-e5cb4e286810","description":"<p>rustcc.cn见证了RustDesk一路的成长，在此接受了很多的鼓励，我受益匪浅。虽然一直都是一个人战斗，可却时刻期盼着优秀的你加入。虽然公司实体还没有注册完成，但是RustDesk已经收获两家投资机构的投资意向，一家国内，一家国外，总共超过千万人民币。如果你也像投资人一样看好RustDesk这个项目，能够理解他的未来发展潜力，请邮件联系我，并附上你的简历。谢谢，期盼我们一起成长。</p>\n","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":"2021-09-02 09:47:25","source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":null},{"title":"cfg-rs v0.2.3，rust配置库","link":"https://rustcc.cn/article?id=529bbd2c-aed1-46e7-a5c3-ede7283c0c5d","description":"<p>和config库的区别</p>\n<ul>\n<li>支持占位符表达式，可以简化配置设计。</li>\n<li>不基于serde，设计了独立的trait用来做配置和struct的映射，提供自动推导功能。</li>\n<li>支持可更新值类型RefValue，在配置刷新时自动更新。不需要全局Configuration实例。</li>\n<li>配合占位符表达式，提供随机值获取。</li>\n</ul>\n<p>详情请访问\nhttps://docs.rs/cfg-rs\nhttps://github.com/leptonyu/cfg-rs</p>\n","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":"2021-09-02 09:26:09","source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":null},{"title":"分享一个vim for rust-lang配置，支持多种开发语言。","link":"https://rustcc.cn/article?id=3c62e530-3aab-4111-925f-83e0338d3799","description":"<p>https://github.com/wandercn/go-ide-vim.conf.git\n有兴趣vim流的可以试试，我自己一直用着还可以。</p>\n","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":"2021-09-01 18:22:14","source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":null},{"title":"【Rust日报】2021-09-01 一个深度学习研究员学习Rust的经验","link":"https://rustcc.cn/article?id=90891a92-f5d6-42ea-b8fc-f46da1ac034c","description":"<h3>一个深度学习研究员学习Rust的经验</h3>\n<p>作为深度学习研究员，处于深度学习领域的最前沿，自然用 py 和现成的框架是不够的。而 Rust 是一个非常好的替代 c++ 的底层算法实现选择。</p>\n<p>https://www.reddit.com/r/rust/comments/pft9n9/i_wanted_to_share_my_experience_of_rust_as_a_deep/</p>\n<h3>Rust 比现代 C++ 的优势在哪些地方</h3>\n<p>这里有非常详实的讨论：</p>\n<p>https://www.reddit.com/r/rust/comments/2mwpie/what_are_the_advantages_of_rust_over_modern_c/</p>\n<h3>Novus - 一个rust实现的 Windows 包管理器</h3>\n<p>性能比 Chocolatey 高 3~10倍。</p>\n<p>https://github.com/novus-package-manager/novus</p>\n<h3>一个 Gopher 的 Rust 冒险</h3>\n<p>作者记录了自己学习 Rust 的心路历程，很详细，文笔不错。</p>\n<p>https://thespblog.net/a-gophers-foray-into-rust/</p>\n<h3>组合使用 Axum, Hyper, Tonic, Tower 开发 Web/gRPC 混合接口的 app：第一部分</h3>\n<p>代码一行行讲解的一个 tutorial。值得学习。</p>\n<p>https://www.fpcomplete.com/blog/axum-hyper-tonic-tower-part1/</p>\n<h3>关于高性能 Rust 代码的几个简单的调优方法</h3>\n<p>列举了几个简单的操作就能达到很好的效果，非常实用。</p>\n<p>https://deterministic.space/high-performance-rust.html</p>\n<h3>使用 Rust + SIMD 开发世界上最快的 tac</h3>\n<p>tac 是一个命令行工具，用于翻转一个文件的内容。被收录于 GNU core-utils。而 Rust 结合 SIMD，达到了最快的速度。</p>\n<p>https://neosmart.net/blog/2021/using-simd-acceleration-in-rust-to-create-the-worlds-fastest-tac/</p>\n<p>--</p>\n<p>From 日报小组 Mike</p>\n<p>社区学习交流平台订阅：</p>\n<ul>\n<li>Rustcc论坛: 支持rss</li>\n<li>微信公众号：Rust语言中文社区</li>\n</ul>\n","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":"2021-09-01 14:32:35","source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":null},{"title":"【译】Rust 常见的问题","link":"https://rustcc.cn/article?id=4a6054b8-f846-4ef3-8c7b-6c60664ab2b0","description":"<p>原文：https://github.com/dtolnay/rust-faq</p>\n<p>本文档的存在是为了回答有关 Rust 编程语言的常见问题。它不是一个完整的语言指南，也不是一个教授该语言的工具。它只是一个参考，用来回答 Rust 社区中人们经常遇到的问题，并澄清 Rust 的一些设计决定背后的原因。</p>\n<p>如果你觉得有一些常见的或重要的问题在这里没有得到解答，请在 GitHub 上针对<a href=\"https://github.com/dtolnay/rust-faq\" rel=\"noopener noreferrer\">这个 repo</a>提一个 issue!</p>\n<p><em>这些内容大部分以前都在 rust-lang/rust 库中，并且在网站上有一个专门的 FAQ 页面。但是在 2018 年的网站重新设计中，它被删除了。我在这里把它恢复了，因为这些问题中的许多问题仍然被频繁询问。</em></p>\n<h1>目录</h1>\n<ul>\n<li><a href=\"#The-Rust-Project\" rel=\"noopener noreferrer\">The Rust Project</a></li>\n<li><a href=\"#%E6%80%A7%E8%83%BD\" rel=\"noopener noreferrer\">性能</a></li>\n<li><a href=\"#%E8%AF%AD%E6%B3%95\" rel=\"noopener noreferrer\">语法</a></li>\n<li><a href=\"#%E6%95%B0%E5%AD%97\" rel=\"noopener noreferrer\">数字</a></li>\n<li><a href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2\" rel=\"noopener noreferrer\">字符串</a></li>\n<li><a href=\"#%E9%9B%86%E5%90%88\" rel=\"noopener noreferrer\">集合</a></li>\n<li><a href=\"#%E6%80%9D%E6%99%AE%E8%84%BE%E6%B0%94am\" rel=\"noopener noreferrer\">所有权</a></li>\n<li><a href=\"#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F\" rel=\"noopener noreferrer\">生命周期</a></li>\n<li><a href=\"#%E6%B3%9B%E5%9E%8B\" rel=\"noopener noreferrer\">泛型</a></li>\n<li><a href=\"#%E8%BE%93%E5%85%A5-%E8%BE%93%E5%87%BA\" rel=\"noopener noreferrer\">输入/输出</a></li>\n<li><a href=\"#%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86\" rel=\"noopener noreferrer\">错误处理</a></li>\n<li><a href=\"#%E5%B9%B6%E5%8F%91\" rel=\"noopener noreferrer\">并发</a></li>\n<li><a href=\"#%E5%AE%8F\" rel=\"noopener noreferrer\">宏</a></li>\n<li><a href=\"#Debugging-and-Tooling\" rel=\"noopener noreferrer\">Debugging and Tooling</a></li>\n<li><a href=\"#Low-Level\" rel=\"noopener noreferrer\">Low-Level</a></li>\n<li><a href=\"#%E8%B7%A8%E5%B9%B3%E5%8F%B0\" rel=\"noopener noreferrer\">跨平台</a></li>\n<li><a href=\"#mod-%E5%92%8C-crate\" rel=\"noopener noreferrer\">mod 和 crate</a></li>\n<li><a href=\"#%E5%BA%93\" rel=\"noopener noreferrer\">库</a></li>\n<li><a href=\"#%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F\" rel=\"noopener noreferrer\">设计模式</a></li>\n<li><a href=\"#%E5%85%B6%E4%BB%96%E8%AF%AD%E8%A8%80\" rel=\"noopener noreferrer\">其他语言</a></li>\n<li><a href=\"#Documentation\" rel=\"noopener noreferrer\">Documentation</a></li>\n</ul>\n<h1>The Rust Project</h1>\n<h2>这个项目的目标是什么？</h2>\n<p>设计并实现一种安全的、并发的、实用的系统级语言。</p>\n<p>Rust 之所以存在，是因为在这个抽象和效率水平上的其他语言并不令人满意。特别是：</p>\n<ol>\n<li>对安全性的关注太少。</li>\n<li>他们对并发性的支持很差。</li>\n<li>缺乏实际的承受力。</li>\n<li>它们对资源的控制有限。</li>\n</ol>\n<p>Rust 作为一种替代方案存在，它既能提供高效的代码，又能提供舒适的抽象水平，同时在上述四点上都有改进。</p>\n<h2>这个项目是由 Mozilla 控制的吗？</h2>\n<p>Rust 在 2006 年作为 Graydon Hoare 的兼职项目开始，并保持了 3 年多。2009 年，当该语言成熟到可以运行基本测试并展示其核心概念时，Mozilla 参与其中。虽然它仍然由 Mozilla 赞助，但 Rust 是由来自世界各地不同地方的爱好者组成的一个多样化社区开发的。<a href=\"https://www.rust-lang.org/governance\" rel=\"noopener noreferrer\">Rust 团队</a>由 Mozilla 和非 Mozilla 成员组成，GitHub 上的<code>rust</code>到目前为止已经有超过<a href=\"https://github.com/rust-lang/rust/\" rel=\"noopener noreferrer\">2300 个独特的贡献者</a>。</p>\n<p>就<a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1068-rust-governance.md\" rel=\"noopener noreferrer\">项目管理</a>而言，Rust 由一个核心团队管理，为项目设定愿景和优先级。从全球角度来指导它。还有一些子团队来指导和促进特定兴趣领域的发展，包括核心语言、编译器、Rust 库、Rust 工具和 Rust 官方社区的管理。这些领域的设计都是通过[RFC]（https://github.com/rust-lang/rfcs）来推进的。对于不需要 RFC 的变化，通过<a href=\"https://github.com/rust-lang/rust\" rel=\"noopener noreferrer\"><code>rustc</code>仓库</a>的 PR 来决定。</p>\n<h2>Rust的一些非目标是什么？</h2>\n<ol>\n<li>我们不采用任何特别前沿的技术。旧的、成熟的技术会更好。</li>\n<li>我们并不把表现力、极简主义或优雅性置于其他目标之上。这些都是可取的，但是从属的目标。</li>\n<li>我们不打算涵盖 C++ 或任何其他语言的完整功能集。Rust 应该提供大多数情况下的功能。</li>\n<li>我们不打算做到 100% 的静态，100% 的安全，100% 的反射，或在任何其他意义上过于教条化。存在权衡。</li>\n<li>我们不要求 Rust 在“所有可能的平台”上运行。它最终必须在广泛使用的硬件和软件平台上没有不必要的妥协地运行。</li>\n</ol>\n<h2>Mozilla 在哪些项目中使用 Rust？</h2>\n<p>主要的项目是<a href=\"https://github.com/servo/servo\" rel=\"noopener noreferrer\">Servo</a>，这是 Mozilla 正在进行的实验性浏览器引擎。他们也在努力将<a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1135640\" rel=\"noopener noreferrer\">Rust 组件</a>整合到 Firefox 中。</p>\n<h2>有哪些大型 Rust 项目的例子？</h2>\n<p>现在最大的两个 Rust 开源项目是<a href=\"https://github.com/servo/servo\" rel=\"noopener noreferrer\">Servo</a>和<a href=\"https://github.com/rust-lang/rust\" rel=\"noopener noreferrer\">Rust 编译器</a>本身。</p>\n<h2>还有谁在使用 Rust？</h2>\n<p><a href=\"https://www.rust-lang.org/production/users\" rel=\"noopener noreferrer\">越来越多的组织！</a></p>\n<h2>我怎样才能轻松地尝试 Rust？</h2>\n<p>尝试Rust的最简单方法是通过<a href=\"https://play.rust-lang.org/\" rel=\"noopener noreferrer\">playpen</a>，这是一个用于编写和运行 Rust 代码的在线应用程序。如果你想在你的系统上尝试 Rust，<a href=\"https://www.rust-lang.org/tools/install\" rel=\"noopener noreferrer\">安装它</a>并通过书中的<a href=\"https://doc.rust-lang.org/book/ch02-00-guessing-game-tutorial.html\" rel=\"noopener noreferrer\">猜谜游戏</a>教程。</p>\n<h2>我怎样才能得到 Rust 问题的帮助？</h2>\n<p>有几种方法。你可以。</p>\n<ul>\n<li>在<a href=\"https://users.rust-lang.org/\" rel=\"noopener noreferrer\">users.rust-lang.org</a>，即 Rust 官方用户论坛上发帖</li>\n<li>在官方的<a href=\"https://chat.mibbit.com/?server=irc.mozilla.org&amp;channel=%23rust\" rel=\"noopener noreferrer\">Rust IRC channel</a> (#rust on irc.mozilla.org)中提问。</li>\n<li>在<a href=\"https://stackoverflow.com/questions/tagged/rust\" rel=\"noopener noreferrer\">Stack Overflow</a>上用“rust”标签提问。</li>\n<li>在<a href=\"https://www.reddit.com/r/rust\" rel=\"noopener noreferrer\">/r/rust</a>，非官方的 Rust 子论坛上发帖</li>\n</ul>\n<h2>为什么 Rust 随着时间的推移发生了如此大的变化？</h2>\n<p>Rust 最初的目标是创造一种安全但可用的系统编程语言。在追求这一目标的过程中，它探索了很多想法，其中一些被保留了下来（生命周期，Trait），而另一些则被抛弃了（类型状态系统，绿色线程）。另外，在 1.0 之前，很多标准库都被重写了，因为早期的设计被更新以最好地使用 Rust 的特性，并提供高质量的、一致的跨平台 API。现在 Rust 已经达到了 1.0，该语言被保证是“稳定的”；虽然它可能继续发展，但在当前 Rust 上运行的代码应该继续在未来的版本上运行。</p>\n<h2>Rust语言的版本管理是如何进行的？</h2>\n<p>Rust 的语言版本管理遵循<a href=\"http://semver.org/\" rel=\"noopener noreferrer\">SemVer</a>，只有当需要进行编译器错误的修复、安全漏洞的修补或者需要更多注释以改变类型推断和分发的时候，才允许在小版本中对稳定的 API 进行向后不兼容的修改。更详细的小版本修改指南可参考<a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1122-language-semver.md\" rel=\"noopener noreferrer\">语言</a>和<a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1105-api-evolution.md\" rel=\"noopener noreferrer\">标准库</a>的 RFC。</p>\n<p>Rust 有三个“发布 channel”：稳定版、测试版和 nightly 版。稳定版和测试版每六周更新一次，当前的 nightly 版成为新的测试版，而当前的 nightly 版成为新的稳定版。标记为不稳定的语言和标准库功能或隐藏在特性开关后面的功能只能在 nightly 中使用。新功能以不稳定的形式出现，一旦被核心团队和相关的子团队批准，就会被“解禁”。这种方法允许实验，同时为稳定频道提供强大的向后兼容性保证。</p>\n<p>更多的细节，请阅读 Rust 的博文<a href=\"http://blog.rust-lang.org/2014/10/30/Stability.html\" rel=\"noopener noreferrer\">“Stability as a Deliverable”</a>。</p>\n<h2>我可以在测试版或稳定版频道上使用不稳定的功能吗？</h2>\n<p>不，你不能。Rust 努力为测试版和稳定版频道上提供的功能的稳定性提供强有力的保证。当某项功能不稳定时，这意味着我们还不能为它提供这些保证，并且不希望人们依赖它保持不变。这使我们有机会在 nightly 上尝试改变，同时仍然为寻求稳定的人保持强有力的保证。</p>\n<p>事情一直在变稳定，测试版和稳定版频道每六周更新一次，其他时候偶尔也会接受测试版的修复。如果你在等待一个功能，而不使用 nightly，你可以通过检查问题追踪器上的<a href=\"https://github.com/rust-lang/rust/issues?q=is%3Aissue+is%3Aopen+tracking+label%3AB-unstable\" rel=\"noopener noreferrer\"><code>B-unstable</code></a>标签来定位其追踪问题。</p>\n<h2>什么是“特性开关”?</h2>\n<p>“特性开关”是 Rust 用来稳定编译器、语言和标准库的特性的机制。一个被“开关控制”的特性只有在 nightly 上才能访问，而且只有在通过<code>#[feature]</code>属性或<code>-Z unstable-options</code>命令行参数明确启用后才能访问。当一个特性被稳定化后，它就可以在稳定发布通道上使用，并且不需要明确启用，这时候这个特性就被认为是稳定的。特性开关允许开发者在开发中的实验性功能在它们在稳定语言中可用之前进行测试。</p>\n<h2>为什么要采用 MIT/ASL2 双许可证？</h2>\n<p>Apache 许可证包括对专利侵犯的重要保护，但它与 GPL 第 2 版不兼容。为了避免 Rust 与 GPL2 的使用出现问题，Rust 采用了 MIT 许可。</p>\n<h2>为什么是 BSD 风格的许可，而不是 MPL 或三合一许可？</h2>\n<p>这一方面是由于原始开发者（Graydon）的偏好，另一方面是由于语言往往比网络浏览器等产品有更广泛的受众和更多样化的可能嵌入和最终用途。我们希望尽可能多地吸引这些潜在的贡献者。</p>\n<h1>性能</h1>\n<h2>Rust有多快？</h2>\n<p>非常快! 在许多基准测试中，Rust 已经可以与 C 和 C++ 竞争（比如<a href=\"https://benchmarksgame-team.pages.debian.net/benchmarksgame/fastest/rust.html\" rel=\"noopener noreferrer\">基准游戏</a>和<a href=\"https://github.com/kostya/benchmarks\" rel=\"noopener noreferrer\">其他</a>）。</p>\n<p>像 C++ 一样，Rust 把<a href=\"http://blog.rust-lang.org/2015/05/11/traits.html\" rel=\"noopener noreferrer\">零成本抽象</a>作为它的核心原则之一：Rust 的抽象没有一个施加全局性能惩罚，也没有传统意义上的任何运行时系统的开销。</p>\n<p>鉴于 Rust 是建立在 LLVM 之上的，并努力从 LLVM 的角度类似于 Clang，任何 LLVM 的性能改进也有助于 Rust。从长远来看，Rust 的类型系统中更丰富的信息也应该能够实现 C/C++ 代码难以实现或无法实现的优化。</p>\n<h2>Rust 有垃圾收集吗？</h2>\n<p>不，Rust 的关键创新之一是在<em>不需要</em>垃圾收集的同时保证内存安全（无 segfault）。</p>\n<p>通过避免 GC，Rust 可以提供许多好处：可预测的资源清理，较低的内存管理开销，以及基本上没有运行时系统。所有这些特征都使 Rust 变得精干，并且容易嵌入到任意的上下文中，并使其更容易<a href=\"http://calculist.org/blog/2015/12/23/neon-node-rust/\" rel=\"noopener noreferrer\">将 Rust 代码与有 GC 的语言集成</a>。</p>\n<p>Rust 通过其所有权和借用系统避免了对 GC 的需求，但同样的系统也有助于解决一系列其他问题，包括\n<a href=\"http://blog.skylight.io/rust-means-never-having-to-close-a-socket/\" rel=\"noopener noreferrer\">一般的资源管理</a>和<a href=\"http://blog.rust-lang.org/2015/04/10/Fearless-Concurrency.html\" rel=\"noopener noreferrer\">并发性</a>。</p>\n<p>当单一所有权不够用时，Rust 程序依靠标准的引用计数智能指针类型<a href=\"https://doc.rust-lang.org/std/rc/struct.Rc.html\" rel=\"noopener noreferrer\"><code>Rc</code></a>，以及它的线程安全对应类型<a href=\"https://doc.rust-lang.org/std/sync/struct.Arc.html\" rel=\"noopener noreferrer\"><code>Arc</code></a>，而不是 GC。</p>\n<p>然而，我们正在研究<em>可选的</em>垃圾收集作为未来的扩展。我们的目标是使其能够顺利地与垃圾收集的运行时，例如那些由<a href=\"https://spidermonkey.dev\" rel=\"noopener noreferrer\">Spidermonkey</a>和<a href=\"https://developers.google.com/v8/?hl=en\" rel=\"noopener noreferrer\">V8</a>的 JavaScript 引擎提供的。最后，一些人已经在没有编译器的支持情况下研究了实现<a href=\"https://manishearth.github.io/blog/2015/09/01/designing-a-gc-in-rust/\" rel=\"noopener noreferrer\">纯 Rust 垃圾收集器</a>。</p>\n<h2>为什么我的程序很慢？</h2>\n<p>Rust 编译器不会用优化来编译，除非被要求这样做，<a href=\"https://users.rust-lang.org/t/why-does-cargo-build-not-optimise-by-default/4150/3\" rel=\"noopener noreferrer\">因为优化会降低编译速度，而且在开发过程中通常是不可取的</a>。</p>\n<p>如果你用<code>cargo</code>编译，请使用<code>--release</code>标志。如果你直接用<code>rustc</code>编译，使用<code>-O</code>标志。这两个标志中的任何一个都会打开优化功能。</p>\n<h2>Rust的编译似乎很慢。这是为什么呢？</h2>\n<p>代码翻译和优化。Rust 提供了高水平的抽象，可以编译成高效的机器代码，这些翻译需要时间来运行，特别是在优化时。</p>\n<p>但是 Rust 的编译时间并不像看起来那么糟糕，而且有理由相信它会有所改善。当比较 C++ 和 Rust 之间类似规模的项目时，一般认为整个项目的编译时间是相当的。人们普遍认为 Rust 的编译速度很慢，这在很大程度上是由于 C++ 和 Rust 的<em>编译模型</em>的不同。C++ 的编译单元是文件，而 Rust 的编译单元是由许多文件组成的 crate。因此，在开发过程中，修改一个 C++ 文件可能会导致比 Rust 少得多的重新编译。目前正在努力重构编译器以引入<a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1298-incremental-compilation.md\" rel=\"noopener noreferrer\">增量编译</a>，这将为 Rust 提供 C++ 模型的编译时间优势。</p>\n<p>除了编译模型之外，Rust 的语言设计和编译器实现还有其他几个方面会影响编译时的性能。</p>\n<p>首先，Rust 有一个适度复杂的类型系统，必须花费不可忽视的编译时间来执行约束，使 Rust 在运行时安全。</p>\n<p>其次，Rust 编译器有长期的技术债务，特别是产生了质量很差的 LLVM IR，LLVM 必须花时间“修复”。在 Rust 编译器中加入一个新的内部表示法，称为<a href=\"https://github.com/rust-lang/rfcs/blob/master/text/1211-mir.md\" rel=\"noopener noreferrer\">MIR</a>，有可能进行更多的优化，提高生成的 LLVM IR 的质量，但这项工作还没有发生过。</p>\n<p>第三，Rust 使用 LLVM 来生成代码是一把双刃剑：虽然它使 Rust 拥有世界一流的运行时性能，但 LLVM 是一个大型框架，不注重编译时的性能，特别是在处理质量差的输入时。</p>\n<p>最后，虽然 Rust 的首选策略是单态泛型（类似于 C++），但它要求生成的代码比其他翻译策略多得多。Rust 的程序员可以使用特征对象，通过使用动态调度来换取这种代码的膨胀。</p>\n<h2>为什么 Rust 的<code>HashMap</code>很慢？</h2>\n<p>默认情况下，Rust 的<a href=\"https://doc.rust-lang.org/std/collections/struct.HashMap.html\" rel=\"noopener noreferrer\"><code>HashMap</code></a>使用 <a href=\"https://en.wikipedia.org/wiki/SipHash\" rel=\"noopener noreferrer\">SipHash</a> 散列算法，该算法旨在防止<a href=\"http://programmingisterrible.com/post/40620375793/hash-table-denial-of-service-attacks-revisited\" rel=\"noopener noreferrer\">散列表碰撞攻击</a>，同时提供<a href=\"https://www.reddit.com/r/rust/comments/3hw9zf/rust_hasher_comparisons/cub4oh6\" rel=\"noopener noreferrer\">各种工作负载下的合理性能</a>。</p>\n<p>虽然 SipHash <a href=\"http://cglab.ca/%7Eabeinges/blah/hash-rs/\" rel=\"noopener noreferrer\">在许多情况下表现出有竞争力的性能</a>，但它比其他散列算法明显慢的一种情况是在短键，如整数。这就是为什么 Rust 程序员经常观察到<a href=\"https://doc.rust-lang.org/std/collections/struct.HashMap.html\" rel=\"noopener noreferrer\"><code>HashMap</code></a>的性能缓慢。在这种情况下，经常推荐使用 <a href=\"https://crates.io/crates/fnv\" rel=\"noopener noreferrer\">FNV hasher</a>，但要注意它不具备与 SipHash 一样的抗碰撞特性。</p>\n<h2>为什么没有集成的基准测试基础设施?</h2>\n<p>有，但它只在 nightly 上可用。我们最终计划建立一个可插拔的系统来进行综合基准测试，但与此同时，目前的系统<a href=\"https://github.com/rust-lang/rust/issues/29553\" rel=\"noopener noreferrer\">被认为是不稳定的</a>。</p>\n<h2>Rust 是否做了尾调用优化？</h2>\n<p>一般来说，不会。在<a href=\"http://llvm.org/docs/CodeGenerator.html#sibling-call-optimization\" rel=\"noopener noreferrer\">有限的情况下</a>可能会进行尾部调用优化，但<a href=\"https://mail.mozilla.org/pipermail/rust-dev/2013-April/003557.html\" rel=\"noopener noreferrer\">不保证</a>。由于这个功能一直是人们所希望的，Rust 保留了一个关键字（<code>become</code>），尽管目前还不清楚它在技术上是否可行，也不清楚它是否会被实现。曾经有一个<a href=\"https://github.com/rust-lang/rfcs/pull/81\" rel=\"noopener noreferrer\">拟议的扩展</a>，允许在某些情况下消除尾随调用，但目前被推迟了。</p>\n<h2>Rust 有 runtime 吗？</h2>\n<p>不是 Java 等语言所使用的典型意义上的运行时，但是 Rust 标准库的一部分可以被认为是“运行时”，它提供了一个堆、回溯、解开和堆栈守护。有一个<a href=\"https://github.com/rust-lang/rust/blob/master/library/std/src/rt.rs\" rel=\"noopener noreferrer\">少量的初始化代码</a>，在用户的<code>main</code>函数之前运行。Rust 标准库还链接了 C 标准库，它也做了类似的<a href=\"http://www.embecosm.com/appnotes/ean9/html/ch05s02.html\" rel=\"noopener noreferrer\">运行时初始化</a>。Rust 代码可以在没有标准库的情况下进行编译，在这种情况下，运行时与 C 语言大致相当。</p>\n<h1>语法</h1>\n<h2>为什么要用大括号? 为什么 Rust 的语法不能像 Haskell 或 Python 那样？</h2>\n<p>使用大括号来表示块是各种编程语言中常见的设计选择，而 Rust 的一致性对于已经熟悉这种风格的人来说是很有用的。</p>\n<p>大括号还可以为程序员提供更灵活的语法，并在编译器中提供更简单的解析器。</p>\n<h2>我可以在<code>if</code>条件上不加小括号，那么为什么我必须在单行块周围加上大括号？为什么不允许使用 C 语言的风格?</h2>\n<p>C 语言要求“if”语句的条件必须有小括号，但大括号是可选的，而 Rust 对其“if”表达式做出了相反的选择。这使得条件语句与语句主体明确分开，并避免了可选大括号的危害，这可能导致在重构过程中出现容易被忽略的错误，比如苹果的 <a href=\"https://gotofail.com/\" rel=\"noopener noreferrer\">goto fail</a> 错误。</p>\n<h2>为什么没有字典的字面语法？</h2>\n<p>Rust 的整体设计倾向于限制<em>语言</em>的大小，同时启用强大的<em>库</em>。虽然 Rust 确实为数组和字符串字面提供了初始化语法，但这是语言中唯一的集合类型。其他库定义的类型，包括无处不在的<a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html\" rel=\"noopener noreferrer\"><code>Vec</code></a>集合类型，都使用宏进行初始化，如<a href=\"https://doc.rust-lang.org/std/macro.vec!.html\" rel=\"noopener noreferrer\"><code>vec!</code></a>宏。</p>\n<p>这种使用 Rust 的宏设施来初始化集合的设计选择在未来可能会被通用地扩展到其他集合，不仅可以简单地初始化<a href=\"https://doc.rust-lang.org/std/collections/struct.HashMap.html\" rel=\"noopener noreferrer\"><code>HashMap</code></a>和<a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html\" rel=\"noopener noreferrer\"><code>Vec</code></a>，还可以初始化其他集合类型，如<a href=\"https://doc.rust-lang.org/std/collections/struct.BTreeMap.html\" rel=\"noopener noreferrer\"><code>BTreeMap</code></a>。同时, 如果你想要一个更方便的初始化集合的语法, 你可以<a href=\"https://stackoverflow.com/questions/27582739/how-do-i-create-a-hashmap-literal\" rel=\"noopener noreferrer\">创建你自己的宏</a>来提供它.</p>\n<h2>我应该在什么时候使用隐式返回？</h2>\n<p>Rust 是一种非常面向表达式的语言，而“隐式返回”是这种设计的一部分。像<code>if</code>s, <code>match</code>es, 和普通块这样的结构在 Rust 中都是表达式。例如，下面的代码检查一个<a href=\"https://doc.rust-lang.org/std/primitive.i64.html\" rel=\"noopener noreferrer\"><code>i64</code></a>是否为奇数，通过简单地将其作为一个值来返回结果。</p>\n<pre><code>fn is_odd(x: i64) -&gt; bool {\n    if x % 2 != 0 { true } else { false }\n}\n</code></pre>\n<p>虽然它可以进一步简化，比如说。</p>\n<pre><code>fn is_odd(x: i64) -&gt; bool {\n    x % 2 != 0\n}\n</code></pre>\n<p>在每个例子中，函数的最后一行是该函数的返回值。需要注意的是，如果一个函数以分号结束，其返回类型将是<code>()</code>，表示没有返回值。隐式返回必须省略分号，才能发挥作用。</p>\n<p>显式返回只有在隐式返回不可能时才会使用，因为你要在函数主体结束前返回。虽然上面的每个函数都可以用<code>return</code>关键字和分号来写，但这样做是不必要的冗长，而且与 Rust 代码的惯例不一致。</p>\n<h2>为什么不推断出函数的签名？</h2>\n<p>在 Rust 中，声明往往带有明确的类型，而实际代码的类型是推断出来的。这种设计有几个原因：</p>\n<ul>\n<li>强制性的声明签名有助于在模块和板块层面上执行接口的稳定性。</li>\n<li>签名提高了程序员对代码的理解，消除了 IDE 在整个板块中运行推理算法来猜测一个函数的参数类型的需要；它总是显式的，就在附近。</li>\n<li>在机制上，它简化了推理算法，因为推理只需要一次看一个函数。</li>\n</ul>\n<h2>为什么<code>match</code>必须是详尽的?</h2>\n<p>为了帮助重构和清晰化。</p>\n<p>首先，如果每一种可能性都被<code>match</code>所覆盖，那么将来在<code>enum</code>中增加变体将导致编译失败，而不是在运行时出错。这种类型的编译器帮助使得 Rust 中的无畏重构成为可能。</p>\n<p>其次，穷举式检查使默认情况的语义变得明确：一般来说，非穷举式<code>match</code>的唯一安全方式是在没有匹配到任何东西时让线程恐慌。Rust 的早期版本并不要求<code>match</code>情况是详尽的，而且发现它是一个很大的 bug 来源。</p>\n<p>通过使用<code>_</code>通配符，可以很容易地忽略所有未指定的情况。</p>\n<pre><code>match val.do_something() {\n    Cat(a) =&gt; { /* ... */ }\n    _ =&gt; { /* ... */ }\n}\n</code></pre>\n<h1>Numerics</h1>\n<h2>对于浮点运算，我应该选择<code>f32</code>和<code>f64</code>中的哪一个?</h2>\n<p>选择哪种方式取决于程序的目的。</p>\n<p>如果你对浮点数的最大精度感兴趣, 那么就选择<a href=\"https://doc.rust-lang.org/std/primitive.f64.html\" rel=\"noopener noreferrer\"><code>f64</code></a>. 如果你对保持数值的大小或最大的效率更感兴趣，并且不关心每个数值的位数较少所带来的误差，那么<a href=\"https://doc.rust-lang.org/std/primitive.f32.html\" rel=\"noopener noreferrer\"><code>f32</code></a>更好。对<a href=\"https://doc.rust-lang.org/std/primitive.f32.html\" rel=\"noopener noreferrer\"><code>f32</code></a>的操作通常更快，即使是在 64 位硬件上。作为一个常见的例子，图形编程通常使用<a href=\"https://doc.rust-lang.org/std/primitive.f32.html\" rel=\"noopener noreferrer\"><code>f32</code></a>，因为它需要高性能，而 32 位浮点数足以代表屏幕上的像素。</p>\n<p>如果有疑问，可以选择<a href=\"https://doc.rust-lang.org/std/primitive.f64.html\" rel=\"noopener noreferrer\"><code>f64</code></a>以获得更大的精度。</p>\n<h2>为什么我不能比较浮点数或用它们作为<code>HashMap</code>或<code>BTreeMap</code>的键?</h2>\n<p>浮点数可以用<code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, 和<code>&gt;=</code>运算符，以及<code>partial_cmp()</code>函数进行比较。<code>==</code>和<code>！=</code>是<a href=\"https://doc.rust-lang.org/std/cmp/trait.PartialEq.html\" rel=\"noopener noreferrer\"><code>PartialEq</code></a>特性的一部分，而<code>&lt;</code>、<code>&lt;=</code>、<code>&gt;</code>、<code>&gt;=</code>和<code>partial_cmp()</code>是<a href=\"https://doc.rust-lang.org/std/cmp/trait.PartialOrd.html\" rel=\"noopener noreferrer\"><code>PartialOrd</code></a> 特性的一部分。</p>\n<p>浮点数不能用<code>cmp()</code>函数进行比较，它是<a href=\"https://doc.rust-lang.org/std/cmp/trait.Ord.html\" rel=\"noopener noreferrer\"><code>Ord</code></a>特性的一部分，因为浮点数没有总排序。此外，浮点数没有全等关系，所以它们也没有实现<a href=\"https://doc.rust-lang.org/std/cmp/trait.Eq.html\" rel=\"noopener noreferrer\"><code>Eq</code></a>特性。</p>\n<p>由于浮点数<a href=\"https://en.wikipedia.org/wiki/NaN\" rel=\"noopener noreferrer\"><code>NaN</code></a>不小于、大于或等于任何其他浮点数或其本身，所以浮点数没有总排序或平等关系。</p>\n<p>因为浮点数没有实现<a href=\"https://doc.rust-lang.org/std/cmp/trait.Eq.html\" rel=\"noopener noreferrer\"><code>Eq</code></a>或<a href=\"https://doc.rust-lang.org/std/cmp/trait.Ord.html\" rel=\"noopener noreferrer\"><code>Ord</code></a>，所以它们不能被用于特质边界需要这些特质的类型，例如<a href=\"https://doc.rust-lang.org/std/collections/struct.BTreeMap.html\" rel=\"noopener noreferrer\"><code>BTreeMap</code></a>或[<code>HashMap</code>]。这一点很重要，因为这些类型<em>假设</em>它们的键提供了一个总排序或总等价关系，否则会出现故障。</p>\n<p>有一个<a href=\"https://crates.io/crates/ordered-float\" rel=\"noopener noreferrer\">crate</a>包装了<a href=\"https://doc.rust-lang.org/std/primitive.f32.html\" rel=\"noopener noreferrer\"><code>f32</code></a>和<a href=\"https://doc.rust-lang.org/std/primitive.f64.html\" rel=\"noopener noreferrer\"><code>f64</code></a>以提供<a href=\"https://doc.rust-lang.org/std/cmp/trait.Ord.html\" rel=\"noopener noreferrer\"><code>Ord</code></a>和<a href=\"https://doc.rust-lang.org/std/cmp/trait.Eq.html\" rel=\"noopener noreferrer\"><code>Eq</code></a>的实现，这在某些情况下可能很有用。</p>\n<h2>我如何在数字类型之间进行转换?</h2>\n<p>有两种方法：<code>as</code>关键字，它为原始类型做简单的转换，以及<a href=\"https://doc.rust-lang.org/std/convert/trait.Into.html\" rel=\"noopener noreferrer\"><code>Into</code></a>和<a href=\"https://doc.rust-lang.org/std/convert/trait.From.html\" rel=\"noopener noreferrer\"><code>From</code></a>特性，它们是为一些类型转换而实现的（你也可以为你自己的类型实现）。<a href=\"https://doc.rust-lang.org/std/convert/trait.Into.html\" rel=\"noopener noreferrer\"><code>Into</code></a>和<a href=\"https://doc.rust-lang.org/std/convert/trait.From.html\" rel=\"noopener noreferrer\"><code>From</code></a>特性只在转换无损的情况下实现，所以例如，<code>f64::from(0f32)</code>会被编译，而<code>f32::from(0f64)</code>不会。另一方面，<code>as</code>将在任何两个原始类型之间进行转换，必要时截断数值。</p>\n<h2>为什么Rust没有增量和减量运算符?</h2>\n<p>Preincrement 和 Postincrement（以及与之对应的 Decrement）虽然方便，但也相当复杂。它们需要对计算顺序的了解，并经常导致 C 和 C++ 中的微妙错误和未定义行为。和<code>x = x + 1</code>相比<code>x += 1</code>只是稍微长一点，但不明确。</p>\n<h1>字符串</h1>\n<h2>如何将一个<code>String</code>或<code>Vec&lt;T&gt;</code>转换为一个片断(<code>&amp;str</code>和<code>&amp;[T]</code>)?</h2>\n<p>通常情况下，你可以在期望有片断的地方传递一个对<code>String</code>或<code>Vec&lt;T&gt;</code>的引用。使用<a href=\"https://doc.rust-lang.org/book/ch15-02-deref.html\" rel=\"noopener noreferrer\">Deref coercions</a>，<a href=\"https://doc.rust-lang.org/std/string/struct.String.html\" rel=\"noopener noreferrer\"><code>String</code>s</a>和<a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html\" rel=\"noopener noreferrer\"><code>Vec</code>s</a>在用<code>&amp;</code>或<code>&amp;mut</code>传递引用时，将自动联合到各自的片上。</p>\n<p>在<code>&amp;str</code>和<code>&amp;[T]</code>上实现的方法可以直接访问<code>String</code>和<code>Vec&lt;T&gt;</code>。例如，<code>some_string.trim()</code>可以工作，尽管<code>trim</code>是<code>&amp;str</code>上的方法，而<code>some_string</code>是一个<code>String</code>。</p>\n<p>在某些情况下，例如通用代码，有必要进行手动转换。手动转换可以使用切片操作符来实现，像这样。<code>&amp;my_vec[...]</code>。</p>\n<h2>我如何从<code>&amp;str</code>转换到<code>String</code>或反过来？</h2>\n<p><a href=\"https://doc.rust-lang.org/std/string/trait.ToString.html#tymethod.to_string\" rel=\"noopener noreferrer\"><code>to_string()</code></a>方法可以将<a href=\"https://doc.rust-lang.org/std/primitive.str.html\" rel=\"noopener noreferrer\"><code>&amp;str</code></a>转换为<a href=\"https://doc.rust-lang.org/std/string/struct.String.html\" rel=\"noopener noreferrer\"><code>String</code></a>，当你借用一个引用时，<a href=\"https://doc.rust-lang.org/std/string/struct.String.html\" rel=\"noopener noreferrer\"><code>String</code></a>自动转换为<a href=\"https://doc.rust-lang.org/std/primitive.str.html\" rel=\"noopener noreferrer\"><code>&amp;str</code></a>。这两种情况在下面的例子中都有演示。</p>\n<pre><code>fn main() {\n    let s = \"Jane Doe\".to_string();\n    say_hello(&amp;s);\n}\n\nfn say_hello(name: &amp;str) {\n    println! (\"Hello {}!\", name);\n}\n</code></pre>\n<h2>两种不同的字符串类型之间有什么区别？</h2>\n<p><a href=\"https://doc.rust-lang.org/std/string/struct.String.html\" rel=\"noopener noreferrer\"><code>String</code></a>是一个在堆上分配的 UTF-8 字节的自有缓冲区。可变的<a href=\"https://doc.rust-lang.org/std/string/struct.String.html\" rel=\"noopener noreferrer\"><code>String</code></a>可以被修改，根据需要增加其容量。<a href=\"https://doc.rust-lang.org/std/primitive.str.html\" rel=\"noopener noreferrer\"><code>&amp;str</code></a>是在其他地方分配的<a href=\"https://doc.rust-lang.org/std/string/struct.String.html\" rel=\"noopener noreferrer\"><code>String</code></a>的一个固定容量的“视图”，如果是从<a href=\"https://doc.rust-lang.org/std/string/struct.String.html\" rel=\"noopener noreferrer\"><code>String</code></a>中引用的片断，通常在堆上，如果是字符串字面，在静态内存中。</p>\n<p><a href=\"https://doc.rust-lang.org/std/primitive.str.html\" rel=\"noopener noreferrer\"><code>&amp;str</code></a>是由 Rust 语言实现的原始类型，而<a href=\"https://doc.rust-lang.org/std/string/struct.String.html\" rel=\"noopener noreferrer\"><code>String</code></a>是由标准库实现的。</p>\n<h2>我如何在一个<code>String</code>中进行 O(1) 的字符访问?</h2>\n<p>你不能。至少在你不清楚“字符”是什么意思的情况下，以及在对字符串进行预处理以找到所需字符的索引的情况下是不行的。</p>\n<p>Rust 字符串是 UTF-8 编码的。UTF-8 中的单个视觉字符不一定是一个字节，因为它在 ASCII 编码的字符串中是一个字节。每个字节被称为“代码单元”（在 UTF-16 中，代码单元是 2 个字节；在 UTF-32 中是4个字节）。“代码点”由一个或多个代码单元组成，并组合成最接近于字符的“字素群”。</p>\n<p>因此，即使你可以对 UTF-8 字符串中的字节进行索引，你也无法在恒定时间内访问第 i 个码位或字母群。然而，如果你知道所需的码位或字形群从哪个字节开始，那么你就可以在恒定时间内访问它。包括<a href=\"https://doc.rust-lang.org/std/primitive.str.html#method.find\" rel=\"noopener noreferrer\">str::find()</a>和 regex 匹配在内的函数都会返回字节索引，以方便这种访问。</p>\n<h2>为什么字符串默认为 UTF-8？</h2>\n<p><a href=\"https://doc.rust-lang.org/std/primitive.str.html\" rel=\"noopener noreferrer\"><code>str</code></a>类型是 UTF-8，因为我们在野外观察到更多的文本是用这种编码的--特别是在网络传输中，它是 endian-agnostic 的--而且我们认为最好不要让 I/O 的默认处理涉及到在每个方向重新编码代码点。</p>\n<p>这确实意味着在一个字符串中定位一个特定的 Unicode 编码点是一个 O(n) 操作，尽管如果开始的字节索引已经知道，那么它们可以在 O(1) 中被访问。一方面，这显然是不可取的；另一方面，这个问题充满了权衡，我们想指出几个重要的限定条件。</p>\n<p>扫描一个<a href=\"https://doc.rust-lang.org/std/primitive.str.html\" rel=\"noopener noreferrer\"><code>str</code></a>的 ASCII 范围的代码点仍然可以安全地逐个字节地进行。如果你使用<a href=\"https://doc.rust-lang.org/std/primitive.str.html#method.as_bytes\" rel=\"noopener noreferrer\"><code>.as_bytes()</code></a>，取出一个<a href=\"https://doc.rust-lang.org/std/primitive.u8.html\" rel=\"noopener noreferrer\"><code>u8</code></a>只需花费<code>O(1)</code>，并产生一个可以被转换并与 ASCII 范围的<a href=\"https://doc.rust-lang.org/std/primitive.char.html\" rel=\"noopener noreferrer\"><code>char</code></a>比较的值。因此，如果你（比如）在<code>\\n</code>上断行，基于字节的处理方法仍然有效。UTF-8 就是这样被精心设计的。</p>\n<p>大多数“面向字符”的文本操作只有在非常有限的语言假设下才能工作，如“仅 ASCII 范围的代码点”。在 ASCII 范围之外，你往往不得不使用复杂的（非恒定时间）算法来确定语言单位（字形、单词、段落）的边界。我们建议使用一种“诚实的”具有语言意识的、经 Unicode 批准的算法。</p>\n<p><a href=\"https://doc.rust-lang.org/std/primitive.char.html\" rel=\"noopener noreferrer\"><code>char</code></a>类型是 UTF-32。如果你确定你需要做一个代码点的算法，写一个<code>type wstr = [char]</code>，并将一个<a href=\"https://doc.rust-lang.org/std/primitive.str.html\" rel=\"noopener noreferrer\"><code>str</code></a>一次性解压到其中，然后用<code>wstr</code>工作，这是非常容易的。换句话说：如果你需要使用这种编码，语言没有<code>默认解码为 UTF32</code>的事实不应该阻止你解码（或以任何其他方式重新编码）。</p>\n<p>关于为什么 UTF-8 通常比 UTF-16 或 UTF-32 更受欢迎，请阅读<a href=\"http://utf8everywhere.org/\" rel=\"noopener noreferrer\"> UTF-8 Everywhere 宣言</a>。</p>\n<h2>我应该使用什么字符串类型？</h2>\n<p>Rust 有四对字符串类型，每一对都有不同的用途。在每一对中，都有一个“自有”的字符串类型，和一个“分片”的字符串类型。这个组织看起来像这样。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\"></th>\n<th align=\"left\">\"Slice\" type</th>\n<th align=\"left\">\"Owned\" type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">UTF-8</td>\n<td align=\"left\"><code>str</code></td>\n<td align=\"left\"><code>String</code></td>\n</tr>\n<tr>\n<td align=\"left\">OS-compatible</td>\n<td align=\"left\"><code>OsStr</code></td>\n<td align=\"left\"><code>OsString</code></td>\n</tr>\n<tr>\n<td align=\"left\">C-compatible</td>\n<td align=\"left\"><code>CStr</code></td>\n<td align=\"left\"><code>CString</code></td>\n</tr>\n<tr>\n<td align=\"left\">System path</td>\n<td align=\"left\"><code>Path</code></td>\n<td align=\"left\"><code>PathBuf</code></td>\n</tr>\n</tbody>\n</table>\n<p>Rust 的不同字符串类型有不同的用途。<code>String</code>和<code>str</code>是 UTF-8 编码的通用字符串。<code>OsString</code>和<code>OsStr</code>是根据当前平台编码的，在与操作系统交互时使用。<code>CString</code>和<code>CStr</code>相当于C 语言中的字符串，在 FFI 代码中使用。<code>PathBuf</code>和<code>Path</code>是对<code>OsString</code>和<code>OsStr</code>的方便包装，提供特定于路径操作的方法。</p>\n<h2>我怎样才能写一个既接受<code>&amp;str</code>又接受<code>String</code>的函数?</h2>\n<p>有几种选择，取决于函数的需要。</p>\n<ul>\n<li>如果函数需要一个自有的字符串，但又想接受任何类型的字符串，可以使用一个<code>Into&lt;String&gt;</code>绑定。</li>\n<li>如果函数需要一个字符串分片，但希望接受任何类型的字符串，使用<code>AsRef&lt;str&gt;</code>绑定。</li>\n<li>如果函数不关心字符串的类型，而想统一处理这两种可能性，使用<code>Cow&lt;str&gt;</code>作为输入类型。</li>\n</ul>\n<h3>使用<code>Into&lt;String&gt;</code></h3>\n<p>在这个例子中，该函数将同时接受自有字符串和字符串片，要么不做任何事情，要么在函数主体内将输入的字符串转换为自有字符串。注意，转换需要明确进行，否则不会发生。</p>\n<pre><code>fn accepts_both&lt;S: Into&lt;String&gt;&gt;(s: S) {\n    let s = s.into(); // 这将把 s 转换成一个`String`。\n    // ... 其余的函数\n}\n</code></pre>\n<h3>使用<code>AsRef&lt;str&gt;</code></h3>\n<p>在这个例子中，该函数将接受拥有的字符串和字符串片断，要么不做任何事情，要么将输入的字符串片断转换为字符串。这可以通过引用输入来自动完成，像这样。</p>\n<pre><code>fn accepts_both&lt;S: AsRef&lt;str&gt;&gt;(s: &amp;S) {\n    // ... 该函数的主体\n}\n</code></pre>\n<h3>使用<code>Cow&lt;str&gt;</code></h3>\n<p>在这个例子中，函数接收了一个<code>Cow&lt;str&gt;</code>，它不是一个通用类型，而是一个容器，根据需要包含一个自有的字符串或字符串片断。</p>\n<pre><code>fn accepts_cow(s: Cow&lt;str&gt;) {\n    // ... 该函数的主体\n}\n</code></pre>\n<h1>集合</h1>\n<h2>我可以在 Rust 中有效地实现向量和链表等数据结构吗?</h2>\n<p>如果你实现这些数据结构的原因是为了在其他程序中使用它们，那就没有必要了，因为这些数据结构的有效实现已经由标准库提供了。</p>\n<p>然而，如果<a href=\"book-to-many-lists\" rel=\"noopener noreferrer\">你的理由只是为了学习</a>，那么你很可能需要涉足不安全代码。虽然这些数据结构可以完全用安全的 Rust 来实现，但其性能可能会比使用不安全的代码要差。原因很简单，向量和链接列表等数据结构依赖于指针和内存操作，而这些操作在安全 Rust 中是不允许的。</p>\n<p>例如，一个双链接列表需要对每个节点有两个可变引用，但这违反了 Rust 的可变引用别名规则。你可以用<a href=\"https://doc.rust-lang.org/std/rc/struct.Weak.html\" rel=\"noopener noreferrer\"><code>Weak&lt;T&gt;</code></a>来解决这个问题，但是性能会比你想要的差。使用不安全的代码，你可以绕过可变引用别名规则的限制，但必须手动验证你的代码是否引入了内存安全违规。</p>\n<h2>我怎样才能在不移动/消耗集合的情况下对其进行迭代？</h2>\n<p>最简单的方法是通过使用集合的<a href=\"https://doc.rust-lang.org/std/iter/trait.IntoIterator.html\" rel=\"noopener noreferrer\"><code>IntoIterator</code></a>实现。下面是一个关于<a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html\" rel=\"noopener noreferrer\"><code>&amp;Vec</code></a>的例子。</p>\n<pre><code>let v = vec! [1,2,3,4,5];\nfor item in &amp;v {\n    print! (\"{} \", item);\n}\nprintln! (\"\\nLength: {}\", v.len());\n</code></pre>\n<p>Rust 的<code>for</code>循环对它们要迭代的东西调用<code>into_iter()</code>（定义在<a href=\"https://doc.rust-lang.org/std/iter/trait.IntoIterator.html\" rel=\"noopener noreferrer\"><code>IntoIterator</code></a>trait 上）。任何实现了<a href=\"https://doc.rust-lang.org/std/iter/trait.IntoIterator.html\" rel=\"noopener noreferrer\"><code>IntoIterator</code></a>trait 的东西都可以用<code>for</code>循环进行循环。<a href=\"https://doc.rust-lang.org/std/iter/trait.IntoIterator.html\" rel=\"noopener noreferrer\"><code>IntoIterator</code></a>是为<a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html\" rel=\"noopener noreferrer\"><code>&amp;Vec</code></a>和<a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html\" rel=\"noopener noreferrer\"><code>&amp;mut Vec</code></a>实现的，导致来自<code>into_iter()</code>的迭代器借用集合的内容，而不是移动/消费它们。这对其他标准集合也是如此。</p>\n<p>如果需要一个移动/消耗的迭代器，编写<code>for</code>循环时不要在迭代中使用<code>&amp;</code>或<code>&amp;mut</code>。</p>\n<p>如果你需要直接访问一个借用的迭代器，你通常可以通过调用<code>iter()</code>方法得到它。</p>\n<h2>为什么我需要在数组声明中输入数组大小?</h2>\n<p>你不一定要这样做。如果你直接声明一个数组，大小是根据元素的数量推断出来的。但是如果你声明的是一个接收固定大小的数组的函数，编译器就必须知道这个数组有多大。</p>\n<p>有一点需要注意的是，目前 Rust 并没有对不同大小的数组提供泛型。如果你想接受一个连续的可变数量的值的容器，使用<a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html\" rel=\"noopener noreferrer\"><code>Vec</code></a>或 slice（取决于你是否需要所有权）。</p>\n<h1>所有权</h1>\n<h2>我怎样才能实现一个包含环的图或其他数据结构?</h2>\n<p>至少有四种选择（在<a href=\"https://rust-unofficial.github.io/too-many-lists/\" rel=\"noopener noreferrer\">Too Many Linked Lists</a>中详细讨论过）。</p>\n<ul>\n<li>你可以使用<a href=\"https://doc.rust-lang.org/std/rc/struct.Rc.html\" rel=\"noopener noreferrer\"><code>Rc</code></a>和<a href=\"https://doc.rust-lang.org/std/rc/struct.Weak.html\" rel=\"noopener noreferrer\"><code>Weak</code></a>实现它，以允许节点的共享所有权。尽管这种方法需要付出内存管理的代价。</li>\n<li>你可以使用“不安全”的代码实现它，使用原始指针。这将更加高效，但却绕过了 Rust 的安全保证。</li>\n<li>使用向量和这些向量的索引。有<a href=\"http://smallcultfollowing.com/babysteps/blog/2015/04/06/modeling-graphs-in-rust-using-vector-indices/\" rel=\"noopener noreferrer\">几个</a><a href=\"https://featherweightmusings.blogspot.com/2015/04/graphs-in-rust.html\" rel=\"noopener noreferrer\">可用</a>这种方法的例子和解释。</li>\n<li>用<a href=\"https://doc.rust-lang.org/std/cell/struct.UnsafeCell.html\" rel=\"noopener noreferrer\"><code>UnsafeCell</code></a>使用借用的引用。对于这种方法有<a href=\"https://github.com/nrc/r4cppp/blob/master/graphs/README.md#node-and-unsafecell\" rel=\"noopener noreferrer\">解释和代码</a>。</li>\n</ul>\n<h2>我怎样才能定义一个包含对其自身字段之一的引用的结构？</h2>\n<p>这是有可能的，但是这样做没有用。该结构会被自己永久借用，因此不能被移动。下面是一些说明这个问题的代码。</p>\n<pre><code>use std::cell::Cell;\n\n#[derive(Debug)]\nstruct Unmovable&lt;'a&gt; {\n    x: u32,\n    y: Cell&lt;Option&lt;&amp;'a u32&gt;&gt;。\n}\n\nfn main() {\n    let test = Unmovable { x: 42, y: Cell::new(None) }。\n    test.y.set(Some(&amp;test.x))。\n\n    println! (\"{:?}\", test);\n}\n</code></pre>\n<h2>按值传递、消耗、移动和转移所有权之间有什么区别?</h2>\n<p>这些是同一事物的不同术语。在所有的情况下，这意味着值已经被转移到另一个所有者那里，并且脱离了原所有者的占有，原所有者不能再使用它。如果一个类型实现了<code>Copy</code>特性，那么原所有者的值就不会被废止，仍然可以使用。</p>\n<h2>为什么某些类型的值在传递给一个函数后可以使用，而重复使用其他类型的值会导致错误？</h2>\n<p>如果一个类型实现了<a href=\"https://doc.rust-lang.org/std/marker/trait.Copy.html\" rel=\"noopener noreferrer\"><code>Copy</code></a>特性，那么它在传递给函数时就会被复制。Rust 中的所有数字类型都实现了<a href=\"https://doc.rust-lang.org/std/marker/trait.Copy.html\" rel=\"noopener noreferrer\"><code>Copy</code></a>，但结构类型默认不实现<a href=\"https://doc.rust-lang.org/std/marker/trait.Copy.html\" rel=\"noopener noreferrer\"><code>Copy</code></a>，所以它们被移动。这意味着该结构不能再被用于其他地方，除非通过返回将其移回函数之外。</p>\n<h2>如何处理“use of moved value”的错误？</h2>\n<p>这个错误意味着你要使用的值已经被转移到一个新的所有者那里。首先要检查的是有关的移动是否是必要的：如果它移动到一个函数中，也许可以重写该函数以使用一个引用，而不是移动。否则，如果被移动的类型实现了<a href=\"https://doc.rust-lang.org/std/clone/trait.Clone.html\" rel=\"noopener noreferrer\"><code>Clone</code></a>，那么在移动前对其调用<code>clone()</code>将移动它的一个副本，留下原始的仍然可以继续使用。但是请注意，克隆一个值通常应该是最后的手段，因为克隆可能很昂贵，会导致进一步的分配。</p>\n<p>如果移动的值是你自己的自定义类型，考虑实现<a href=\"https://doc.rust-lang.org/std/marker/trait.Copy.html\" rel=\"noopener noreferrer\"><code>Copy</code></a>（用于隐式复制，而不是移动）或<a href=\"https://doc.rust-lang.org/std/clone/trait.Clone.html\" rel=\"noopener noreferrer\"><code>Clone</code></a>（显式复制）。<a href=\"https://doc.rust-lang.org/std/marker/trait.Copy.html\" rel=\"noopener noreferrer\"><code>Copy</code></a>最常用的实现方式是<code>#[derive(Copy, Clone)]</code>（<a href=\"https://doc.rust-lang.org/std/marker/trait.Copy.html\" rel=\"noopener noreferrer\"><code>Copy</code></a>需要<a href=\"https://doc.rust-lang.org/std/clone/trait.Clone.html\" rel=\"noopener noreferrer\"><code>Clone</code></a>），而<a href=\"https://doc.rust-lang.org/std/clone/trait.Clone.html\" rel=\"noopener noreferrer\"><code>Clone</code></a>则是`#[derive(Clone)]。</p>\n<p>如果这些都不可能，你可能想修改获得所有权的函数，以便在函数退出时返回数值的所有权。</p>\n<h2>在方法声明中使用<code>self</code>、<code>&amp;self</code>或<code>&amp;mut self</code>的规则是什么?</h2>\n<ul>\n<li>当一个函数需要消耗值的时候，使用<code>self</code>。</li>\n<li>当一个函数只需要一个对值的只读引用时，使用<code>&amp;self</code>。</li>\n<li>当一个函数需要在不消耗该值的情况下改变该值时，使用<code>&amp;mut self</code>。</li>\n</ul>\n<h2>我怎样才能理解借用检查器？</h2>\n<p>借用检查器在评估 Rust 代码时只应用一些规则，这些规则可以在 Rust 书的<a href=\"https://doc.rust-lang.org/book/ch15-02-deref.html\" rel=\"noopener noreferrer\">借用部分</a>中找到。这些规则是：</p>\n<blockquote>\n<p>首先，任何借用必须持续的范围不大于所有者的范围。第二，你可以有这两种借用中的一种或另一种，但不能同时存在：</p>\n<ul>\n<li>对一个资源的一个或多个引用（&amp;T）。</li>\n<li>一个可变的引用（&amp;mut T）。</li>\n</ul>\n</blockquote>\n<p>虽然这些规则本身很简单，但持续地遵守这些规则并不容易，特别是对于那些不习惯推理寿命和所有权的人来说。</p>\n<p>了解借用检查器的第一步是阅读它产生的错误。为了确保借用检查器在解决它所发现的问题方面提供高质量的帮助，我们做了大量的工作。当你遇到借用检查器的问题时，第一步是慢慢地、仔细地阅读所报告的错误，只有在理解了所描述的错误之后，才能接近代码。</p>\n<p>第二步是熟悉 Rust 标准库提供的所有权和可变性相关的容器类型，包括<a href=\"https://doc.rust-lang.org/std/cell/struct.Cell.html\" rel=\"noopener noreferrer\"><code>Cell</code></a>、<a href=\"https://doc.rust-lang.org/std/cell/struct.RefCell.html\" rel=\"noopener noreferrer\"><code>RefCell</code></a>和<a href=\"https://doc.rust-lang.org/std/borrow/enum.Cow.html\" rel=\"noopener noreferrer\"><code>Cow</code></a>。这些都是表达某些所有权和可变性情况的有用和必要的工具，并且被写成性能代价最小。</p>\n<p>理解借用检查器最重要的一个部分是实践。Rust 的强静态分析保证是严格的，与许多程序员之前的工作有很大不同。需要一些时间才能完全适应一切。</p>\n<p>如果你发现自己在借用检查器上挣扎，或者没有耐心了，请随时联系<a href=\"https://www.rust-lang.org/community\" rel=\"noopener noreferrer\"> Rust 社区</a>寻求帮助。</p>\n<h2>什么时候<code>Rc</code>有用？</h2>\n<p>这在<a href=\"https://doc.rust-lang.org/std/rc/struct.Rc.html\" rel=\"noopener noreferrer\"><code>Rc</code></a>的官方文档中有所涉及，Rust 的非原子引用计算的指针类型。简而言之，<a href=\"https://doc.rust-lang.org/std/rc/struct.Rc.html\" rel=\"noopener noreferrer\"><code>Rc</code></a>和它的线程安全表亲<a href=\"https://doc.rust-lang.org/std/sync/struct.Arc.html\" rel=\"noopener noreferrer\"><code>Arc</code></a>对于表达共享所有权是很有用的，当没有人访问相关内存时，系统会自动将其取消。</p>\n<h2>我如何从一个函数中返回一个闭包？</h2>\n<p>要从一个函数中返回一个闭包，它必须是一个“移动闭包”，也就是说，闭包是用<code>move</code>关键字声明的。正如<a href=\"https://doc.rust-lang.org/book/ch13-01-closures.html\" rel=\"noopener noreferrer\"> Rust 书中所解释的</a>，这使得闭包拥有自己的捕获变量的副本，独立于其父级堆栈框架。否则，返回一个闭包将是不安全的，因为它将允许访问不再有效的变量；换句话说：它将允许读取可能无效的内存。闭包还必须被包裹在一个<a href=\"https://doc.rust-lang.org/std/boxed/struct.Box.html\" rel=\"noopener noreferrer\"><code>Box</code></a>中，这样它就被分配在堆上。阅读更多关于这个的内容<a href=\"https://doc.rust-lang.org/book/ch13-01-closures.html\" rel=\"noopener noreferrer\">在书中</a>。</p>\n<h2>什么是 deref coercion，它是如何工作的？</h2>\n<p><a href=\"https://doc.rust-lang.org/book/ch15-02-deref.html\" rel=\"noopener noreferrer\">deref coercion</a> 是一个很方便的 coercion。自动将对指针的引用(例如, <code>&amp;Rc&lt;T&gt;</code> 或 <code>&amp;Box&lt;T&gt;</code>)转换为对其内容的引用（例如，<code>&amp;T</code>）。Deref coercion 的存在是为了使 Rust 的使用更符合人体工程学，并通过<a href=\"https://doc.rust-lang.org/std/ops/trait.Deref.html\" rel=\"noopener noreferrer\"><code>Deref</code></a>特性实现。</p>\n<p>Deref 的实现表明实现类型可以通过调用<code>deref</code>方法转换为目标类型，该方法接收对调用类型的不可变的引用，并返回对目标类型的引用（具有相同的生命周期）。<code>*</code>前缀操作符是<code>deref</code>方法的简写。</p>\n<p>它们被称“coercions”，因为下面的规则，这里引用了<a href=\"https://doc.rust-lang.org/book/ch15-02-deref.html\" rel=\"noopener noreferrer\"> Rust 书</a>。</p>\n<blockquote>\n<p>如果你有一个类型<code>U</code>，并且它实现了<code>Deref&lt;Target=T&gt;</code>，那么<code>&amp;U</code>的值将自动被强制为<code>T</code>。</p>\n</blockquote>\n<p>例如，如果你有一个<code>&amp;Rc&lt;String&gt;</code>，它将通过这个规则联合成一个<code>&amp;String</code>，然后以同样的方式联合成一个<code>&amp;str</code>。因此，如果一个函数需要一个<code>&amp;str</code>参数，你可以直接传入一个<code>&amp;Rc&lt;String&gt;</code>，所有的强制都通过<code>Deref</code>特性自动处理。</p>\n<p>最常见的 Derefcoercions 种类是：</p>\n<ul>\n<li><code>&amp;Rc&lt;T&gt;</code>到<code>&amp;T</code>。</li>\n<li><code>&amp;Box&lt;T&gt;</code>到<code>&amp;T</code>。</li>\n<li><code>&amp;Arc&lt;T&gt;</code>到<code>&amp;T</code>。</li>\n<li><code>&amp;Vec&lt;T&gt;</code>改为<code>&amp;[T]</code>。</li>\n<li><code>&amp;String</code>改为<code>&amp;str</code>。</li>\n</ul>\n<h1>生命周期</h1>\n<h2>为什么是生命周期?</h2>\n<p>生命周期是 Rust 对内存安全问题的回答。它允许 Rust 确保内存安全而不需要付出垃圾回收的性能代价。它们是基于各种学术工作的。</p>\n<h2>为什么生命周期的语法是这样的？</h2>\n<p><code>'a</code>语法来自于 ML 系列编程语言，其中<code>'a</code>用于表示一个通用类型参数。对于 Rust 来说，这种语法必须是明确的、明显的，并且适合在类型声明中与 traits 和 reference 一起使用。其他的语法已经被讨论过了，但是还没有其他的语法被证明是更好的。</p>\n<h2>我如何将一个借来的东西返回到我从函数中创建的东西？</h2>\n<p>你需要确保借来的东西会超过函数的寿命。这可以通过将输出寿命与一些输入寿命绑定来实现，比如说。</p>\n<pre><code>type Pool = TypedArena&lt;Thing&gt;;\n\n// 下面的生命周期只是为了说明问题而明确写的；它可以通过后面描述的删除规则省略。\nfn create_borrowed&lt;'a&gt;(pool: &amp;'a Pool,\n                       x: i32,\n                       y: i32) -&gt; &amp;'a Thing {\n    pool.alloc(Thing { x: x, y: y })\n}\n</code></pre>\n<p>另一种方法是通过返回一个自有类型如<a href=\"https://doc.rust-lang.org/std/string/struct.String.html\" rel=\"noopener noreferrer\"><code>String</code></a>来完全消除引用。</p>\n<pre><code>fn happy_birthday(name: &amp;str, age: i64) -&gt; String {\n    format! (\"Hello {}! You're {} years old!\", name, age)\n}\n</code></pre>\n<p>这种方法比较简单，但往往会导致不必要的分配。</p>\n<h2>为什么有些引用有寿命，如<code>&amp;'a T</code>，而有些则没有，如<code>&amp;T</code>？</h2>\n<p>事实上, <em>所有</em>引用类型都有一个寿命, 但大多数时候你不必明确写出\n它是明确的。规则如下。</p>\n<ol>\n<li>\n<p>在一个函数体中，你永远不需要明确地写出生命周期；正确的值应该总是被推断出来的。</p>\n</li>\n<li>\n<p>在一个函数的<em>签名</em>中（例如，在其参数的类型或其返回类型中），你<em>可能</em>会需要写一个生命周期。这里的生命周期使用一个简单的默认方案，称为<a href=\"https://doc.rust-lang.org/book/ch10-03-lifetime-syntax.html#lifetime-elision\" rel=\"noopener noreferrer\">\"lifetime elision\"</a>。它由以下三条规则组成：</p>\n<ul>\n<li>在一个函数的参数中，每一个被省略的生命周期都成为一个独立的生命周期参数。</li>\n<li>如果正好只有一个输入生命周期，无论是否被省略，该生命周期都被分配给所有返回值中被省略的生命周期。</li>\n<li>如果有多个输入生命周期，但其中一个是 &amp;self 或 &amp;mut self，那么 self 的生命周期将被分配给所有被忽略的返回生命周期。</li>\n</ul>\n</li>\n<li>\n<p>最后，在“结构”或“枚举”的定义中，所有的生命周期必须被明确地声明。</p>\n</li>\n</ol>\n<p>如果这些规则导致了编译错误，Rust 编译器将提供一个错误信息，指出所造成的错误，并根据推理过程的哪一步造成的错误，提出一个潜在的解决方案。</p>\n<h2>Rust如何保证“没有空指针”和“没有悬空指针”?</h2>\n<p>构造一个<code>&amp;Foo</code>或<code>&amp;mut Foo</code>类型的值的唯一方法是指定一个引用所指向的<code>Foo</code>类型的现有值。引用在给定的代码区域内（引用的生命周期）“借用”原始值，在借用期间，被借用的值不能被移动或销毁。</p>\n<h2>我如何用“null”来表达一个值的缺失?</h2>\n<p>你可以用<a href=\"https://doc.rust-lang.org/std/option/enum.Option.html\" rel=\"noopener noreferrer\"><code>Option</code></a>类型来做，它可以是<code>Some(T)</code>或<code>None</code>。<code>Some(T)</code>表示其中包含一个<code>T</code>类型的值，而<code>None</code>表示没有值。</p>\n<h1>泛型</h1>\n<h2>什么是“单态化”?</h2>\n<p>单态化是将泛型函数（或结构）的每一次使用都基于调用该函数（或使用该结构）的参数类型用特定的实例进行单态化。</p>\n<p>在单态化过程中，泛型函数的一个新副本被翻译为该函数实例化的每一组独特类型。这与 C++ 使用的策略相同。它的结果是为每个调用点专门设计的快速代码，并且是静态调度的，其代价是用许多不同类型实例化的函数会导致“代码膨胀”，即多个函数实例会导致比用其他翻译策略创建的二进制文件更大。</p>\n<p>接受<a href=\"https://doc.rust-lang.org/book/ch17-02-trait-objects.html\" rel=\"noopener noreferrer\"> Trait Object </a>而不是类型参数的函数不进行单态化。相反，特质对象上的方法在运行时被动态地分配。</p>\n<h2>一个函数和一个没有捕获任何变量的闭包之间有什么区别？</h2>\n<p>函数和闭包在操作上是等价的，但由于它们的实现方式不同，所以有不同的运行时表示。</p>\n<p>函数是语言的内置基元，而闭包本质上是三种特征之一的语法糖。<a href=\"https://doc.rust-lang.org/std/ops/trait.Fn.html\" rel=\"noopener noreferrer\"><code>Fn</code></a>, <a href=\"https://doc.rust-lang.org/std/ops/trait.FnMut.html\" rel=\"noopener noreferrer\"><code>FnMut</code></a>, 和 <a href=\"https://doc.rust-lang.org/std/ops/trait.FnOnce.html\" rel=\"noopener noreferrer\"><code>FnOnce</code></a>。当你创建一个闭包时，Rust 编译器会自动创建一个结构，实现这三个结构的相应特性，并将捕获的环境变量作为成员，并使该结构可以作为一个函数被调用。裸露的函数不能捕获环境。</p>\n<p>这些特征之间的最大区别是它们如何接受“self”参数。<a href=\"https://doc.rust-lang.org/std/ops/trait.Fn.html\" rel=\"noopener noreferrer\"><code>Fn</code></a>使用<code>&amp;self</code>，<a href=\"https://doc.rust-lang.org/std/ops/trait.FnMut.html\" rel=\"noopener noreferrer\"><code>FnMut</code></a>使用<code>&amp;mut self</code>，而<a href=\"https://doc.rust-lang.org/std/ops/trait.FnOnce.html\" rel=\"noopener noreferrer\"><code>FnOnce</code></a>使用<code>self</code>。</p>\n<p>即使一个闭包没有捕获任何环境变量，它在运行时也被表示为两个指针，与其他闭包相同。</p>\n<h2>什么是高阶类型，为什么我需要它们，以及为什么 Rust 没有它们？</h2>\n<p>高等类型是指具有未填充参数的类型。类型构造器，如<a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html\" rel=\"noopener noreferrer\"><code>Vec</code></a>，<a href=\"https://doc.rust-lang.org/std/result/enum.Result.html\" rel=\"noopener noreferrer\"><code>Result</code></a>，和<a href=\"https://doc.rust-lang.org/std/collections/struct.HashMap.html\" rel=\"noopener noreferrer\"><code>HashMap</code></a>都是高类型类型的例子：每个类型都需要一些额外的类型参数，以便实际表示一个特定的类型，如<code>Vec&lt;u32&gt;</code>。对高类型的支持意味着这些“不完整”的类型可以在任何可以使用“完整”类型的地方使用，包括作为函数的泛型。</p>\n<p>任何完整的类型，像<a href=\"https://doc.rust-lang.org/std/primitive.i32.html\" rel=\"noopener noreferrer\"><code>i32</code></a>，<a href=\"https://doc.rust-lang.org/std/primitive.bool.html\" rel=\"noopener noreferrer\"><code>bool</code></a>或<a href=\"https://doc.rust-lang.org/std/primitive.char.html\" rel=\"noopener noreferrer\"><code>char</code></a>都属于<code>*</code>类型（这个符号来自类型理论领域）。一个有一个参数的类型，像<a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html\" rel=\"noopener noreferrer\"><code>Vec&lt;T&gt;</code></a>是属于<code>* -&gt; *</code>，意思是<a href=\"https://doc.rust-lang.org/std/vec/struct.Vec.html\" rel=\"noopener noreferrer\"><code>Vec&lt;T&gt;</code></a>接收一个完整的类型，像<a href=\"https://doc.rust-lang.org/std/primitive.i32.html\" rel=\"noopener noreferrer\"><code>i32</code></a>，并返回一个完整类型<code>Vec&lt;i32&gt;</code>。一个有三个参数的类型，如<a href=\"https://doc.rust-lang.org/std/collections/struct.HashMap.html\" rel=\"noopener noreferrer\"><code>HashMap&lt;K, V, S&gt;</code></a>是一种<code>* -&gt; * -&gt; * -&gt; *</code>，并接收三个完整的类型（如<a href=\"https://doc.rust-lang.org/std/primitive.i32.html\" rel=\"noopener noreferrer\"><code>i32</code></a>，<a href=\"https://doc.rust-lang.org/std/string/struct.String.html\" rel=\"noopener noreferrer\"><code>String</code></a>，和<a href=\"https://doc.rust-lang.org/std/collections/hash_map/struct.RandomState.html\" rel=\"noopener noreferrer\"><code>RandomState</code></a>），产生一个新的完整类型<code>HashMap&lt;i32, String, RandomState&gt;</code>。</p>\n<p>除了这些例子之外，类型构造函数还可以接受<em>生命周期</em>参数，我们将其表示为<code>Lt</code>。例如，<code>slice::Iter</code>的种类是<code>Lt -&gt; * -&gt; *</code>，因为它必须像<code>Iter&lt;'a, u32&gt;</code>一样被实例化。</p>\n<p>由于缺乏对高阶类型的支持，因此很难编写某些类型的通用代码。对于像迭代器这样的概念的抽象来说，这尤其成问题，因为迭代器通常至少要在一个生命周期内进行参数化。这反过来又阻碍了对 Rust 的集合进行抽象的 traits 的创建。</p>\n<p>另一个常见的例子是像 functors 或 monads 这样的概念，它们都是类型构造函数，而不是单一类型。</p>\n<p>Rust 目前并不支持高类型的类型，因为与我们想做的其他改进相比，这并不是一个优先事项。由于该设计是一个重大的、跨领域的变化，我们也想谨慎地对待它。但是目前缺乏支持并没有什么内在的原因。</p>\n<h2>通用类型中像<code>&lt;T=Foo&gt;</code>这样的命名类型参数是什么意思?</h2>\n<p>这些被称为<a href=\"https://doc.rust-lang.org/book/ch19-03-advanced-traits.html#specifying-placeholder-types-in-trait-definitions-with-associated-types\" rel=\"noopener noreferrer\">关联类型</a>，它们允许表达不能用<code>where</code>子句表达的特征边界。例如，一个泛型约束<code>X: Bar&lt;T=Foo&gt;</code>意味着\"<code>X</code>必须实现 trait <code>Bar</code>，在<code>Bar</code>的实现中，<code>X</code>必须选择<code>Foo</code>作为<code>Bar</code>的关联类型<code>T</code>\"。这种约束不能通过<code>where</code>子句来表达的例子包括像<code>Box&lt;Bar&lt;T=Foo&gt;&gt;</code>这样的 trait object。</p>\n<p>关联类型的存在是因为泛型经常涉及类型家族，其中一个类型决定了一个家族中的所有其他类型。例如，一个图的 trait 可能将图本身作为其<code>Self</code>类型，并有节点和边的关联类型。每个图的类型唯一地决定了相关的类型。使用关联类型使这些类型族的工作更加简洁，并且在许多情况下提供更好的类型推理。</p>\n<h2>我可以重载运算符吗? 哪些操作符，如何操作？</h2>\n<p>你可以使用它们的关联特性为各种运算符提供自定义的实现。<a href=\"https://doc.rust-lang.org/std/ops/trait.Add.html\" rel=\"noopener noreferrer\"><code>Add</code></a>代表<code>+</code>，<a href=\"https://doc.rust-lang.org/std/ops/trait.Mul.html\" rel=\"noopener noreferrer\"><code>Mul</code></a>代表<code>*</code>，等等。它看起来像这样。</p>\n<pre><code>use std::ops::Add。\n\nstruct Foo;\n\nimpl Add for Foo {\n    type Output = Foo;\n    fn add(self, rhs: Foo) -&gt; Self::Output {\n        println!(\"Adding!\");\n        self\n    }\n}\n</code></pre>\n<p>以下操作符可以被重载。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Operation</th>\n<th align=\"left\">Trait</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>+</code></td>\n<td align=\"left\"><a href=\"https://doc.rust-lang.org/std/ops/trait.Add.html\" rel=\"noopener noreferrer\"><code>Add</code></a></td>\n</tr>\n<tr>\n<td align=\"left\"><code>+=</code></td>\n<td align=\"left\"><a href=\"https://doc.rust-lang.org/std/ops/trait.AddAssign.html\" rel=\"noopener noreferrer\"><code>AddAssign</code></a></td>\n</tr>\n<tr>\n<td align=\"left\"><code>binary -</code></td>\n<td align=\"left\"><a href=\"https://doc.rust-lang.org/std/ops/trait.Sub.html\" rel=\"noopener noreferrer\"><code>Sub</code></a></td>\n</tr>\n<tr>\n<td align=\"left\"><code>-=</code></td>\n<td align=\"left\"><a href=\"https://doc.rust-lang.org/std/ops/trait.SubAssign.html\" rel=\"noopener noreferrer\"><code>SubAssign</code></a></td>\n</tr>\n<tr>\n<td align=\"left\"><code>*</code></td>\n<td align=\"left\"><a href=\"https://doc.rust-lang.org/std/ops/trait.Mul.html\" rel=\"noopener noreferrer\"><code>Mul</code></a></td>\n</tr>\n<tr>\n<td align=\"left\"><code>*=</code></td>\n<td align=\"left\"><a href=\"https://doc.rust-lang.org/std/ops/trait.MulAssign.html\" rel=\"noopener noreferrer\"><code>MulAssign</code></a></td>\n</tr>\n<tr>\n<td align=\"left\"><code>/</code></td>\n<td align=\"left\"><a href=\"https://doc.rust-lang.org/std/ops/trait.Div.html\" rel=\"noopener noreferrer\"><code>Div</code></a></td>\n</tr>\n<tr>\n<td align=\"left\"><code>/=</code></td>\n<td align=\"left\"><a href=\"https://doc.rust-lang.org/std/ops/trait.DivAssign.html\" rel=\"noopener noreferrer\"><code>DivAssign</code></a></td>\n</tr>\n<tr>\n<td align=\"left\"><code>unary -</code></td>\n<td align=\"left\"><a href=\"https://doc.rust-lang.org/std/ops/trait.Neg.html\" rel=\"noopener noreferrer\"><code>Neg</code></a></td>\n</tr>\n<tr>\n<td align=\"left\"><code>%</code></td>\n<td align=\"left\"><a href=\"https://doc.rust-lang.org/std/ops/trait.Rem.html\" rel=\"noopener noreferrer\"><code>Rem</code></a></td>\n</tr>\n<tr>\n<td align=\"left\"><code>%=</code></td>\n<td align=\"left\"><a href=\"https://doc.rust-lang.org/std/ops/trait.RemAssign.html\" rel=\"noopener noreferrer\"><code>RemAssign</code></a></td>\n</tr>\n<tr>\n<td align=\"left\"><code>&amp;</code></td>\n<td align=\"left\"><a href=\"https://doc.rust-lang.org/std/ops/trait.BitAnd.html\" rel=\"noopener noreferrer\"><code>BitAnd</code></a></td>\n</tr>\n<tr>\n<td align=\"left\"><code>&amp;=</code></td>\n<td align=\"left\"><a href=\"https://doc.rust-lang.org/std/ops/trait.BitAndAssign.html\" rel=\"noopener noreferrer\"><code>BitAndAssign</code></a></td>\n</tr>\n<tr>\n<td align=\"left\">|</td>\n<td align=\"left\"><a href=\"https://doc.rust-lang.org/std/ops/trait.BitOr.html\" rel=\"noopener noreferrer\"><code>BitOr</code></a></td>\n</tr>\n<tr>\n<td align=\"left\">|=</td>\n<td align=\"left\"><a href=\"https://doc.rust-lang.org/std/ops/trait.BitOrAssign.html\" rel=\"noopener noreferrer\"><code>BitOrAssign</code></a></td>\n</tr>\n<tr>\n<td align=\"left\"><code>^</code></td>\n<td align=\"left\"><a href=\"https://doc.rust-lang.org/std/ops/trait.BitXor.html\" rel=\"noopener noreferrer\"><code>BitXor</code></a></td>\n</tr>\n<tr>\n<td align=\"left\"><code>^=</code></td>\n<td align=\"left\"><a href=\"https://doc.rust-lang.org/std/ops/trait.BitXorAssign.html\" rel=\"noopener noreferrer\"><code>BitXorAssign</code></a></td>\n</tr>\n<tr>\n<td align=\"left\"><code>!</code></td>\n<td align=\"left\"><a href=\"https://doc.rust-lang.org/std/ops/trait.Not.html\" rel=\"noopener noreferrer\"><code>Not</code></a></td>\n</tr>\n<tr>\n<td align=\"left\"><code>&lt;&lt;</code></td>\n<td align=\"left\"><a href=\"https://doc.rust-lang.org/std/ops/trait.Shl.html\" rel=\"noopener noreferrer\"><code>Shl</code></a></td>\n</tr>\n<tr>\n<td align=\"left\"><code>&lt;&lt;=</code></td>\n<td align=\"left\"><a href=\"https://doc.rust-lang.org/std/ops/trait.ShlAssign.html\" rel=\"noopener noreferrer\"><code>ShlAssign</code></a></td>\n</tr>\n<tr>\n<td align=\"left\"><code>&gt;&gt;</code></td>\n<td align=\"left\"><a href=\"https://doc.rust-lang.org/std/ops/trait.Shr.html\" rel=\"noopener noreferrer\"><code>Shr</code></a></td>\n</tr>\n<tr>\n<td align=\"left\"><code>&gt;&gt;=</code></td>\n<td align=\"left\"><a href=\"https://doc.rust-lang.org/std/ops/trait.ShrAssign.html\" rel=\"noopener noreferrer\"><code>ShrAssign</code></a></td>\n</tr>\n<tr>\n<td align=\"left\"><code>*</code></td>\n<td align=\"left\"><a href=\"https://doc.rust-lang.org/std/ops/trait.Deref.html\" rel=\"noopener noreferrer\"><code>Deref</code></a></td>\n</tr>\n<tr>\n<td align=\"left\"><code>mut *</code></td>\n<td align=\"left\"><a href=\"https://doc.rust-lang.org/std/ops/trait.DerefMut.html\" rel=\"noopener noreferrer\"><code>DerefMut</code></a></td>\n</tr>\n<tr>\n<td align=\"left\"><code>[]</code></td>\n<td align=\"left\"><a href=\"https://doc.rust-lang.org/std/ops/trait.Index.html\" rel=\"noopener noreferrer\"><code>Index</code></a></td>\n</tr>\n<tr>\n<td align=\"left\"><code>mut []</code></td>\n<td align=\"left\"><a href=\"https://doc.rust-lang.org/std/ops/trait.IndexMut.html\" rel=\"noopener noreferrer\"><code>IndexMut</code></a></td>\n</tr>\n</tbody>\n</table>\n<h2>为什么要在<code>Eq</code>/<code>PartialEq</code>和<code>Ord</code>/<code>PartialOrd</code>之间划分？</h2>\n<p>在 Rust 中，有一些类型的值只有部分排序，或者只有部分相等。部分排序的意思是，在给定的类型中可能存在既不小于也不大于对方的值。部分平等意味着可能有给定类型的值不等于自己。</p>\n<p>浮点类型（<a href=\"https://doc.rust-lang.org/std/primitive.f32.html\" rel=\"noopener noreferrer\"><code>f32</code></a>和<a href=\"https://doc.rust-lang.org/std/primitive.f64.html\" rel=\"noopener noreferrer\"><code>f64</code></a>）是每种类型的很好的例子。任何浮点类型都可以有<code>NaN</code>（意思是“不是一个数字”）的值。<code>NaN</code>不等于自己（<code>NaN == NaN</code>是 false），也不小于或大于任何其他浮点值。因此，<a href=\"https://doc.rust-lang.org/std/primitive.f32.html\" rel=\"noopener noreferrer\"><code>f32</code></a>和[<code>f64</code>]都实现了<a href=\"https://doc.rust-lang.org/std/cmp/trait.PartialOrd.html\" rel=\"noopener noreferrer\"><code>PartialOrd</code></a>和<a href=\"https://doc.rust-lang.org/std/cmp/trait.PartialEq.html\" rel=\"noopener noreferrer\"><code>PartialEq</code></a>，但没有实现<a href=\"https://doc.rust-lang.org/std/cmp/trait.Ord.html\" rel=\"noopener noreferrer\"><code>Ord</code></a>和``Eq`]<a href=\"https://doc.rust-lang.org/std/cmp/trait.Eq.html\" rel=\"noopener noreferrer\">Eq</a>。</p>\n<p>正如在<a href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E4%B8%8D%E8%83%BD%E6%AF%94%E8%BE%83%E6%B5%AE%E7%82%B9%E6%95%B0%E6%88%96%E7%94%A8%E5%AE%83%E4%BB%AC%E4%BD%9C%E4%B8%BAHashMap%E6%88%96BTreeMap%E7%9A%84%E9%94%AE\" rel=\"noopener noreferrer\">先前关于 floats 的问题</a>中解释的那样，这些区别很重要，因为有些集合依赖于总排序/equality，以便给出正确的结果。</p>\n<h1>输入/输出</h1>\n<h2>如何将一个文件读成一个“字符串”?</h2>\n<p>使用<a href=\"https://doc.rust-lang.org/std/io/trait.Read.html#method.read_to_string\" rel=\"noopener noreferrer\"><code>read_to_string()</code></a>方法, 这个方法是在<a href=\"https://doc.rust-lang.org/std/io/index.html\" rel=\"noopener noreferrer\"><code>std::io</code></a>中的<a href=\"https://doc.rust-lang.org/std/io/trait.Read.html\" rel=\"noopener noreferrer\"><code>Read</code></a>特性上定义。</p>\n<pre><code>use std::io::Read;\nuse std::fs::File;\n\nfn read_file(path: &amp;str) -&gt; Result&lt;String, std::io::Error&gt; {\n    let mut s = String::new();\n    let _ = File::open(path)?.read_to_string(&amp;mut s);  // `s` contains the contents of \"foo.txt\"\n    Ok(s)\n}\n\nfn main() {\n    match read_file(\"foo.txt\") {\n        Ok(_) =&gt; println!(\"Got file contents!\"),\n        Err(err) =&gt; println!(\"Getting file contents failed with error: {}\", err)\n    };\n}\n</code></pre>\n<h2>如何有效地读取文件输入?</h2>\n<p><a href=\"https://doc.rust-lang.org/std/fs/struct.File.html\" rel=\"noopener noreferrer\"><code>File</code></a>类型实现了<a href=\"https://doc.rust-lang.org/std/io/trait.Read.html\" rel=\"noopener noreferrer\"><code>Read</code></a>特性，它有多种函数用于读写数据，包括<a href=\"https://doc.rust-lang.org/std/io/trait.Read.html#tymethod.read\" rel=\"noopener noreferrer\"><code>read()</code></a>, <a href=\"https://doc.rust-lang.org/std/io/trait.Read.html#method.read_to_end\" rel=\"noopener noreferrer\"><code>read_to_end()</code></a>, <a href=\"https://doc.rust-lang.org/std/io/trait.Read.html#method.bytes\" rel=\"noopener noreferrer\"><code>bytes()</code></a>, <a href=\"https://doc.rust-lang.org/std/io/trait.Read.html#method.chars\" rel=\"noopener noreferrer\"><code>chars()</code></a>, 和<a href=\"https://doc.rust-lang.org/std/io/trait.Read.html#method.take\" rel=\"noopener noreferrer\"><code>take()</code></a> 。这些函数中的每一个都从一个给定的文件中读取一定量的输入。<a href=\"https://doc.rust-lang.org/std/io/trait.Read.html#tymethod.read\" rel=\"noopener noreferrer\"><code>read()</code></a> 在一次调用中读取底层系统所能提供的输入量。<a href=\"https://doc.rust-lang.org/std/io/trait.Read.html#method.read_to_end\" rel=\"noopener noreferrer\"><code>read_to_end()</code></a> 将整个缓冲区读入一个向量，需要多少空间就分配多少。<a href=\"https://doc.rust-lang.org/std/io/trait.Read.html#method.bytes\" rel=\"noopener noreferrer\"><code>bytes()</code></a>和<a href=\"https://doc.rust-lang.org/std/io/trait.Read.html#method.chars\" rel=\"noopener noreferrer\"><code>chars()</code></a>分别允许你对文件的字节和字符进行迭代。最后，<a href=\"https://doc.rust-lang.org/std/io/trait.Read.html#method.take\" rel=\"noopener noreferrer\"><code>take()</code></a>允许你从文件中读取任意数量的字节。总的来说，这些应该允许你有效地读入任何你需要的数据。</p>\n<p>对于缓冲读取，使用<a href=\"https://doc.rust-lang.org/std/io/struct.BufReader.html\" rel=\"noopener noreferrer\"><code>BufReader</code></a>结构，这有助于减少读取时的系统调用数量。</p>\n<h2>我如何在 Rust 中进行异步输入/输出？</h2>\n<p>使用 <a href=\"https://github.com/tokio-rs/tokio\" rel=\"noopener noreferrer\">tokio</a>。</p>\n<h2>我如何在 Rust 中获得命令行参数?</h2>\n<p>最简单的方法是使用<a href=\"https://doc.rust-lang.org/std/env/struct.Args.html\" rel=\"noopener noreferrer\"><code>Args</code></a>，它提供了一个输入参数的迭代器。</p>\n<p>如果你正在寻找更强大的库，在 crates.io 上有<a href=\"https://crates.io/keywords/argument\" rel=\"noopener noreferrer\">一些选项</a>。</p>\n<h1>错误处理</h1>\n<h2>为什么 Rust 没有异常？</h2>\n<p>异常使控制流的理解复杂化，它们在类型系统之外表达有效性/无效性，而且它们与多线程代码（Rust 的主要焦点）的互操作性很差。</p>\n<p>Rust 更倾向于采用基于类型的错误处理方法，这在书中有<a href=\"https://doc.rust-lang.org/book/ch09-00-error-handling.html\" rel=\"noopener noreferrer\">详细介绍</a>。这与 Rust 的控制流、并发性和其他一切都更加吻合。</p>\n<h2>到处都有`unwrap()'是怎么回事?</h2>\n<p><code>unwrap()</code>是一个提取<a href=\"https://doc.rust-lang.org/std/option/enum.Option.html\" rel=\"noopener noreferrer\"><code>Option</code></a>或<a href=\"https://doc.rust-lang.org/std/result/enum.Result.html\" rel=\"noopener noreferrer\"><code>Result</code></a>里面的值的函数，如果没有值就会 panic。</p>\n<p><code>unwrap()</code>不应该是你处理预期出现的错误的默认方式，例如用户输入不正确。在生产代码中，它应该被视为一个断言，即该值是非空的，如果违反，将使程序崩溃。</p>\n<p>它对快速原型也很有用，在那里你还不想处理错误，或者在博客文章中，错误处理会分散对重点的注意力。</p>\n<h2>当我试图运行使用<code>try!</code>宏的示例代码时，为什么我得到一个错误?</h2>\n<p>这可能是函数的返回类型的问题。<a href=\"https://doc.rust-lang.org/std/macro.try!.html\" rel=\"noopener noreferrer\"><code>try!</code></a>宏要么从<a href=\"https://doc.rust-lang.org/std/result/enum.Result.html\" rel=\"noopener noreferrer\"><code>Result</code></a>中提取数值，要么提前返回，错误是<a href=\"https://doc.rust-lang.org/std/result/enum.Result.html\" rel=\"noopener noreferrer\"><code>Result</code></a>携带的。这意味着<a href=\"https://doc.rust-lang.org/std/macro.try!.html\" rel=\"noopener noreferrer\"><code>try</code></a>只对返回<a href=\"https://doc.rust-lang.org/std/result/enum.Result.html\" rel=\"noopener noreferrer\"><code>Result</code></a>本身的函数有效，其中<code>Err</code>构造的类型实现了<code>From::from(err)</code>。特别是，这意味着<a href=\"https://doc.rust-lang.org/std/macro.try!.html\" rel=\"noopener noreferrer\"><code>try!</code></a>宏不能在<code>main</code>函数中工作。</p>\n<h2>有没有比到处都是“Result”更简单的方法来做错误处理？</h2>\n<p>如果你正在寻找一种方法来避免在其他人的代码中处理<a href=\"https://doc.rust-lang.org/std/result/enum.Result.html\" rel=\"noopener noreferrer\"><code>Result</code></a>，总是有<a href=\"https://doc.rust-lang.org/core/option/enum.Option.html#method.unwrap\" rel=\"noopener noreferrer\"><code>unwrap()</code></a>，但这可能不是你想要的。<a href=\"https://doc.rust-lang.org/std/result/enum.Result.html\" rel=\"noopener noreferrer\"><code>Result</code></a>是一个指标，表明某些计算可能会或可能不会成功完成。要求你明确地处理这些失败是 Rust 鼓励健壮性的方式之一。Rust 提供了像<a href=\"https://doc.rust-lang.org/std/macro.try!.html\" rel=\"noopener noreferrer\"><code>try!</code>宏</a>这样的工具，使处理失败的过程符合人体工程学。</p>\n<p>如果你真的不想处理错误，可以使用<a href=\"https://doc.rust-lang.org/core/option/enum.Option.html#method.unwrap\" rel=\"noopener noreferrer\"><code>unwrap()</code></a>，但要知道，这样做意味着代码在失败时 panic，这通常会导致关闭进程。</p>\n<h1>并发</h1>\n<h2>我可以在没有“不安全”块的情况下跨线程使用静态值吗？</h2>\n<p>如果是同步的，修改是安全的。修改一个静态的<a href=\"https://doc.rust-lang.org/std/sync/struct.Mutex.html\" rel=\"noopener noreferrer\"><code>Mutex</code></a>（通过<a href=\"https://crates.io/crates/lazy_static/\" rel=\"noopener noreferrer\">lazy-static</a> crate 懒惰地初始化）不需要一个<code>unsafe</code>块，修改一个静态的<a href=\"https://doc.rust-lang.org/std/sync/atomic/struct.AtomicUsize.html\" rel=\"noopener noreferrer\"><code>AtomicUsize</code></a>（可以不用 lazy_static 初始化）也是如此。</p>\n<p>更一般地说，如果一个类型实现了<a href=\"https://doc.rust-lang.org/std/marker/trait.Sync.html\" rel=\"noopener noreferrer\"><code>Sync</code></a>，并且没有实现<a href=\"https://doc.rust-lang.org/std/ops/trait.Drop.html\" rel=\"noopener noreferrer\"><code>Drop</code></a>，它<a href=\"https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html#accessing-or-modifying-a-mutable-static-variable\" rel=\"noopener noreferrer\">可以在<code>static</code>中使用</a>。</p>\n<h1>宏</h1>\n<h2>我可以写一个宏来生成标识符吗?</h2>\n<p>目前不能。Rust 的宏是<a href=\"https://en.wikipedia.org/wiki/Hygienic_macro\" rel=\"noopener noreferrer\">\"卫生宏\"</a>，它有意避免捕捉或创建可能与其他标识符发生意外碰撞的标识符。它们的功能与通常与 C 预处理器相关的宏的风格明显不同。宏调用只能出现在被明确支持的地方：项目、方法声明、语句、表达式和模式。这里，“方法声明”指的是可以放置方法的空白处。它们不能被用来完成部分方法声明。按照同样的逻辑，它们也不能用来完成一个部分变量声明。</p>\n<h1>Debugging and Tooling</h1>\n<h2>我如何调试 Rust 程序？</h2>\n<p>Rust 程序可以使用 <a href=\"https://sourceware.org/gdb/current/onlinedocs/gdb/\" rel=\"noopener noreferrer\">gdb</a> 或 <a href=\"http://lldb.llvm.org/tutorial.html\" rel=\"noopener noreferrer\">lldb</a> 进行调试，与 C 和 C++ 相同。事实上，每一个 Rust 的安装都带有 rust-gdb 和 rust-lldb 中的一个或两个（取决于平台支持）。这些是对 gdb 和 lldb 的封装，并启用了 Rust pretty-printing。</p>\n<h2><code>rustc</code>说标准库代码中发生了 panic。我如何定位我的代码中的错误？</h2>\n<p>这个错误通常是由客户端代码中<a href=\"https://doc.rust-lang.org/core/option/enum.Option.html#method.unwrap\" rel=\"noopener noreferrer\"><code>unwrap()</code>ing</a>一个<code>None</code>或<code>Err</code>引起的。通过设置环境变量<code>RUST_BACKTRACE=1</code>来启用回溯，有助于获得更多信息。在调试模式下编译（默认为“cargo build”）也有帮助。使用调试器，如提供的<code>rust-gdb</code>或<code>rust-lldb</code>也很有帮助。</p>\n<h2>我应该使用什么 IDE？</h2>\n<p>Rust 的开发环境有很多选择，所有这些都在非官方的 <a href=\"https://areweideyet.com/\" rel=\"noopener noreferrer\">IDE 支持页面</a>上有详细说明。</p>\n<h1>Low-Level</h1>\n<h2>我怎样才能<code>memcpy</code>字节?</h2>\n<p>如果你想安全地克隆一个现有的分片，你可以使用<a href=\"https://doc.rust-lang.org/std/primitive.slice.html#method.clone_from_slice\" rel=\"noopener noreferrer\"><code>clone_from_slice</code></a>。</p>\n<p>要复制可能重叠的字节，使用<a href=\"https://doc.rust-lang.org/std/marker/trait.Copy.html\" rel=\"noopener noreferrer\"><code>copy</code></a>。要复制不重叠的字节，使用<a href=\"https://doc.rust-lang.org/std/ptr/fn.copy_nonoverlapping.html\" rel=\"noopener noreferrer\"><code>copy_nonoverlapping</code></a>。这两个函数都是“不安全”的，因为它们都可以被用来破坏语言的安全保证。在使用它们时要注意。</p>\n<h2>没有标准库，Rust 能合理地运行吗？</h2>\n<p>当然可以。Rust 程序可以使用<code>#![no_std]</code>属性设置为不加载标准库。设置了这个属性后，你可以继续使用 Rust 核心库，它只是平台无关的原语。因此，它不包括 IO、并发性、堆分配等。</p>\n<h2>我可以用 Rust 写一个操作系统吗？</h2>\n<p>是的！事实上，有<a href=\"http://wiki.osdev.org/Rust\" rel=\"noopener noreferrer\">几个正在进行的项目就是这样</a>。</p>\n<h2>我如何在文件或其他字节流中以大数或小数格式读写数字类型如<code>i32</code>或<code>f64</code>?</h2>\n<p>你应该看看 <a href=\"https://docs.rs/byteorder\" rel=\"noopener noreferrer\">byteorder crate</a>，它提供了相应的实用程序。</p>\n<h2>Rust 是否保证一个特定的数据布局？</h2>\n<p>默认情况下不是。在一般情况下，<code>enum</code>和<code>struct</code>的布局是未定义的。这允许编译器进行潜在的优化，比如为判别式重新使用填充物，压缩嵌套的<code>enum</code>的变体，重新排序字段以移除填充物，等等。不携带数据的<code>enum</code>（“C-like”）有资格拥有一个定义的表示。这种<code>枚举</code>很容易区分，因为它们只是一个没有数据的名字列表。</p>\n<pre><code>snum CLike {\n    A,\n    B = 32,\n    C = 34,\n    D\n}\n</code></pre>\n<p><code>＃[repr(C)]</code>属性可以应用于这些“enum”，使它们在同等的 C 代码中具有相同的表示。这允许在 FFI 代码中使用 Rust 的“enum”，而在大多数情况下也使用 C 的“enum”。该属性也可以应用于<code>struct</code>，以获得与<code>C struct</code>相同的布局。</p>\n<h1>跨平台</h1>\n<h2>在 Rust 中表达特定平台行为的习惯性方法是什么？</h2>\n<p>平台特定行为可以用<a href=\"https://doc.rust-lang.org/reference/attributes.html#conditional-compilation\" rel=\"noopener noreferrer\">条件编译属性</a>来表达，如<code>target_os</code>, <code>target_family</code>, <code>target_endian</code>，等等。</p>\n<h2>Rust 可以用于 Android/iOS 编程吗？</h2>\n<p>是的，它可以! 在 <a href=\"https://github.com/tomaka/android-rs-glue\" rel=\"noopener noreferrer\">Android</a>和 <a href=\"https://www.bignerdranch.com/blog/building-an-ios-app-in-rust-part-1/\" rel=\"noopener noreferrer\">iOS</a> 中都已经有使用 Rust 的例子。它确实需要一些工作来设置，但 Rust 在这两个平台上的功能都很好。</p>\n<h2>我可以在网络浏览器中运行我的 Rust 程序吗？</h2>\n<p>有可能。Rust 对<a href=\"http://asmjs.org/\" rel=\"noopener noreferrer\">asm.js</a>和<a href=\"http://webassembly.org/\" rel=\"noopener noreferrer\">WebAssembly</a>都有<a href=\"https://davidmcneil.gitbooks.io/the-rusty-web/\" rel=\"noopener noreferrer\">实验性支持</a>。</p>\n<h2>我如何在 Rust 中进行交叉编译？</h2>\n<p>在 Rust 中可以进行交叉编译，但需要<a href=\"https://github.com/japaric/rust-cross/blob/master/README.md\" rel=\"noopener noreferrer\">一点工作</a>来设置。每个 Rust 编译器都是一个交叉编译器，但是库需要针对目标平台进行交叉编译。</p>\n<p>Rust 确实为每个支持的平台分发了标准库的副本，这些副本包含在分发页面上找到的每个构建目录的<code>rust-std-*</code>文件中，但目前还没有自动安装的方法。</p>\n<h1>mod 和 crate</h1>\n<h2>mod 和 crate 之间的关系是什么？</h2>\n<ul>\n<li>crate 是一个编译单元，它是 Rust 编译器可以操作的最小的代码量。</li>\n<li>mod 是 crate 内的一个（可能是嵌套的）代码组织单元。</li>\n<li>一个 crate 包含一个隐含的、未命名的顶层 mod。</li>\n<li>递归定义可以跨越 mod，但不能跨越 crate。</li>\n</ul>\n<h2>为什么 Rust 编译器找不到我正在<code>使用</code>的这个库?</h2>\n<p>有很多可能的答案，但一个常见的错误是没有意识到<code>use</code>声明是相对于 crate root 的。试着改写你的声明，使用它们在你的项目根文件中定义的路径，看看是否能解决这个问题。</p>\n<p>还有“self”和“super”，它们分别将“use”路径区分为相对于当前 mod 或父 mod。</p>\n<p>关于<code>use</code>库的完整信息，请阅读 Rust 书中的<a href=\"https://doc.rust-lang.org/book/ch07-00-managing-growing-projects-with-packages-crates-and-modules.html\" rel=\"noopener noreferrer\">\"Packages, Crates, and Modules\"</a>一章。</p>\n<h2>为什么我必须在 crate 的顶层用<code>mod</code>声明 mod 文件，而不是直接<code>use</code>它们？</h2>\n<p>在 Rust 中，有两种方法来声明模块，内联或在另一个文件中。下面是各自的一个例子。</p>\n<pre><code>// In main.rs\nmod hello {\n    pub fn f() {\n        println!(\"hello!\");\n    }\n}\n\nfn main() {\n    hello::f();\n}\n</code></pre>\n<pre><code>// In main.rs\nmod hello;\n\nfn main() {\n    hello::f();\n}\n\n// In hello.rs\npub fn f() {\n    println!(\"hello!\");\n}\n</code></pre>\n<p>在第一个例子中，模块被定义在它所使用的同一文件中。在第二个例子中，主文件中的模块声明告诉编译器寻找<code>hello.rs</code>或<code>hello/mod.rs</code>，并加载该文件。</p>\n<p>注意<code>mod</code>和<code>use</code>之间的区别：<code>mod</code>声明一个模块的存在，而<code>use</code>引用一个在其他地方声明的模块，将其内容纳入当前模块的范围。</p>\n<h2>我如何配置 Cargo 使用代理？</h2>\n<p>参考 <a href=\"https://rsproxy.cn/\" rel=\"noopener noreferrer\">https://rsproxy.cn/</a>。</p>\n<h2>为什么我已经“use”了 crate，但编译器还是找不到方法的实现？</h2>\n<p>对于定义在 trait 上的方法，你必须明确导入 trait 声明。这意味着仅仅导入一个结构实现 trait 的模块是不够的，你还必须导入 trait 本身。</p>\n<h2>为什么编译器不能为我推断出<code>use</code>声明？</h2>\n<p>它可能可以，但你也不希望它这样做。虽然在很多情况下，编译器有可能通过简单地寻找给定标识符的定义位置来确定导入的正确模块，但在一般情况下可能不是这样的。<code>rustc</code>中任何用于选择竞争性选项的决策规则，在某些情况下可能会引起惊讶和混乱，Rust 更倾向于明确说明名称的来源。</p>\n<p>例如，编译器可以说，在标识符定义相互竞争的情况下，会选择最早导入的模块的定义。所以如果模块<code>foo</code>和模块<code>bar</code>都定义了标识符<code>baz</code>，但是<code>foo</code>是第一个注册的模块，编译器会插入<code>use foo::baz;</code>。</p>\n<pre><code>mod foo;\nmod bar;\n\n// use foo::baz  // to be inserted by the compiler.\n\nfn main() {\n  baz();\n}\n</code></pre>\n<p>如果你知道这种情况会发生，也许它可以节省少量的按键，但它也大大增加了当你真正想把<code>baz()</code>变成<code>bar::baz()</code>时出现令人惊讶的错误信息的可能性，而且它通过使函数调用的意义依赖于模块声明而降低了代码的可读性。这些都是我们不愿意做的折衷。</p>\n<p>然而，IDE 可以帮助管理声明，这将给你带来两方面的好处：机器协助拉入名字，但明确声明这些名字的来源。</p>\n<h2>我如何进行动态 Rust 库加载？</h2>\n<p>用<a href=\"https://crates.io/crates/libloading\" rel=\"noopener noreferrer\"> libloading </a>导入 Rust 中的动态库，它提供了一个跨平台的动态链接系统。</p>\n<h2>为什么 crates.io 没有命名空间？</h2>\n<p>引用 crates.io 设计的<a href=\"https://internals.rust-lang.org/t/crates-io-package-policies/1041\" rel=\"noopener noreferrer\">官方解释</a>：</p>\n<blockquote>\n<p>在使用 crates.io 的第一个月里，很多人问我们是否有可能引入<a href=\"https://github.com/rust-lang/crates.io/issues/58\" rel=\"noopener noreferrer\">命名空间</a>。</p>\n<p>虽然 namespace 允许多个作者使用单一的、通用的名称，但它们增加了包在 Rust 代码中的引用和人类对包的交流的复杂性。乍一看，它们允许多个作者使用“http”这样的名字，但这仅仅意味着人们需要将这些包称为“wycats'http”或“reem'http”，与“wycats-http”或“reem-http”这样的包名相比没有什么好处。</p>\n<p>当我们研究没有命名空间的软件包生态系统时，我们发现人们倾向于使用更有创意的名字（如<code>nokogiri</code>而不是<code>tenderlove's libxml2</code>）。这些有创意的名字往往简短易记，部分原因是缺乏任何层次结构。它们使人们更容易简洁明了地交流软件包。他们创造了令人兴奋的品牌。我们已经看到了一些 10,000+ 软件包生态系统的成功，如 NPM 和 RubyGems，它们的社区在一个单一的命名空间内蓬勃发展。</p>\n<p>简而言之，我们认为如果 Piston 选择<code>bvssvni/game-engine</code>这样的名字（允许其他用户选择<code>wycats/game-engine</code>）而不是简单的<code>piston</code>，那么 Cargo 的生态系统就不会好转。</p>\n<p>因为命名空间在很多方面严格来说都比较复杂，而且如果将来有必要的话，还可以兼容添加，所以我们要坚持使用单一的共享命名空间。</p>\n</blockquote>\n<h1>库</h1>\n<h2>我怎样才能发出 HTTP 请求?</h2>\n<p>标准库不包括 HTTP 的实现，所以你要使用一个外部的 crate。\n<a href=\"http://docs.rs/reqwest\" rel=\"noopener noreferrer\">reqwest</a> 是最简单的。它建立在<a href=\"https://github.com/hyperium/hyper\" rel=\"noopener noreferrer\">hyper</a>上，用 Rust 编写，但也有<a href=\"https://crates.io/keywords/http\" rel=\"noopener noreferrer\">一些其他的</a>。<a href=\"https://docs.rs/curl\" rel=\"noopener noreferrer\">curl</a> crate 被广泛使用，它提供了与 curl 库的绑定。</p>\n<h2>我如何用 Rust 编写 GUI 应用程序？</h2>\n<p>有多种方法可以在 Rust 中编写 GUI 应用程序。只要看看<a href=\"https://github.com/kud1ing/awesome-rust#gui\" rel=\"noopener noreferrer\">这个 GUI 框架的列表</a>。</p>\n<h2>我怎样才能解析 JSON/XML?</h2>\n<p><a href=\"https://serde.rs\" rel=\"noopener noreferrer\">Serde</a>是推荐的 Rust 数据序列化和反序列化的库，可以从许多不同的格式中获取。</p>\n<h2>是否有一个标准的 2D+ 矢量和形状 crate?</h2>\n<p>还没有! 想写一个吗？</p>\n<h2>我如何在 Rust 中编写一个 OpenGL 应用程序?</h2>\n<p><a href=\"https://github.com/tomaka/glium\" rel=\"noopener noreferrer\">Glium</a> 是 Rust 中 OpenGL 编程的主要库。<a href=\"https://github.com/bjz/glfw-rs\" rel=\"noopener noreferrer\">GLFW</a> 也是一个可靠的选择。</p>\n<h2>我可以用 Rust 写一个视频游戏吗？</h2>\n<p>是的，你可以。Rust 的主要游戏编程库是<a href=\"http://www.piston.rs/\" rel=\"noopener noreferrer\">Piston</a>，而且还有一个<a href=\"https://www.reddit.com/r/rust_gamedev/\" rel=\"noopener noreferrer\"> Rust 游戏编程的 subreddit </a>和一个 IRC 频道（<code>#rust-gamedev</code> on <a href=\"https://wiki.mozilla.org/IRC\" rel=\"noopener noreferrer\">Mozilla IRC</a>）。</p>\n<h1>设计模式</h1>\n<h2>Rust是面向对象的吗？</h2>\n<p>它是多范式的。很多在 OO 语言中可以做的事情在 Rust 中也可以做，但不是所有的事情，也不总是使用你所习惯的那种抽象方式。</p>\n<h2>我如何将面向对象的概念映射到 Rust 中？</h2>\n<p>这取决于。有一些方法可以将面向对象的概念，如<a href=\"https://www.reddit.com/r/rust/comments/2sryuw/ideaquestion_about_multiple_inheritence/\" rel=\"noopener noreferrer\">多重继承</a>翻译成 Rust，但由于 Rust 不是面向对象的，所以翻译的结果可能与它在 OO 语言中的外观有很大不同。</p>\n<h2>我如何处理带有可选参数的结构的配置？</h2>\n<p>最简单的方法是在你用来构建结构实例的任何函数中使用<a href=\"https://doc.rust-lang.org/std/option/enum.Option.html\" rel=\"noopener noreferrer\"><code>Option</code></a>类型（通常是<code>new()</code>）。另一种方法是使用构建器模式，在构建所构建的类型之前，只必须调用某些实例化成员变量的函数。</p>\n<h2>我如何在 Rust 中做全局变量?</h2>\n<p>Rust 中的全局变量可以使用<code>const</code>声明来实现编译时计算的全局常量，而<code>static</code>可以用来实现可变的全局变量。请注意，修改<code>static mut</code>变量需要使用<code>unsafe</code>，因为它允许数据竞争，而在安全的 Rust 中保证不会发生这种情况。<code>const</code>和<code>static</code>值之间的一个重要区别是，你可以对<code>static</code>值进行引用，但不能对<code>const</code>值进行引用，后者没有指定的内存位置。关于<code>const</code>与<code>static</code>的更多信息，请阅读<a href=\"https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html#accessing-or-modifying-a-mutable-static-variable\" rel=\"noopener noreferrer\"> Rust 书</a>。</p>\n<h2>我如何设置程序化定义的编译时常量？</h2>\n<p>Rust 目前对编译时常量的支持有限。你可以使用“const”声明来定义基元（类似于“static”，但是是不可变的，在内存中没有指定的位置），也可以定义“const”函数和固有方法。</p>\n<p>要定义不能通过这些机制定义的程序性常量，可以使用<a href=\"https://crates.io/crates/lazy_static\" rel=\"noopener noreferrer\"><code>lazy-static</code></a> crate，它通过在第一次使用时自动计算常量来模拟编译时计算。</p>\n<h2>我可以运行发生在 main 之前的初始化代码吗？</h2>\n<p>Rust 没有“在<code>main</code>之前的生命”的概念。最接近的是通过<a href=\"https://crates.io/crates/lazy_static\" rel=\"noopener noreferrer\"><code>lazy-static</code></a> crate 来完成，它通过在静态变量第一次使用时懒散地初始化静态变量来模拟“main之前”。</p>\n<h2>Rust 允许 globals 使用非结构表达式的值吗？</h2>\n<p>不允许。全局变量不能有一个非结构表达式的构造函数，也不能有一个析构函数。静态构造函数是不可取的，因为确保静态初始化顺序的可移植性是很困难的。main 之前的生命通常被认为是一个错误的功能，所以 Rust 不允许它。</p>\n<p>参见 <a href=\"http://yosefk.com/c++fqa/ctors.html#fqa-10.12\" rel=\"noopener noreferrer\">C++ FQA </a>中关于“静态初始化顺序惨败”的内容，以及<a href=\"https://ericlippert.com/2013/02/06/static-constructors-part-one/\" rel=\"noopener noreferrer\"> Eric Lippert 的博客</a>中关于 C# 的挑战，它也有这种特性。</p>\n<p>你可以用<a href=\"https://crates.io/crates/lazy_static/\" rel=\"noopener noreferrer\"> lazy-static </a>工具箱来近似非内容表达式的 globals。</p>\n<h1>其他语言</h1>\n<h2>我怎样才能在 Rust 中实现类似 C 语言的<code>struct X { static int X; };</code>的东西呢？</h2>\n<p>Rust 没有上面代码片断中所示的<code>静态</code>字段。相反，你可以在一个给定的模块中声明一个<code>静态</code>变量，这个变量对该模块是私有的。</p>\n<h2>我如何将 C 风格的枚举转换为整数，反之亦然？</h2>\n<p>将 C 风格的枚举转换为整数可以用<code>as</code>表达式来完成，比如<code>e as i64</code>(其中<code>e</code>是某个枚举)。</p>\n<p>另一个方向的转换可以用<code>match</code>语句来完成, 它将不同的数字值映射到枚举的不同潜在值上.</p>\n<h2>为什么 Rust 程序的二进制大小比 C 程序大?</h2>\n<p>有几个因素导致 Rust 程序默认比功能相当的 C 程序有较大的二进制大小。一般来说，Rust 更倾向于对现实世界的程序性能进行优化，而不是对小程序的大小进行优化。</p>\n<h3>单态化</h3>\n<p>Rust 对泛型进行了单态化处理，这意味着在程序中每使用一个具体类型，就会生成一个新的泛型函数或类型。这类似于 C++ 中模板的工作方式。例如，在下面的程序中：</p>\n<pre><code>fn foo&lt;T&gt;(t: T) {\n    // ... do something\n}\n\nfn main() {\n    foo(10);       // i32\n    foo(\"hello\");  // &amp;str\n}\n</code></pre>\n<p>两个不同版本的<code>foo</code>将出现在最终的二进制文件中，一个专门用于<code>i32</code>输入，一个专门用于<code>&amp;str</code>输入。这使得通用函数的静态调度更加有效，但代价是一个更大的二进制文件。</p>\n<h3>调试符号</h3>\n<p>Rust 程序在编译时保留了一些调试符号，即使是在 release 模式下编译。这些符号用于提供 panic 时的 backtrace，可以用<code>strip</code>或其他调试符号移除工具移除。值得注意的是，用 Cargo 在 release 模式下编译，相当于用 rustc 设置优化级别 3。另一个优化级别（称为<code>s</code>或<code>z</code>）<a href=\"https://github.com/rust-lang/rust/pull/32386\" rel=\"noopener noreferrer\">已被添加</a>，它告诉编译器为大小而不是性能进行优化。</p>\n<h3>链接时优化</h3>\n<p>Rust 默认不做链接时优化，但可以被指示这样做。这增加了 Rust 编译器可能做的优化量，并对二进制的大小有小的影响。与之前提到的尺寸优化模式相结合，这种影响可能更大。</p>\n<h3>标准库</h3>\n<p>Rust 标准库包括 libbacktrace 和 libunwind，这在某些程序中可能是不可取的。因此，使用<code>#![no_std]</code>可以带来更小的二进制文件，但通常也会对你正在编写的那种 Rust 代码造成实质性的改变。请注意，在没有标准库的情况下使用 Rust，通常在功能上更接近于同等的 C 代码。</p>\n<p>举个例子，下面的 C 程序读入一个名字，并对有这个名字的人说“你好”。</p>\n<pre><code>#include &lt;stdio.h&gt;\n\nint main(void) {\n    printf(\"What's your name?\\n\");\n    char input[100] = {0};\n    scanf(\"%s\", input);\n    printf(\"Hello %s!\\n\", input);\n    return 0;\n}\n</code></pre>\n<p>用Rust重写这个，你可能会得到如下的东西。</p>\n<pre><code>use std::io;\n\nfn main() {\n    println!(\"What's your name?\");\n    let mut input = String::new();\n    io::stdin().read_line(&amp;mut input).unwrap();\n    println!(\"Hello {}!\", input);\n}\n</code></pre>\n<p>这个程序在编译后与 C 程序相比，会有更大的二进制，使用更多的内存。但是这个程序并不完全等同于上面的 C 代码。等价的 Rust 代码反而会是这样的。</p>\n<pre><code>#![feature(lang_items)]\n#![feature(libc)]\n#![feature(no_std)]\n#![feature(start)]\n#![no_std]\n\nextern crate libc;\n\nextern \"C\" {\n    fn printf(fmt: *const u8, ...) -&gt; i32;\n    fn scanf(fmt: *const u8, ...) -&gt; i32;\n}\n\n#[start]\nfn start(_argc: isize, _argv: *const *const u8) -&gt; isize {\n    unsafe {\n        printf(b\"What's your name?\\n\\0\".as_ptr());\n        let mut input = [0u8; 100];\n        scanf(b\"%s\\0\".as_ptr(), &amp;mut input);\n        printf(b\"Hello %s!\\n\\0\".as_ptr(), &amp;input);\n        0\n    }\n}\n\n#[lang=\"eh_personality\"] extern fn eh_personality() {}\n#[lang=\"panic_fmt\"] fn panic_fmt() -&gt; ! { loop {} }\n#[lang=\"stack_exhausted\"] extern fn stack_exhausted() {}\n</code></pre>\n<p>这确实应该在内存使用方面与 C 语言大致相同，但代价是更多的程序员复杂性，以及缺乏通常由 Rust 提供的静态保证（在这里通过使用<code>unsafe</code>来避免）。</p>\n<h2>为什么 Rust 不像 C 那样有一个稳定的 ABI，为什么我必须用 extern 来注解东西？</h2>\n<p>对 ABI 的承诺是一个重大的决定，会限制未来潜在的有利的语言变化。鉴于 Rust 在 2015 年 5 月才达到 1.0，现在做出像稳定 ABI 这样大的承诺还为时过早。但这并不意味着未来不会发生。(尽管 C++ 已经成功地运行了很多年而没有指定一个稳定的 ABI)。</p>\n<p><code>extern</code>关键字允许 Rust 使用特定的 ABI，例如定义明确的 C ABI，以便与其他语言互操作。</p>\n<h2>Rust 代码可以调用 C 代码吗？</h2>\n<p>可以。从 Rust 中调用 C 代码的设计与从 C++ 中调用 C 代码一样高效。</p>\n<h2>C 代码可以调用 Rust 代码吗?</h2>\n<p>是的，Rust 代码必须通过“extern”声明公开，这使得它与 C-ABI 兼容。这样的函数可以作为一个函数指针传递给 C 代码，或者，如果赋予<code>#[no_mangle]</code>属性以禁用符号纠缠，可以直接从 C 代码中调用。</p>\n<h2>我已经写了完美的 C++ 代码。Rust 能给我什么？</h2>\n<p>现代 C++ 包含了许多使编写安全和正确的代码不容易出错的特性，但它并不完美，而且仍然很容易引入不安全因素。这是 C++ 的核心开发人员正在努力克服的问题，但是 C++ 受限于悠久的历史，它比他们现在试图实现的很多想法都要早。</p>\n<p>Rust 从第一天起就被设计成一种安全的系统编程语言，这意味着它不会受到历史上的设计决定的限制，而这些决定使 C++ 的安全问题变得如此复杂。在 C++ 中，安全是通过谨慎的个人纪律实现的，而且很容易出错。在 Rust 中，安全是默认的。它让你有能力在一个包括不如你完美的人在内的团队中工作，而不必花时间反复检查他们的代码是否存在安全漏洞。</p>\n<h2>我如何在 Rust 中实现相当于 C++ 模板的专业化？</h2>\n<p>Rust 目前还没有与模板专业化完全对等的东西，但它<a href=\"https://github.com/rust-lang/rust/issues/31844\" rel=\"noopener noreferrer\">正在研究中</a>，希望能很快加入。然而，类似的效果可以通过<a href=\"https://doc.rust-lang.org/book/ch19-03-advanced-traits.html\" rel=\"noopener noreferrer\">关联类型</a>实现。</p>\n<h2>Rust 的所有权系统与 C++ 的移动语义有什么关系？</h2>\n<p>底层的概念是相似的，但这两个系统在实践中的工作方式是非常不同的。在这两个系统中，“move”一个值都是一种为了转移其底层资源的所有权的方式。例如，移动一个字符串会转移字符串的缓冲区，而不是复制它。</p>\n<p>在 Rust 中，所有权转移是默认行为。例如，如果我编写了一个以“String”为参数的函数，这个函数将对其调用者提供的<code>String</code>值拥有所有权。</p>\n<pre><code>fn process(s: String) { }\n\nfn caller() {\n    let s = String::from(\"Hello, world!\");\n    process(s); // Transfers ownership of `s` to `process`\n    process(s); // Error! ownership already transferred.\n}\n</code></pre>\n<p>正如你在上面的片段中看到的，在函数<code>caller</code>中，对<code>process</code>的第一次调用转移了变量<code>s</code>的所有权。编译器会跟踪所有权，所以第二次调用<code>process</code>会导致一个错误，因为将同一个值的所有权转让两次是非法的。如果一个值有一个未完成的引用，Rust 也会阻止你移动这个值。</p>\n<p>C++ 采取了一种不同的方法。在 C++ 中，默认的做法是复制一个值（更确切地说，是调用复制构造函数）。然而，被调用者可以使用一个“rvalue reference”来声明他们的参数，例如<code>string&amp;&amp;</code>，以表明他们将获得该参数所拥有的一些资源的所有权（在这个例子中，字符串的内部缓冲区）。然后调用者必须传递一个临时表达式或使用<code>std::move</code>进行明确的移动。大致相当于上面的函数<code>process</code>的粗略等价物是：</p>\n<pre><code>void process(string&amp;&amp; s) { }\n\nvoid caller() {\n    string s(\"Hello, world!\");\n    process(std::move(s));\n    process(std::move(s));\n}\n</code></pre>\n<p>C++ 编译器没有义务去跟踪移动。例如，上面的代码在编译时没有任何警告或错误，至少在使用默认的设置的情况下，上述代码在编译时没有任何警告或错误。此外，在C++中，字符串<code>s</code>本身的所有权（如果不是它的内部缓冲区的话）仍然属于<code>caller</code>，所以<code>s</code>的析构函数会在<code>caller</code>返回时运行，即使它已经被移动了（相反，在 Rust 中，被移动的值只被其新主人丢弃）。</p>\n<h2>我怎样才能从 Rust 与 C++ 互操作，或者从 C++ 与 Rust 互操作？</h2>\n<p>Rust 和 C++ 可以通过 C 语言进行互操作。Rust 和 C++ 都为 C 语言提供了一个<a href=\"https://doc.rust-lang.org/book/ch19-01-unsafe-rust.html#using-extern-functions-to-call-external-code\" rel=\"noopener noreferrer\">外来函数接口</a>，并可以用它来进行相互之间的通信。如果编写 C 语言绑定太过繁琐，你可以使用<a href=\"https://github.com/rust-lang/rust-bindgen\" rel=\"noopener noreferrer\">rust-bindgen</a>来帮助自动生成可行的 C 语言绑定。</p>\n<h2>Rust 有 C++ 风格的构造函数吗？</h2>\n<p>不，函数的作用与构造函数相同，不会增加语言的复杂性。在 Rust 中，相当于构造函数的通常名称是<code>new()</code>，尽管这只是一个惯例而不是语言规则。<code>new()</code>函数实际上就像其他函数一样。它的一个例子是这样的。</p>\n<pre><code>struct Foo {\n    a: i32,\n    b: f64,\n    c: bool,\n}\n\nimpl Foo {\n    fn new() -&gt; Foo {\n        Foo {\n            a: 0,\n            b: 0.0,\n            c: false,\n        }\n    }\n}\n</code></pre>\n<h2>Rust 有复制构造函数吗？</h2>\n<p>不完全是。实现了<code>Copy</code>的类型会做一个标准的类似于 C 语言的“浅拷贝”，不需要额外的工作（类似于 C++ 中的 trivially copyable 类型）。不可能实现需要自定义复制行为的<code>Copy</code>类型。相反，在 Rust 中，“复制构造器”是通过实现<code>Clone</code>特性，并明确调用<code>clone</code>方法来创建的。将用户定义的复制操作符显性化，使开发者更容易识别潜在的昂贵操作。</p>\n<h2>Rust 有移动构造函数吗？</h2>\n<p>没有。所有类型的值都是通过<code>memcpy</code>移动的。这使得编写通用的不安全代码变得更加简单，因为赋值、传递和返回都是已知的，不会产生像解绑（unwinding）那样的副作用。</p>\n<h2>Go 和 Rust 有什么相似之处，又有什么不同？</h2>\n<p>Rust 和 Go 的设计目标有很大不同。以下的差异并不是唯一的差异（这些差异太多，无法一一列举），但却是其中几个比较重要的差异：</p>\n<ul>\n<li>Rust 比 Go 层级更低。例如，Rust 不需要垃圾收集器，而 Go 需要。一般来说，Rust 提供的控制水平与 C 或 C++ 相当。</li>\n<li>Rust 的重点是确保安全和效率，同时提供高层次的能力，而 Go 的重点是成为一种小而简单的语言，可以快速编译并与各种工具很好地配合。</li>\n<li>Rust 对泛型有很强的支持，而 Go （目前）却没有。</li>\n<li>Rust 受到函数式编程世界的强烈影响，包括从 Haskell 的 typeclasses 中提取的类型系统。Go 有一个更简单的类型系统，使用接口进行基本的泛型编程。</li>\n</ul>\n<h2>Rust traits 与 Haskell typeclasses 相比如何？</h2>\n<p>Rust traits 类似于 Haskell 的 typeclasses，但目前还没有那么强大，因为 Rust 不能表达更高类型的类型。Rust 的关联类型等同于 Haskell 类型族。</p>\n<p>Haskell typeclasses 和 Rust traits 之间的一些具体区别包括：</p>\n<ul>\n<li>Rust traits 有一个隐含的第一个参数，叫做<code>Self</code>。Rust 中的<code>trait Bar</code>对应于 Haskell 中的<code>class Bar self</code>，而 Rust 中的<code>trait Bar&lt;Foo&gt;</code>对应于 Haskell 中的<code>class Bar foo self</code>。</li>\n<li>Rust 中的“Supertraits”或“superclass constraints”被写成<code>trait Sub: Super</code>，而 Haskell 中的为<code>class Super self =&gt; Sub self</code>。</li>\n<li>Rust 禁止无主实例，导致 Rust 中的一致性规则与 Haskell 不同。</li>\n<li>Rust 的<code>impl</code>解析在决定两个<code>impl</code>是否重叠或在潜在的<code>impl</code>之间进行选择时，会考虑相关的<code>where</code>条款和特质约束条件。Haskell 只考虑<code>instance</code>声明中的约束，不考虑其他地方提供的任何约束。</li>\n<li>Rust 的 traits 的一个子集（<a href=\"https://github.com/rust-lang/rfcs/blob/master/text/0255-object-safety.md\" rel=\"noopener noreferrer\">\"对象安全\"</a>的 traits）可以通过 trait 对象用于动态调度。同样的功能在 Haskell 中通过 GHC 的“ExistentialQuantification”可用。</li>\n</ul>\n<h1>Documentation</h1>\n<h2>为什么 Stack Overflow 上有这么多 Rust 的答案是错误的？</h2>\n<p>Rust 语言已经存在了很多年，在 2015 年 5 月才达到 1.0 版本。在这之前的时间里，语言发生了很大的变化，而 Stack Overflow 的一些答案是在语言的旧版本时给出的。</p>\n<p>随着时间的推移，越来越多的答案将提供给当前的版本，从而改善这个问题，因为过时的答案的比例减少了。</p>\n<h2>我在哪里报告 Rust 文档中的问题？</h2>\n<p>你可以在 Rust 编译器<a href=\"https://github.com/rust-lang/rust/issues\" rel=\"noopener noreferrer\">issue tracker</a>上报告 Rust 文档中的问题。请务必先阅读<a href=\"https://github.com/rust-lang/rust/blob/master/CONTRIBUTING.md#writing-documentation\" rel=\"noopener noreferrer\">贡献指南</a>。</p>\n<h2>我如何查看我的项目所依赖的库的 Rustdoc 文档？</h2>\n<p>当你使用<code>cargo doc</code>为你自己的项目生成文档时，它也会为活动的依赖版本生成文档。这些文档会被放到你的项目的<code>target/doc</code>目录下。使用<code>cargo doc --open</code>来打开这些文档，或者自己打开<code>target/doc/index.html</code>。</p>\n","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":"2021-09-01 11:17:12","source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":null},{"title":"【成都招聘】试试了解Fusotao吧","link":"https://rustcc.cn/article?id=dbb78e3b-5ccd-486f-9fbd-bd5d2f754d5a","description":"<p>前言<br>\n做这件事有段时间了，经历了一阵失去投资，团队狗带，现在仿佛又能看到黎明啦。</p>\n<p>我们是干什么的？<br>\n不提每日新增流行词汇，其实就是做一个可信的订单簿交易系统的，也可以说是去信任化的订单簿交易系统。与传统的中心化交易系统不同，同时也不是现在流行的swap dex形式，而是在链下完成撮合交易，再将交易结果证明并发送到链上。这样做的好处都有啥？对比swap，订单簿模型有定价权，而且对普通人而言更熟悉，手续费也低很多，因为有类似原生layer2的等价概念存在；对比中心化交易所而言，有相对高非常多的安全保障，因为代币再也不用转给随时可能跑路的交易所了。</p>\n<p>我们需要什么样的人？<br>\n目前国内已知大概有3个团队在做类似的事情。我们还没开始做任何宣传，知名度低得可怜，但在技术上我们已经几乎走完PoC的阶段了。一件事是否能成功，除了技术因素，还有许许多多场外因素，所以加入一个创业团队是比较有风险的事，在说任何技术要求之前，希望大家能结合自身实际情况理性客观地看待，尤其是抗风险能力较弱的同学（当然人生有时也需要一点冲动和激情）。\n再说说细节，我们当然在做区块链相关的东西，技术栈基于substrate/rust，如果不是特别熟也没有关系，因为这方面问题已经不大了，但是至少要求rust很熟悉了，因为我自己写rust就是个新手，常常会发现写得不够rusty的代码并且进行重构。有一部分遗留系统来自Old Java/Clojure，如果是写Java/Clojure出生的同学同时又转而写Rust就更欢迎了。我们在不少地方都对数据结构和相关的算法优化有一定要求，计算机科班毕业的同学可能在这方面会略有优势。如果您是精通密码学的奇人，同时也对我们做的事感兴趣，请给我个机会让来主动拜访您并诚邀加入！</p>\n<p>薪资谈判<br>\n如果是精通密码学的大佬：薪资面聊<br>\n否则：25k + 代币激励</p>\n<p>联系方式<br>\n<a href=\"https://github.com/uinb\" rel=\"noopener noreferrer\">github</a><br>\n邮箱 aGVsbG9AdWluYi50ZWNo</p>\n","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":"2021-09-01 06:28:34","source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":null},{"title":"远程办公，不限地域，缴纳社保公积金，周末双休，告别 996，拒绝 007，Nervina Labs 欢迎你！","link":"https://rustcc.cn/article?id=fa073c50-e087-46f4-bd58-3140e3999eb6","description":"<p>最近区块链世界里面发生了几件大事，一是 Elon Musk 宣布15亿美元购入 Bitcoin 作为公司储备资产；二是迈阿密市长提议使用比特币作为该市的税收和公务员工资支付手段；三是 Visa 开始接受 Bitcoin 在其支付网络上进行结算。这几件事情说明区块链叙事开始加速走向主流世界，也说明是时候认真考虑这个行业的职业机会了。毕竟美国的科技和政治精英并不是傻子，他们押注这个行业说明它“有点东西”。</p>\n<h2>1. 价值观</h2>\n<p>不得不承认，自中本聪在2009年初通过比特币创世块写下反传统金融体系的宣言开始，指引区块链前进的根本动力就一直是其价值观。如果你也认可以下的价值观，那说明你适合在这个行业生存。</p>\n<p><strong>Can't be evil.</strong></p>\n<p>谷歌的“Don't be evil”不作恶原则是远远不够的，因为是否作恶的决定权仍然在中心化权威手里。不作恶成为是一种施舍，而不是一种约束。而区块链世界则强调开源、自由 fork、去中心。代码一旦完成即自主运行。即使是中本聪也无法私自增发比特币，因为它从协议层就限制了作恶的可能性。</p>\n<p><strong>Permissionless.</strong></p>\n<p>无需许可是区块链世界的最高原则，任何人不需要第三方的授权就可以操作区块链。它保障了任何人都有相同的机会使用区块链上的信息、金融等服务，同时为不同服务之间的相互组合提供了可能性。对比来说，微信、支付宝互相封锁，Tw、Fb等社交平台随意禁言。他们不但违背了互联网的初衷，也扼杀了思想交流和技术创新。</p>\n<p><strong>Don't trust, verify.</strong></p>\n<p>你不应该相信任何人声明的事情、提供的服务、做出的承诺，你需要自己确认。正如这篇文章的所有观点你都不应该选择直接相信，你应该自己去考证。</p>\n<h2>2. 对古典互联网的革命性优势</h2>\n<p>互联网世界发展到现在遇到了哪些无法解决的问题？第一，大公司的数据霸权。南山必胜客刚刚打赢了“好友关系不属于个人隐私”的官司，用户在大公司面前形同裸奔。同时用户没有平台迁移的权利，我不爽，但是我还离不开，因为我的社交关系和历史都沉淀在这个平台上。第二，算法霸权。大公司利用算法优势对用户进行差别对待，精准杀熟。第三，平台割裂。平台越大，平台间的鸿沟越大。不同平台间的协作难度也越大。同一个小程序要在微信、支付宝各做一份，同一个用户要在不同的应用中分别注册。</p>\n<p>区块链世界采用了完全不同的用户-服务范式。所有的服务都是以用户为中心进行整合，这个范式也被称为“用户端集成”。这个范式一举打破了传统互联网产品的壁垒，数据、资产、关系都掌握在用户手中，服务商围绕着用户提供服务。想象一个这样的互联网世界：你的好友关系在各个软件平台中共享，你的数据由自己掌握，即使服务商跑路了，你的资产和数据也不会丢失。这样的一个新的互联网世界对古典互联网世界显然具有维度上的优势。</p>\n<h2>3. 那么问题是什么</h2>\n<p>区块链这么厉害，为什么到现在还只有炒币这一个场景呢。个人认为区块链和主流应用结合主要面临两方面的障碍。</p>\n<p>第一是用户门槛高、体验差。创建一个账户需要理解私钥、地址、交易、手续费等概念，创建过程涉及助记词、长密码、助记词校验等流程，对普通人绝对是劝退模式。做过互联网产品的都知道，一个不合理的按钮位置都会降低用户留存，而区块链的用户体验是灾难级别的。做个上链业务居然要平均半分钟才有成功失败的反馈。</p>\n<p>第二是收费模型极不友好。用户早已习惯互联网产品免费使用、付费升级或者广告收费的方式。而区块链应用则不然，做任何业务都必须用户付费，而且<strong>必须购买区块链代币才能付费</strong>。有这个障碍存在，大众用户绝对进不来，所以这两年区块链世界内卷越来越严重。</p>\n<h2>4. 怎么解决</h2>\n<p>终于可以介绍一下我们是谁，以及在做什么了。我们是原 <a href=\"https://www.nervos.org\" rel=\"noopener noreferrer\">Nervos</a> 应用开发工程师团队独立成立的区块链应用公司 <strong>Nervina Labs</strong>，Nervina 是个合成词，Nervos + China。我们的使命是在中国市场进行商业合作、技术服务和产品开发工作。关于 Nervos 公链多说无益，大家秉持区块链 Don't trust, verify 的精神可以自己翻一翻 <a href=\"https://github.com/nervosnetwork/\" rel=\"noopener noreferrer\">GitHub</a> 和媒体报道。这里重点说说我们的产品和业务内容。我们认为 Nervos 可以很好地解决前面提出的那两个问题，从而让区块链出圈，进入主流互联网世界。</p>\n<p>首先，比特币、以太坊等传统的区块链平台在账户层只支持硬编码的特定密码学算法，用户必须创建并自行管理账户的公私钥对，因此认知和使用门槛非常高。而 Nervos 采用了原生的账户抽象方案，支持任意的密码学算法，包括在互联网世界已经应用很久的 RSA、P256、和 SM2 等算法。大家熟悉的 https 协议、email 协议、iOS/Android 的生物识别模块、甚至护照身份证等都支持相应的密码学算法。所以我们可以把它们拿来在 Nervos 上创建和管理账户，这样用户操作区块链的体验和操作互联网应用基本没有区别。</p>\n<p>其次，收费模型方面尽管 Nervos 默认也是需要原生代币作为手续费，但 Nervos 允许服务商代付，并且在链上凭证转移的时候可以把小额手续费一起转移。从用户角度上看，大家完全不需要理解什么叫手续费，甚至不需要知道业务发生在区块链上。更大的好处是用户不需要购买区块链代币，规避了合规风险。</p>\n<p>我们的今年主推的产品是为互联网企业准备的“+区块链”方案，帮助对区块链有一定了解的头部互联网公司实现部分业务向区块链做迁移。我们将帮助互联网公司改造现有的会员卡、论坛勋章、电子票务、商品预售、粉丝经济等等生态，用区块链为更多的大众用户提供价值。</p>\n<h2>5. 收入</h2>\n<p>不谈收入只谈理想就是耍流氓。好在区块链是最不缺钱的行业，我们会提供和一线大厂相一致的薪资水平，包括五险一金等各方面国家规定的福利待遇一个不少。但对于很多人来说，单纯的线性工资是远远不够在一线城市安身立命的。大厂的股票期权，创业公司的干股才是大家上升到富裕阶层的砝码。在我厂工作可以有两个获得非线性收入的机会，我们分别谈谈。</p>\n<p>首先是期权。我厂会在内部推动项目单独融资进而独立发展，项目参与者会获得相应的期权。在区块链世界中，优秀项目从创立到股份/期权获得实际价值的周期要远远短于传统企业上市的周期。拼夕夕光速发展也走了3年才上市，在区块链世界中几乎只要开始对外运营其期权、股份就立刻有了二级市场，可以完成价值兑现。从项目融资到“上市”中间基本上就是一个开发周期。</p>\n<p>其次是行业信息优势。“康波周期理论”告诉我们人生一般也就一到两次大的机遇，抓住的话就可以完成阶层跨越。上一波机遇大家都知道是买房，而这一波应该就是区块链了。尽管从圈外人看比特币上涨到6万美金一个已经和普通人无缘了，但只有你站在这个圈子里面你才会对整个浪潮获得全面的感知，从而得出自己理性的结论。所谓“链圈一日、人间一年”，区块链世界进化速度极快，你待在这个圈子里面会发现无数的机会，比特币只是其中名声最大的一个而已。</p>\n<h2>6. 职业发展</h2>\n<p>我们一直戏谑 Nervos 为链圈的黄埔军校，因为确实为圈子输送了很多技术和市场人才。时不时会遇到一个圈内的 panel 四个嘉宾三个是我们的老员工。究其原因，Nervos 生态会更关注诸如“区块链究竟会带来什么价值”、“区块链的长期发展必须解决什么核心问题”等这种原则性问题而不是短平快地追逐最新热点。所以在我厂绝对不用担心只能当工具人而学不到真东西。在 Nervos 生态下大家接触的一定是业界最前沿的技术和产品。</p>\n<p>Nervina Labs 对待人才管理有三个关键词：开放、自驱和涌现。开放指的是所有产品所有部门之间绝大多数信息都是互相开放的，并且几乎所有的代码库都是开源的，员工可以使用私人的 github 账号贡献代码。自驱是我们把每个员工当做对自己负责任的成年人看待，相信自己可以管理好自己的时间，不需要用严格的打卡、kpi 等制度进行管理。涌现则是指除了自上而下的任务以外，我们提倡员工自己为生态添砖加瓦。你认为整个区块链生态缺什么就可以提出来方案、预算、招聘需求，我们内部讨论通过后就给你资源让你去实现。这也是人才晋升的重要通道。你甚至可以提出融资需求，拉团队出去创业，我们提供必要的启动资金。这种模式只有在区块链行业才有可能，因为从公链整体的角度看，所有的生态企业都会带来价值，最优的模式就是由社区自发维护整个生态的发展。</p>\n<h2>7. 工作环境与强度</h2>\n<p>我们是<strong>100% 远程工作</strong>。沟通工具主要是 G Suite、GitHub、Notion 和 Telegram。既然是远程，也就没什么打卡、加班，全凭自觉。我们强调交付，产品和技术充分沟通后大家约定交付时间，按照交付时间和质量评估绩效。因此自驱型的人最适应我厂的工作。</p>\n<p>作为团队的传统，我们每年计划有两次封闭开发的“团建”活动。一般会选在像青岛、杭州等风景饮食俱佳的城市，包下一个民宿或者别墅，用一周左右时间大家聚在一起冲刺开发产品。大家远程久了通过一两次这种活动加深了解促进协作效率，事实证明很有效果。</p>\n<h2>8. 投简历 or 交朋友</h2>\n<p>区块链是我们这代人肉眼可见的一次绝佳的机遇，不论你是否考虑我厂，我都建议你认真关注一下这个行业。我是 Cipher，很乐意交朋友，愿意回答你关于区块链的任何问题。或者你恰巧对我们感兴趣，对以下的职位感兴趣，你可以直接发邮件给我你的简历，我们聊聊看。\n招聘岗位\nrust开发工程师\n岗位职责：1、负责智能合约的开发及设计；2、负责区块链业务系统分析与设计工作；3、负责智能合约代码测试、运行和维护。任职要求：1、计算机相关专业本科及以上学历，3年以上工作经验；2、熟练掌握 C/C++、Rust 等系统开发语言至少一种，至少有过两年相关开发经验；3、对数据结构和算法，对密码学，安全协议和加密算法有研究者优先；4、优秀的英语文档撰写与阅读能力者优先；5、了解区块链，有合约开发经验更佳。\n附加信息：周末双休\n联系方式：15005209448 (微信同)\n邮箱：wangmeng@nervina.io</p>\n","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":"2021-09-01 03:08:35","source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":null},{"title":"【全职远程】15K-30K/硅谷无码AI团队招/后端开发工程师/Java or Scala","link":"https://rustcc.cn/article?id=6c2bed71-6adf-45ac-bd60-904427c5c51c","description":"<p>公司简介\n我们是一个刚刚成立在上海的创业公司。创始人在硅谷，全员远程，致力于打造下一代无码AI数据产品，技术氛围浓厚。目前和国内一家知名CDP平台厂商合理推出了第一版无代码机器学习预测平台，帮助企业实现运营的智能化。</p>\n<p>工作职责\n1、负责机器学习平台的后端技术架构;</p>\n<p>2、负责机器学习平台的后端代码实现及单元测试；</p>\n<p>3、负责编写技术设计文档、API文档。</p>\n<p>任职要求\n1、计算机相关专业，本科及以上学历；</p>\n<p>2、 熟练使用Java 或 Scala 开发，5年以上的开发经验；</p>\n<p>3、熟练使用SprintBoot，熟悉相关的生态和使用方法；</p>\n<p>4、有大数据处理经验优先。</p>\n<p>关于沟通\n1、使用飞书作为沟通和文档工具；</p>\n<p>2、每天上午 9 点（冬令时，夏令时是 上午 8:30 ）会有简单的同步；</p>\n<p>3、每天写日报，说明任务的进度，以及发现哪些问题和需要什么帮助；</p>\n<p>4、每个 Sprint 会花时间拆解 Story 和分配任务，需要各自分析出各个需求点和关键点，发现风险和不确定的地方及早确认。</p>\n<p>薪资待遇\n15K-30K，全职（不接受兼职），提供五险一金。</p>\n","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":"2021-09-01 01:52:23","source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":null},{"title":"Mike Tang 张汉东 老油条各位大佬请进，素数多线程问题","link":"https://rustcc.cn/article?id=b10b7a68-e2bf-42b6-a583-ef99478e50d3","description":"<p>各位大佬：</p>\n<p>昨天腾讯视频聊的比较开心，留了一个尾巴。我现在把我的困惑放出来，大家尽情拍砖。</p>\n<p>这个是我写的文章，文章分了两章 ：</p>\n<p><a href=\"https://github.com/sunnyrust/rustBible/blob/master/books/6.2.md\" rel=\"noopener noreferrer\">6.2 多线程——channel</a></p>\n<p><a href=\"https://github.com/sunnyrust/rustBible/blob/master/books/6.3.md\" rel=\"noopener noreferrer\">6.3 多线程——future</a></p>\n","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":"2021-09-01 00:56:14","source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":null},{"title":"Rust 异步编程二: Tokio 入门运行时介绍 | Rust 培养提高计划 Vol. 6","link":"https://rustcc.cn/article?id=dfff3602-cc0c-4423-b48b-e200b624db1a","description":"<h3>本周公开课：《 Rust 异步编程二: Tokio 入门运行时介绍》|Vol. 6</h3>\n<p><strong>课程时间:</strong>  2021年9月5日 20:00-21:00</p>\n<p><strong>课程介绍:</strong>  上周公开课我们讲解了 Rust 异步编程模型（ 属于一个非常经典的内容，建议观看 ）, 大家对 Rust 异步编程模型有了一个初步认识,  Rust 异步编程模型里需要 Executor、Reactor、Future 等, 本周公开课将以 Tokio 框架为基础, 和大家一起聊聊 Tokio 里的 Executor、Reactor、Future 是什么?</p>\n<h3>课程大纲</h3>\n<p>1、回顾 Rust 异步编程模型.</p>\n<p>2、谈谈对 Rust 异步框架的认识 ( futures-rs、async-std、tokio ) .</p>\n<p>3、Tokio 介绍.</p>\n<p>4、Tokio 里的 Executor、Reactor、Future 如何使用.</p>\n<p>5、使用 Tokio 实现一个简单的服务端与客户端程序.</p>\n<h3><strong>讲师介绍</strong></h3>\n<p><img src=\"https://datafuse-1255499614.cos.ap-beijing.myqcloud.com/pbc/%E8%8B%8F%E6%9E%97%E4%BB%8B%E7%BB%8D.png\" alt=\"\"></p>\n<p><img src=\"https://datafuse-1255499614.cos.ap-beijing.myqcloud.com/pbc/%E6%89%AB%E7%A0%81%E5%8F%82%E4%B8%8E.png\" alt=\"\"></p>\n<p>本次活动由：Datafuse项目、Rust语言中文社区、知数堂 共同发起。后期也欢迎Rust爱好者，Rust优秀项目， Data Cloud 项目来分享，公开课分享合作联系微信：82565387 备注：Rust 。 公开课嘉宾 &amp; Datafuse contributor都可以获取Datafuse纪念T恤。\n<img src=\"https://datafuse-1255499614.cos.ap-beijing.myqcloud.com/pbc/T-shirt.png\" alt=\"\"></p>\n<h3>获取 T-Shirt 的方法：</h3>\n<ol>\n<li>给 https://github.com/datafuselabs/datafuse 提 issue/pr</li>\n<li>进行 Rust，大数据，数据库方面的公开课分享</li>\n<li>社区里分享 datafuse 相关文章</li>\n<li>datafuse.rs 上面文档翻译工作</li>\n</ol>\n<h3>往期课程回放</h3>\n<p>认识面向基础架构语言 Rust | Vol. 1  https://www.bilibili.com/video/BV1mg411778g</p>\n<p>理解 Rust 的所有权 | Vol. 2    https://www.bilibili.com/video/BV1264y1i7U9</p>\n<p>通过实战理解 Rust 宏 | Vol. 3 (https://www.bilibili.com/video/BV1Yb4y1U7r1</p>\n<p>通过 Datafuse 理解全链路跟踪 | Vol. 4  https://www.bilibili.com/video/BV1YA411c7ia/\nRust 异步编程入门 Future Part 1  回放地址：\nhttps://www.bilibili.com/video/BV1mf4y1N7MJ/</p>\n<h3>课程中推荐入门资料：</h3>\n<p>Rust在线编辑器:                     https://play.rust-lang.org/</p>\n<p>《Rust语言程序设计》:            https://kaisery.github.io/trpl-zh-cn/</p>\n<p>打怪通关学习方式Rustlings:   https://github.com/rust-lang/rustlings</p>\n<p>Rust优秀项目Datafuse：        https://github.com/datafuselabs/datafuse</p>\n<p>Rust宏的练习项目：   https://github.com/dtolnay/proc-macro-workshop</p>\n<p>Rust 异步编程教材：https://rust-lang.github.io/async-book/</p>\n","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":"2021-09-02 08:40:15","source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":null},{"title":"公开课：《 Rust 异步编程入门 Future 》|Vol. 5","link":"https://rustcc.cn/article?id=d2927245-abd1-4ce4-bab2-0870ff229e70","description":"<h3>本周公开课：《 Rust 异步编程入门 Future 》|Vol. 5</h3>\n<p><strong>课程时间:</strong> 2021年8月29日 20:00-21:00</p>\n<p><strong>课程介绍:</strong>  讲到 Rust 使用 Future 异步编程，就不得不说 futures 和 tokio 这两个 crate，其实标准库中的 future，以及 async/await 就是从 futures 库中整合进标准库的, Tokio 拥有极快的性能，是大部分系统异步处理的选择，其构建于 future 之上。Future 是  Rust 异步编程的核心基础。</p>\n<h3>课程大纲</h3>\n<p>1、为什么需要异步.</p>\n<p>2、理解异步编程模型.</p>\n<p>3、Future 编程模型讲解.</p>\n<p>4、带领大家实现一个简化版的 future , 再次帮忙大家理解</p>\n<h3><strong>讲师介绍</strong></h3>\n<p><img src=\"https://datafuse-1255499614.cos.ap-beijing.myqcloud.com/pbc/%E8%8B%8F%E6%9E%97%E4%BB%8B%E7%BB%8D.png\" alt=\"\"></p>\n<p><img src=\"https://datafuse-1255499614.cos.ap-beijing.myqcloud.com/pbc/%E6%89%AB%E7%A0%81%E5%8F%82%E4%B8%8E.png\" alt=\"\"></p>\n<p>本次活动由：Datafuse项目、Rust语言中文社区、知数堂 共同发起。后期也欢迎Rust爱好者，Rust优秀项目， Data Cloud 项目来分享，公开课分享合作联系微信：82565387 备注：Rust 。 公开课嘉宾 &amp; Datafuse contributor都可以获取Datafuse纪念T恤。\n<img src=\"https://datafuse-1255499614.cos.ap-beijing.myqcloud.com/pbc/T-shirt.png\" alt=\"\"></p>\n<h3>获取 T-Shirt 的方法：</h3>\n<ol>\n<li>给 https://github.com/datafuselabs/datafuse 提 issue/pr</li>\n<li>进行 Rust，大数据，数据库方面的公开课分享</li>\n<li>社区里分享 datafuse 相关文章</li>\n<li>datafuse.rs 上面文档翻译工作</li>\n</ol>\n<h3>往期课程回放</h3>\n<p>认识面向基础架构语言 Rust | Vol. 1  https://www.bilibili.com/video/BV1mg411778g</p>\n<p>理解 Rust 的所有权 | Vol. 2    https://www.bilibili.com/video/BV1264y1i7U9</p>\n<p>通过实战理解 Rust 宏 | Vol. 3 (https://www.bilibili.com/video/BV1Yb4y1U7r1</p>\n<p>通过 Datafuse 理解全链路跟踪 | Vol. 4  https://www.bilibili.com/video/BV1YA411c7ia/</p>\n<h3>课程中推荐入门资料：</h3>\n<p>Rust在线编辑器:                     https://play.rust-lang.org/</p>\n<p>《Rust语言程序设计》:            https://kaisery.github.io/trpl-zh-cn/</p>\n<p>打怪通关学习方式Rustlings:   https://github.com/rust-lang/rustlings</p>\n<p>Rust优秀项目Datafuse：        https://github.com/datafuselabs/datafuse</p>\n<p>Rust宏的练习项目：   https://github.com/dtolnay/proc-macro-workshop</p>\n","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":"2021-08-23 03:14:21","source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":null},{"title":"【Rust日报】2021-08-19 -- Rust Edition 2021 可能会出现在 Rust 1.56中","link":"https://rustcc.cn/article?id=7a3f7b1a-836a-4eab-a014-e5f354640f8c","description":"<h3>Rust Edition 2021 可能会出现在 Rust 1.56中</h3>\n<p>已经在下载次数最多的前 10000 个crate 上测试了版本迁移,并且将测试所有公共的 crate。</p>\n<p>ReadMore:<a href=\"https://twitter.com/m_ou_se/status/1427666611977297924\" rel=\"noopener noreferrer\">https://twitter.com/m_ou_se/status/1427666611977297924</a></p>\n<h3>异步引擎 C++20, Rust &amp; Zig</h3>\n<p>ReadMore:<a href=\"https://www.reddit.com/r/rust/comments/p63o4g/async_engines_in_c20_rust_zig/\" rel=\"noopener noreferrer\">https://www.reddit.com/r/rust/comments/p63o4g/async_engines_in_c20_rust_zig/</a></p>\n<h3>RG3D -- Rust 3D 游戏引擎</h3>\n<ul>\n<li><strong>PC（Windows、Linux、macOS）和 Web (WebAssembly)</strong> 支持。</li>\n<li><strong>延迟着色</strong></li>\n<li><strong>内置保存/加载</strong></li>\n<li><strong>独立场景编辑器</strong></li>\n<li><strong>高级物理模型</strong></li>\n<li><strong>分层模型资源</strong></li>\n<li><strong>几何实例化</strong></li>\n</ul>\n<p>ReadMore:<a href=\"https://gamefromscratch.com/rg3d-open-source-rust-3d-game-engine/\" rel=\"noopener noreferrer\">https://gamefromscratch.com/rg3d-open-source-rust-3d-game-engine/</a></p>\n<p>ReadMore:<a href=\"https://github.com/rg3dengine/rg3d\" rel=\"noopener noreferrer\">https://github.com/rg3dengine/rg3d</a></p>\n<hr>\n<p>From 日报小组 冰山上的 mook &amp;&amp; 挺肥</p>\n<p>社区学习交流平台订阅：</p>\n<ul>\n<li><a href=\"https://rustcc.cn/\" rel=\"noopener noreferrer\">Rustcc论坛: 支持rss</a></li>\n<li><a href=\"https://rustcc.cn/article?id=ed7c9379-d681-47cb-9532-0db97d883f62\" rel=\"noopener noreferrer\">微信公众号：Rust语言中文社区</a></li>\n</ul>\n","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":"2021-08-18 16:31:44","source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":null},{"title":"公开课: 通过 Datafuse 理解全链路跟踪 | Vol. 4","link":"https://rustcc.cn/article?id=d07779e9-c748-4179-b365-4990a09c55e8","description":"<p><strong>本周公开课：《通过Datafuse理解全链路跟踪》| Vol. 4</strong></p>\n<p><strong>课程时间：</strong>  2021年8月22日 20:30-21:30</p>\n<p><strong>课程介绍：</strong> 数据库系统也是一个非常复杂，庞大的系统。特别是在调试和观察SQL执行，多线程任务切换，因为没有内存调用或堆栈跟踪，这也是分布式追踪的由来。这里面涉及到多进行分布式追踪为描述和分析跨进程事务提供了一种解决方案。Google Dapper(Dapper: 大规模分布式系统链路追踪基础设施)论文(各tracer的基础)中描述了分布式追踪的一些使用案例包括异常检测、诊断稳态问题、分布式分析、资源属性和微服务的工作负载建模。</p>\n<p>本次公开课通 Google 的 OpenTraceing 介绍，结合Rust的 tokio-rs/tracing 使用，最终结合 Datafuse 项目给大家展示一下大型应用的全链路跟踪分析过程。</p>\n<p>关于Datafuse : https://github.com/datafuselabs/datafuse</p>\n<h3>课程大纲</h3>\n<ol>\n<li>\n<p>什么是分布式追踪系统OpenTracing及应用场景</p>\n</li>\n<li>\n<p>介绍 tokio-rs/tracing 及在程序开发中的作用</p>\n</li>\n<li>\n<p>为什么需要tokio-rs/tracing库</p>\n</li>\n<li>\n<p>演示Datafuse项目中tokio-rs/tracing的使用</p>\n</li>\n</ol>\n<h3><strong>讲师介绍</strong></h3>\n<p><img src=\"https://datafuse-1255499614.cos.ap-beijing.myqcloud.com/pbc/%E8%8B%8F%E6%9E%97%E4%BB%8B%E7%BB%8D.png\" alt=\"\"></p>\n<p><img src=\"https://datafuse-1255499614.cos.ap-beijing.myqcloud.com/pbc/%E6%89%AB%E7%A0%81%E5%8F%82%E4%B8%8E.png\" alt=\"\"></p>\n<p>本次活动由：Datafuse项目、Rust语言中文社区、知数堂 共同发起。后期也欢迎Rust爱好者，Rust优秀项目， Data Cloud 项目来分享，公开课分享合作联系微信：82565387 备注：Rust 。 公开课嘉宾 &amp; Datafuse contributor都可以获取Datafuse纪念T恤。\n<img src=\"https://datafuse-1255499614.cos.ap-beijing.myqcloud.com/pbc/T-shirt.png\" alt=\"\"></p>\n<h3>获取 T-Shirt 的方法：</h3>\n<ol>\n<li>给 https://github.com/datafuselabs/datafuse 提 issue/pr</li>\n<li>进行 Rust，大数据，数据库方面的公开课分享</li>\n<li>社区里分享 datafuse 相关文章</li>\n<li>datafuse.rs 上面文档翻译工作</li>\n</ol>\n<h3>往期课程回放</h3>\n<p>认识面向基础架构语言 Rust | Vol. 1  https://www.bilibili.com/video/BV1mg411778g</p>\n<p>理解 Rust 的所有权 | Vol. 2    https://www.bilibili.com/video/BV1264y1i7U9</p>\n<p>通过实战理解 Rust 宏 | Vol. 3 (https://www.bilibili.com/video/BV1Yb4y1U7r1</p>\n<h3>课程中苏林老师推荐入门资料：</h3>\n<p>Rust在线编辑器:                     https://play.rust-lang.org/</p>\n<p>《Rust语言程序设计》:            https://kaisery.github.io/trpl-zh-cn/</p>\n<p>打怪通关学习方式Rustlings:   https://github.com/rust-lang/rustlings</p>\n<p>Rust优秀项目Datafuse：        https://github.com/datafuselabs/datafuse</p>\n<p>Rust宏的练习项目：   https://github.com/dtolnay/proc-macro-workshop</p>\n","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":"2021-08-16 03:14:03","source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":null},{"title":"论坛github账户无法登录解决笔记","link":"https://rustcc.cn/article?id=8be810c8-be92-4ca5-96ed-a5b638952190","description":"<p>有反映这两天github账户无法登录了。</p>\n<p>报这个错：</p>\n<pre><code>get github user info err\n</code></pre>\n<p>查了几个地方：</p>\n<ol>\n<li>代码是否运行正常：Ok</li>\n<li>https代理是否正常：Ok</li>\n<li>检查了github返回日志，发现是：</li>\n</ol>\n<pre><code>get_github_user_info: response body: \"{\\\"message\\\":\\\"Must specify access token via Authorization header. https://developer.github.com/changes/2020-02-10-deprecating-auth-through-query-param\\\",\\\"documentation_url\\\":\\\"https://docs.github.com/v3/#oauth2-token-sent-in-a-header\\\"}\"\nget_github_user_info: Got: Err(Custom(\"read json login error\"))\n</code></pre>\n<p>进入这个地址一看：<a href=\"https://developer.github.com/changes/2020-02-10-deprecating-auth-through-query-param/\" rel=\"noopener noreferrer\">https://developer.github.com/changes/2020-02-10-deprecating-auth-through-query-param/</a></p>\n<p>原来2020年2月就已经说了，要改要改。不过我确实没留意到这个信息。：（</p>\n<p>意思就是说access_token不要放在query参数中，而是要放在header里面。照它说的，改了后就好了。</p>\n<p>特此记录。</p>\n","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":"2021-08-13 07:03:09","source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":null},{"title":"Rust 的 Future 与 Javascript 的 Promise 功能对照参考","link":"https://rustcc.cn/article?id=2d0a7629-2740-435f-9ef7-98735bf4f095","description":"<h1><code>Rust</code>的<code>Future</code>与<code>Javascript</code>的<code>Promise</code>功能对照参考</h1>\n<p>学习新鲜技术时，我总是会习惯性向曾经熟悉的内容上靠，甚至套用现有的认知模型。这次也不例外，对照<code>Javascript - Promise/A+ API</code>来记忆一部分<code>Rust Future</code>常用<code>API</code>。</p>\n<blockquote>\n<p>注意：所有的<code>Rust - Future</code>操作都是以<code>.await</code>结尾的。这是因为，不同于<code>Javascript - Promise/A+</code>，<code>Rust - Future</code>是惰性的。只有被<code>.await</code>指令激活后，在<code>Rust - Future</code>内封装的操作才会被真正地执行。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>javascript</th>\n<th align=\"center\">rust</th>\n<th align=\"center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Promise.resolve(...)</td>\n<td align=\"center\">use ::async_std::future;future::ready(Ok(...))</td>\n<td align=\"center\">在 rust 中，Future 自身不区分异步成功，还是异步失败。需要给异步计算结果套上 Result&lt;T, E&gt; 马甲，来做 resolve 与 reject 的差别处理。</td>\n</tr>\n<tr>\n<td>Promise.reject(...)</td>\n<td align=\"center\">use ::async_std::future;future::ready(Err(...))</td>\n<td align=\"center\">在 rust 中，Future 自身不区分异步成功，还是异步失败。需要给异步计算结果套上 Result&lt;T, E&gt; 马甲，来做 resolve 与 reject 的差别处理。</td>\n</tr>\n<tr>\n<td>Promise.catch(err =&gt; err)</td>\n<td align=\"center\">use ::async_std::future;future::ready(...)</td>\n<td align=\"center\">在 rust 中，Future 自身不区分异步成功，还是异步失败。需要给异步计算结果套上 Result&lt;T, E&gt; 马甲，来做 resolve 与 reject 的差别处理。</td>\n</tr>\n<tr>\n<td>new Promise(() =&gt; {/* 什么都不做 */})</td>\n<td align=\"center\">use ::async_std::future;future::pending()</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td>new Promise((resolve, reject) =&gt; setTimeout(() =&gt; {  if (Math.random() &gt; .5) {    resolve(1);  } else {    reject(new Error('1'));  }}, 500))</td>\n<td align=\"center\">use ::async_std::task;use ::std::{thread, time::Duration};use ::rand::prelude::*;task::spawn_blocking(|| {    thread::sleep(Duration::from_millis(500));    let mut rng = rand::thread_rng();    if rng.gen() &gt; 0.5f64 {       Ok(1)    } else {       Err('1')    }}).await;</td>\n<td align=\"center\">1. future::poll_fn&lt;F, T&gt;(f: F) -&gt; T where F: FnMut(&amp;mut Context&lt;'_&gt;) -&gt; Poll 不能被用来构造包含了异步操作的 Future 实例，因为【回调闭包】内的【可修改引用】&amp;mut Context&lt;'_&gt; 不能被  （1）跨线程传递  （2）传递出闭包作用域2. task::spawn_blocking() 【回调闭包】输入参数内的 thread::sleep() 不是阻塞运行 task::spawn_blocking() 的主线程，而是阻塞从【阻塞任务线程池】中分配来运行阻塞任务的【工作线程】。</td>\n</tr>\n<tr>\n<td>Promise.all([promise1, promise2, promise3])</td>\n<td align=\"center\">future1.try_join(future2).try_join(future3).await</td>\n<td align=\"center\">1. 有一个 promise/future 失败就整体性地失败。2. try_join 成员方法要求其 Self 为 Future&lt;Output = Result&lt;T, E&gt;&gt;3. 返回结果：Result&lt;(T1, T2, T3), E&gt;</td>\n</tr>\n<tr>\n<td>Promise.all([  promise1.catch(err =&gt; err),  promise2.catch(err =&gt; err)  promise3.catch(err =&gt; err)])</td>\n<td align=\"center\">future1.join(future2).join(future3).await</td>\n<td align=\"center\">1. promise/future 的成功与失败结果都收集2. 返回结果：(T1, T2, T3)</td>\n</tr>\n<tr>\n<td>Promise.race([promise1, promise2, promise3])</td>\n<td align=\"center\">future1.try_race(future2).try_race(future3).await</td>\n<td align=\"center\">1. 仅只收集第一个成功的 promise/future2. try_race 成员方法要求其 Self 为 Future&lt;Output = Result&lt;T, E&gt;&gt;3. 返回结果：Result&lt;T, E&gt;</td>\n</tr>\n<tr>\n<td>Promise.race([  promise1.catch(err =&gt; err),  promise2.catch(err =&gt; err)  promise3.catch(err =&gt; err)])</td>\n<td align=\"center\">future1.race(future2).race(future3).await</td>\n<td align=\"center\">1. 收集第一个结束的 promise/future，无论它是成功结束还是失败收场。2. 返回结果：T</td>\n</tr>\n</tbody>\n</table>\n","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":"2021-08-11 23:36:19","source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":null},{"title":"Rust公开课：《通过实战理解 Rust 宏》| Vol. 3","link":"https://rustcc.cn/article?id=dfb80624-2266-448f-87b1-d10f1e8d7c21","description":"<p><strong>课程主题：</strong>《通过实战理解 Rust 宏》</p>\n<p><strong>课程时间：</strong>  2021年8月15日 20:30-21:30</p>\n<p><strong>课程介绍：</strong></p>\n<p>如果想用 Rust 开发大型目，或者学习大型项目代码，特别是框架级别的项目，那么 Rust 的宏机制肯定是一个必须掌握的技能。 例如 datafuse 中的一些配置管理：\n<img src=\"https://datafuse-1255499614.cos.ap-beijing.myqcloud.com/pbc/3/rust-macro-1628478411126.jpg\" alt=\"\"></p>\n<p>这就是通过宏实现配置的统一行为，代码参考：\nhttps://github.com/datafuselabs/datafuse/blob/master/fusequery/query/src/sessions/settings.rs#L19</p>\n<p>https://github.com/datafuselabs/datafuse/blob/master/fusequery/query/src/sessions/macros.rs</p>\n<p>Rust 语言强大的一个特点就是可以创建和利用宏，不过创建宏看起来挺复杂，常常令刚接触 Rust 的开发者生畏惧。 在本次公开课中帮助你理解 Rust Macro 的基本原理，学习如何创自已的 Rust 宏，以及查看源码学习宏的实现。</p>\n<h3>课程大纲</h3>\n<ul>\n<li>什么是 Rust 宏</li>\n<li>什么是宏运行原理</li>\n<li>如何创建 Rust 宏过程</li>\n<li>阅读 datafuse 项目源码， 学习项目中宏的实现</li>\n</ul>\n<p><strong>讲师介绍</strong>\n<img src=\"https://datafuse-1255499614.cos.ap-beijing.myqcloud.com/pbc/%E8%8B%8F%E6%9E%97%E4%BB%8B%E7%BB%8D.png\" alt=\"\"></p>\n<p><img src=\"https://datafuse-1255499614.cos.ap-beijing.myqcloud.com/pbc/%E6%89%AB%E7%A0%81%E5%8F%82%E4%B8%8E.png\" alt=\"\"></p>\n<p>本次活动由：知数堂、Datafuse项目、Rust语言中文社区 共同发起。后期也欢迎Rust爱好者，Rust优秀项目， Data Cloud 项目来分享，公开课分享合作联系微信：82565387 备注：Rust 。 公开课嘉宾 &amp; Datafuse contributor都可以获取Datafuse纪念T恤。\n<img src=\"https://datafuse-1255499614.cos.ap-beijing.myqcloud.com/pbc/T-shirt.png\" alt=\"\"></p>\n<h3>课程中苏林老师推荐入门资料：</h3>\n<p>Rust在线编辑器:                     https://play.rust-lang.org/</p>\n<p>《Rust语言程序设计》:            https://kaisery.github.io/trpl-zh-cn/</p>\n<p>打怪通关学习方式Rustlings:   https://github.com/rust-lang/rustlings</p>\n<p>Rust优秀项目Datafuse：        https://github.com/datafuselabs/datafuse</p>\n","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":"2021-08-09 05:46:45","source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":null},{"title":"Rust公开课：理解Rust的所有权| Vol 2","link":"https://rustcc.cn/article?id=c107b830-9fe1-43dd-94a3-9efcd5544205","description":"<p><strong>课程主题：《理解Rust所有权》</strong></p>\n<p><strong>课程时间：2021年8月8日 20:30-21:30</strong></p>\n<p><strong>嘉宾讲师： 苏林</strong></p>\n<p><strong>嘉宾介绍：</strong></p>\n<p>Rust中文社区成员，多点Dmall技术Leader，前折800互联网研发团队负责人、10余年一线研发经验。具有多年的软件开发经验, 熟练Ruby、Java、Rust等开发语言, 同时也参与过Rust中文社区日报维护工作。</p>\n<p><strong>课程介绍</strong></p>\n<p>本次课程通过10个左右的小例子，带大家理解一下Rust的所有权，Rust引用和借用，Rust变量克隆和复制的理念。</p>\n<p><strong>参加课程</strong>\n<img src=\"https://datafuse-1255499614.cos.ap-beijing.myqcloud.com/pbc/Rust-pbc-1.jpg\" alt=\"\"></p>\n<p><strong>课程规划</strong></p>\n<p>本次活动由：知数堂、Datafuse项目、Rust语言中文社区 共同发起。后期也欢迎Rust爱好者，Rust优秀项目， Data Cloud项目来分享，公开课分享合作联系微信：82565387 备注：Rust 。 公开课嘉宾 &amp; Datafuse contributor都可以获取Datafuse纪念T恤。</p>\n","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":"2021-08-08 02:04:00","source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":null},{"title":"数据表 Timestamp 日期 Serialize","link":"https://rustcc.cn/article?id=2ff8a69e-59bb-4502-87c0-c3416ffae8a0","description":"<p>主要参考：<a href=\"https://github.com/rustcc/forustm\" rel=\"noopener noreferrer\">Rustcc网站源码库</a></p>\n<p>在处理数据表中日期相关数据时，Seralize序列化相关操作会报错，提示 DateTime 字段不识别，\n查了 rustcc 源码才发现依赖中需要开启相应的feature。特此记录。</p>\n<h2>1.依赖的库：</h2>\n<pre><code>[dependencies]\n# 日期时间处理 需要开启 serde 特征 支持序列化\nchrono = { version = \"0.4.19\", features = [\"serde\"] }\n\n# 数据库ORM\ndiesel = { version = \"1.4.4\", features = [\"postgres\", \"chrono\", \"uuid\", \"r2d2\"] }\ndotenv = \"0.15.0\"\nserde = { version = \"1.0.127\", features = [\"derive\"] }\nserde_json = \"1.0.66\"\nuuid = { version = \"0.8.2\", features = [\"serde\", \"v4\"] }\n</code></pre>\n<h2>2.创建数据表</h2>\n<pre><code>CREATE TABLE characters (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(128) UNIQUE NOT NULL,\n    age INTEGER NOT NULL DEFAULT 0,\n    friends VARCHAR NOT NULL DEFAULT '',\n    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP\n)\n</code></pre>\n<h2>3.数据表对应的 model</h2>\n<pre><code>use chrono::{NaiveDateTime};\nuse serde::{Deserialize, Serialize};\n\n#[derive(Queryable, Serialize, Deserialize, Debug)]\npub struct Characters {\n    pub id: i32,\n    pub name: String,\n    pub age: i32,\n    pub friends: String,\n    // 这里的 NaiveDateTime 日期格式序列化需要开启相关 features\n    pub created_at: NaiveDateTime,\n}\n</code></pre>\n<h2>4.获取数据</h2>\n<pre><code>use db::schema::characters;\nuse db::{get_connection};\nuse db::models::{Characters, NewCharacter};\nuse db::schema::characters::dsl::*;\nuse diesel::QueryDsl;\nuse diesel::prelude::*;\n\nfn main() {\n    let conn = get_connection();\n\n    // 查询年龄大于30的10条数据\n    let arr: Vec&lt;Characters&gt; = characters.filter(characters::age.gt(30))\n        .limit(10)\n        .load::&lt;Characters&gt;(&amp;conn)\n        .expect(\"Loading Error\");\n\n    let date_arr = arr.iter()\n        .map(|item| {\n\t    // 数据格式化\n            let t = item.created_at.format(\"%Y-%m-%d %H:%M:%S\").to_string();\n            println!(\"{} {}\", item.name, t);\n            t\n        })\n        .collect::&lt;Vec&lt;String&gt;&gt;();\n}\n</code></pre>\n<p>输出结果类似：</p>\n<pre><code>Box 2021-08-05 09:39:34\nBobe 2021-08-05 09:39:34\n</code></pre>\n","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":"2021-08-08 01:40:35","source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":null},{"title":"Cargo workspace config","link":"https://rustcc.cn/article?id=c3dcce30-1fc0-4819-8992-142365c7e21c","description":"<p><a href=\"https://kaisery.github.io/trpl-zh-cn/ch14-03-cargo-workspaces.html\" rel=\"noopener noreferrer\">Workspace 文档链接</a></p>\n<h2>目录结构</h2>\n<pre><code>workspace-test/\n    Cargo.toml\n    db/\n        src/\n            bin/\n                init.rs\n        Cargo.tml\n</code></pre>\n<h2>workspace</h2>\n<p>workspace-test/Cargo.toml</p>\n<pre><code>[workspace]\nmembers = [\"db\"]\ndefault-member = \"db\"\n</code></pre>\n<h2>子项目</h2>\n<p>workspace-test/db/Cargo.toml</p>\n<pre><code>[package]\nname = \"db\"\nversion = \"0.1.0\"\nedition = \"2018\"\n\n[dependencies]\n\n# 可选的可执行文件配置\n# [[bin]]\n# name = \"init\"\n# path = \"src/bin/init.rs\"\n</code></pre>\n<h2>操作</h2>\n<pre><code># 运行 init\ncargo run --bin init\n# -p 指定项目\ncargo run -p db --bin init\n</code></pre>\n","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":"2021-08-04 09:54:31","source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":null}],"extensions":{},"itunes_ext":null,"dublin_core_ext":null,"syndication_ext":null,"namespaces":{}}]},{"datetime":"2021-09-03T01:30:00Z","channels":[{"title":"cs.CL updates on arXiv.org","link":"http://export.arxiv.org/rss/cs.CL","description":"Computer Science -- Computation and Language (cs.CL) updates on the arXiv.org e-print archive","language":null,"copyright":null,"managing_editor":null,"webmaster":null,"pub_date":null,"last_build_date":null,"categories":[],"generator":null,"docs":null,"cloud":null,"rating":null,"ttl":null,"image":{"url":"http://arxiv.org/icons/sfx.gif","title":"arXiv.org","link":"http://arxiv.org/","width":null,"height":null,"description":null},"text_input":null,"skip_hours":[],"skip_days":[],"items":[{"title":"Don't Discard All the Biased Instances: Investigating a Core Assumption in Dataset Bias Mitigation Techniques. (arXiv:2109.00521v1 [cs.LG])","link":"http://arxiv.org/abs/2109.00521","description":"<p>Existing techniques for mitigating dataset bias often leverage a biased model\nto identify biased instances. The role of these biased instances is then\nreduced during the training of the main model to enhance its robustness to\nout-of-distribution data. A common core assumption of these techniques is that\nthe main model handles biased instances similarly to the biased model, in that\nit will resort to biases whenever available. In this paper, we show that this\nassumption does not hold in general. We carry out a critical investigation on\ntwo well-known datasets in the domain, MNLI and FEVER, along with two biased\ninstance detection methods, partial-input and limited-capacity models. Our\nexperiments show that in around a third to a half of instances, the biased\nmodel is unable to predict the main model's behavior, highlighted by the\nsignificantly different parts of the input on which they base their decisions.\nBased on a manual validation, we also show that this estimate is highly in line\nwith human interpretation. Our findings suggest that down-weighting of\ninstances detected by bias detection methods, which is a widely-practiced\nprocedure, is an unnecessary waste of training data. We release our code to\nfacilitate reproducibility and future research.\n</p>","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":null,"source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":{"contributors":[],"coverages":[],"creators":["<a href=\"http://arxiv.org/find/cs/1/au:+Amirkhani_H/0/1/0/all/0/1\">Hossein Amirkhani</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Pilehvar_M/0/1/0/all/0/1\">Mohammad Taher Pilehvar</a>"],"dates":[],"descriptions":[],"formats":[],"identifiers":[],"languages":[],"publishers":[],"relations":[],"rights":[],"sources":[],"subjects":[],"titles":[],"types":[]}},{"title":"Text AutoAugment: Learning Compositional Augmentation Policy for Text Classification. (arXiv:2109.00523v1 [cs.CL])","link":"http://arxiv.org/abs/2109.00523","description":"<p>Data augmentation aims to enrich training samples for alleviating the\noverfitting issue in low-resource or class-imbalanced situations. Traditional\nmethods first devise task-specific operations such as Synonym Substitute, then\npreset the corresponding parameters such as the substitution rate artificially,\nwhich require a lot of prior knowledge and are prone to fall into the\nsub-optimum. Besides, the number of editing operations is limited in the\nprevious methods, which decreases the diversity of the augmented data and thus\nrestricts the performance gain. To overcome the above limitations, we propose a\nframework named Text AutoAugment (TAA) to establish a compositional and\nlearnable paradigm for data augmentation. We regard a combination of various\noperations as an augmentation policy and utilize an efficient Bayesian\nOptimization algorithm to automatically search for the best policy, which\nsubstantially improves the generalization capability of models. Experiments on\nsix benchmark datasets show that TAA boosts classification accuracy in\nlow-resource and class-imbalanced regimes by an average of 8.8% and 9.7%,\nrespectively, outperforming strong baselines.\n</p>","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":null,"source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":{"contributors":[],"coverages":[],"creators":["<a href=\"http://arxiv.org/find/cs/1/au:+Ren_S/0/1/0/all/0/1\">Shuhuai Ren</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Zhang_J/0/1/0/all/0/1\">Jinchao Zhang</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Li_L/0/1/0/all/0/1\">Lei Li</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Sun_X/0/1/0/all/0/1\">Xu Sun</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Zhou_J/0/1/0/all/0/1\">Jie Zhou</a>"],"dates":[],"descriptions":[],"formats":[],"identifiers":[],"languages":[],"publishers":[],"relations":[],"rights":[],"sources":[],"subjects":[],"titles":[],"types":[]}},{"title":"Boosting Search Engines with Interactive Agents. (arXiv:2109.00527v1 [cs.CL])","link":"http://arxiv.org/abs/2109.00527","description":"<p>Can machines learn to use a search engine as an interactive tool for finding\ninformation? That would have far reaching consequences for making the world's\nknowledge more accessible. This paper presents first steps in designing agents\nthat learn meta-strategies for contextual query refinements. Our approach uses\nmachine reading to guide the selection of refinement terms from aggregated\nsearch results. Agents are then empowered with simple but effective search\noperators to exert fine-grained and transparent control over queries and search\nresults. We develop a novel way of generating synthetic search sessions, which\nleverages the power of transformer-based generative language models through\n(self-)supervised learning. We also present a reinforcement learning agent with\ndynamically constrained actions that can learn interactive search strategies\ncompletely from scratch. In both cases, we obtain significant improvements over\none-shot search with a strong information retrieval baseline. Finally, we\nprovide an in-depth analysis of the learned search policies.\n</p>","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":null,"source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":{"contributors":[],"coverages":[],"creators":["<a href=\"http://arxiv.org/find/cs/1/au:+Adolphs_L/0/1/0/all/0/1\">Leonard Adolphs</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Boerschinger_B/0/1/0/all/0/1\">Benjamin Boerschinger</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Buck_C/0/1/0/all/0/1\">Christian Buck</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Huebscher_M/0/1/0/all/0/1\">Michelle Chen Huebscher</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Ciaramita_M/0/1/0/all/0/1\">Massimiliano Ciaramita</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Espeholt_L/0/1/0/all/0/1\">Lasse Espeholt</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Hofmann_T/0/1/0/all/0/1\">Thomas Hofmann</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Kilcher_Y/0/1/0/all/0/1\">Yannic Kilcher</a>"],"dates":[],"descriptions":[],"formats":[],"identifiers":[],"languages":[],"publishers":[],"relations":[],"rights":[],"sources":[],"subjects":[],"titles":[],"types":[]}},{"title":"Towards Improving Adversarial Training of NLP Models. (arXiv:2109.00544v1 [cs.CL])","link":"http://arxiv.org/abs/2109.00544","description":"<p>Adversarial training, a method for learning robust deep neural networks,\nconstructs adversarial examples during training. However, recent methods for\ngenerating NLP adversarial examples involve combinatorial search and expensive\nsentence encoders for constraining the generated instances. As a result, it\nremains challenging to use vanilla adversarial training to improve NLP models'\nperformance, and the benefits are mainly uninvestigated. This paper proposes a\nsimple and improved vanilla adversarial training process for NLP, which we name\nAttacking to Training ($\\texttt{A2T}$). The core part of $\\texttt{A2T}$ is a\nnew and cheaper word substitution attack optimized for vanilla adversarial\ntraining. We use $\\texttt{A2T}$ to train BERT and RoBERTa models on IMDB,\nRotten Tomatoes, Yelp, and SNLI datasets. Our results show that it is possible\nto train empirically robust NLP models using a much cheaper adversary. We\ndemonstrate that vanilla adversarial training with $\\texttt{A2T}$ can improve\nan NLP model's robustness to the attack it was originally trained with and also\ndefend the model against other types of attacks. Furthermore, we show that\n$\\texttt{A2T}$ can improve NLP models' standard accuracy, cross-domain\ngeneralization, and interpretability. Code is available at\n<a href=\"http://github.com/jinyongyoo/A2T\">this http URL</a> .\n</p>","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":null,"source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":{"contributors":[],"coverages":[],"creators":["<a href=\"http://arxiv.org/find/cs/1/au:+Yoo_J/0/1/0/all/0/1\">Jin Yong Yoo</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Qi_Y/0/1/0/all/0/1\">Yanjun Qi</a>"],"dates":[],"descriptions":[],"formats":[],"identifiers":[],"languages":[],"publishers":[],"relations":[],"rights":[],"sources":[],"subjects":[],"titles":[],"types":[]}},{"title":"Does Knowledge Help General NLU? An Empirical Study. (arXiv:2109.00563v1 [cs.CL])","link":"http://arxiv.org/abs/2109.00563","description":"<p>It is often observed in knowledge-centric tasks (e.g., common sense question\nand answering, relation classification) that the integration of external\nknowledge such as entity representation into language models can help provide\nuseful information to boost the performance. However, it is still unclear\nwhether this benefit can extend to general natural language understanding (NLU)\ntasks. In this work, we empirically investigated the contribution of external\nknowledge by measuring the end-to-end performance of language models with\nvarious knowledge integration methods. We find that the introduction of\nknowledge can significantly improve the results on certain tasks while having\nno adverse effects on other tasks. We then employ mutual information to reflect\nthe difference brought by knowledge and a neural interpretation model to reveal\nhow a language model utilizes external knowledge. Our study provides valuable\ninsights and guidance for practitioners to equip NLP models with knowledge.\n</p>","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":null,"source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":{"contributors":[],"coverages":[],"creators":["<a href=\"http://arxiv.org/find/cs/1/au:+Xu_R/0/1/0/all/0/1\">Ruochen Xu</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Fang_Y/0/1/0/all/0/1\">Yuwei Fang</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Zhu_C/0/1/0/all/0/1\">Chenguang Zhu</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Zeng_M/0/1/0/all/0/1\">Michael Zeng</a>"],"dates":[],"descriptions":[],"formats":[],"identifiers":[],"languages":[],"publishers":[],"relations":[],"rights":[],"sources":[],"subjects":[],"titles":[],"types":[]}},{"title":"DILBERT: Customized Pre-Training for Domain Adaptation withCategory Shift, with an Application to Aspect Extraction. (arXiv:2109.00571v1 [cs.CL])","link":"http://arxiv.org/abs/2109.00571","description":"<p>The rise of pre-trained language models has yielded substantial progress in\nthe vast majority of Natural Language Processing (NLP) tasks. However, a\ngeneric approach towards the pre-training procedure can naturally be\nsub-optimal in some cases. Particularly, fine-tuning a pre-trained language\nmodel on a source domain and then applying it to a different target domain,\nresults in a sharp performance decline of the eventual classifier for many\nsource-target domain pairs. Moreover, in some NLP tasks, the output categories\nsubstantially differ between domains, making adaptation even more challenging.\nThis, for example, happens in the task of aspect extraction, where the aspects\nof interest of reviews of, e.g., restaurants or electronic devices may be very\ndifferent. This paper presents a new fine-tuning scheme for BERT, which aims to\naddress the above challenges. We name this scheme DILBERT: Domain Invariant\nLearning with BERT, and customize it for aspect extraction in the unsupervised\ndomain adaptation setting. DILBERT harnesses the categorical information of\nboth the source and the target domains to guide the pre-training process\ntowards a more domain and category invariant representation, thus closing the\ngap between the domains. We show that DILBERT yields substantial improvements\nover state-of-the-art baselines while using a fraction of the unlabeled data,\nparticularly in more challenging domain adaptation setups.\n</p>","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":null,"source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":{"contributors":[],"coverages":[],"creators":["<a href=\"http://arxiv.org/find/cs/1/au:+Lekhtman_E/0/1/0/all/0/1\">Entony Lekhtman</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Ziser_Y/0/1/0/all/0/1\">Yftah Ziser</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Reichart_R/0/1/0/all/0/1\">Roi Reichart</a>"],"dates":[],"descriptions":[],"formats":[],"identifiers":[],"languages":[],"publishers":[],"relations":[],"rights":[],"sources":[],"subjects":[],"titles":[],"types":[]}},{"title":"WebQA: Multihop and Multimodal QA. (arXiv:2109.00590v1 [cs.CL])","link":"http://arxiv.org/abs/2109.00590","description":"<p>Web search is fundamentally multimodal and multihop. Often, even before\nasking a question we choose to go directly to image search to find our answers.\nFurther, rarely do we find an answer from a single source but aggregate\ninformation and reason through implications. Despite the frequency of this\neveryday occurrence, at present, there is no unified question answering\nbenchmark that requires a single model to answer long-form natural language\nquestions from text and open-ended visual sources -- akin to a human's\nexperience. We propose to bridge this gap between the natural language and\ncomputer vision communities with WebQA. We show that A. our multihop text\nqueries are difficult for a large-scale transformer model, and B. existing\nmulti-modal transformers and visual representations do not perform well on\nopen-domain visual queries. Our challenge for the community is to create a\nunified multimodal reasoning model that seamlessly transitions and reasons\nregardless of the source modality.\n</p>","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":null,"source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":{"contributors":[],"coverages":[],"creators":["<a href=\"http://arxiv.org/find/cs/1/au:+Chang_Y/0/1/0/all/0/1\">Yingshan Chang</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Narang_M/0/1/0/all/0/1\">Mridu Narang</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Suzuki_H/0/1/0/all/0/1\">Hisami Suzuki</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Cao_G/0/1/0/all/0/1\">Guihong Cao</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Gao_J/0/1/0/all/0/1\">Jianfeng Gao</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Bisk_Y/0/1/0/all/0/1\">Yonatan Bisk</a>"],"dates":[],"descriptions":[],"formats":[],"identifiers":[],"languages":[],"publishers":[],"relations":[],"rights":[],"sources":[],"subjects":[],"titles":[],"types":[]}},{"title":"Fight Fire with Fire: Fine-tuning Hate Detectors using Large Samples of Generated Hate Speech. (arXiv:2109.00591v1 [cs.CL])","link":"http://arxiv.org/abs/2109.00591","description":"<p>Automatic hate speech detection is hampered by the scarcity of labeled\ndatasetd, leading to poor generalization. We employ pretrained language models\n(LMs) to alleviate this data bottleneck. We utilize the GPT LM for generating\nlarge amounts of synthetic hate speech sequences from available labeled\nexamples, and leverage the generated data in fine-tuning large pretrained LMs\non hate detection. An empirical study using the models of BERT, RoBERTa and\nALBERT, shows that this approach improves generalization significantly and\nconsistently within and across data distributions. In fact, we find that\ngenerating relevant labeled hate speech sequences is preferable to using\nout-of-domain, and sometimes also within-domain, human-labeled examples.\n</p>","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":null,"source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":{"contributors":[],"coverages":[],"creators":["<a href=\"http://arxiv.org/find/cs/1/au:+Wullach_T/0/1/0/all/0/1\">Tomer Wullach</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Adler_A/0/1/0/all/0/1\">Amir Adler</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Minkov_E/0/1/0/all/0/1\">Einat Minkov</a>"],"dates":[],"descriptions":[],"formats":[],"identifiers":[],"languages":[],"publishers":[],"relations":[],"rights":[],"sources":[],"subjects":[],"titles":[],"types":[]}},{"title":"Latin writing styles analysis with Machine Learning: New approach to old questions. (arXiv:2109.00601v1 [cs.CL])","link":"http://arxiv.org/abs/2109.00601","description":"<p>In the Middle Ages texts were learned by heart and spread using oral means of\ncommunication from generation to generation. Adaptation of the art of prose and\npoems allowed keeping particular descriptions and compositions characteristic\nfor many literary genres. Taking into account such a specific construction of\nliterature composed in Latin, we can search for and indicate the probability\npatterns of familiar sources of specific narrative texts. Consideration of\nNatural Language Processing tools allowed us the transformation of textual\nobjects into numerical ones and then application of machine learning algorithms\nto extract information from the dataset. We carried out the task consisting of\nthe practical use of those concepts and observation to create a tool for\nanalyzing narrative texts basing on open-source databases. The tool focused on\ncreating specific search tools resources which could enable us detailed\nsearching throughout the text. The main objectives of the study take into\naccount finding similarities between sentences and between documents. Next, we\napplied machine learning algorithms on chosen texts to calculate specific\nfeatures of them (for instance authorship or centuries) and to recognize\nsources of anonymous texts with a certain percentage.\n</p>","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":null,"source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":{"contributors":[],"coverages":[],"creators":["<a href=\"http://arxiv.org/find/cs/1/au:+Bernardo_A/0/1/0/all/0/1\">Arianna Di Bernardo</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Poetto_S/0/1/0/all/0/1\">Simone Poetto</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Sillano_P/0/1/0/all/0/1\">Pietro Sillano</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Villata_B/0/1/0/all/0/1\">Beatrice Villata</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Sojka_W/0/1/0/all/0/1\">Weronika S&#xf3;jka</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Pietka_Danilewicz_Z/0/1/0/all/0/1\">Zofia Pi&#x119;tka-Danilewicz</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Pranke_P/0/1/0/all/0/1\">Piotr Pranke</a>"],"dates":[],"descriptions":[],"formats":[],"identifiers":[],"languages":[],"publishers":[],"relations":[],"rights":[],"sources":[],"subjects":[],"titles":[],"types":[]}},{"title":"Point-of-Interest Type Prediction using Text and Images. (arXiv:2109.00602v1 [cs.CL])","link":"http://arxiv.org/abs/2109.00602","description":"<p>Point-of-interest (POI) type prediction is the task of inferring the type of\na place from where a social media post was shared. Inferring a POI's type is\nuseful for studies in computational social science including sociolinguistics,\ngeosemiotics, and cultural geography, and has applications in geosocial\nnetworking technologies such as recommendation and visualization systems. Prior\nefforts in POI type prediction focus solely on text, without taking visual\ninformation into account. However in reality, the variety of modalities, as\nwell as their semiotic relationships with one another, shape communication and\ninteractions in social media. This paper presents a study on POI type\nprediction using multimodal information from text and images available at\nposting time. For that purpose, we enrich a currently available data set for\nPOI type prediction with the images that accompany the text messages. Our\nproposed method extracts relevant information from each modality to effectively\ncapture interactions between text and image achieving a macro F1 of 47.21\nacross eight categories significantly outperforming the state-of-the-art method\nfor POI type prediction based on text-only methods. Finally, we provide a\ndetailed analysis to shed light on cross-modal interactions and the limitations\nof our best performing model.\n</p>","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":null,"source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":{"contributors":[],"coverages":[],"creators":["<a href=\"http://arxiv.org/find/cs/1/au:+Villegas_D/0/1/0/all/0/1\">Danae S&#xe1;nchez Villegas</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Aletras_N/0/1/0/all/0/1\">Nikolaos Aletras</a>"],"dates":[],"descriptions":[],"formats":[],"identifiers":[],"languages":[],"publishers":[],"relations":[],"rights":[],"sources":[],"subjects":[],"titles":[],"types":[]}},{"title":"An unsupervised framework for tracing textual sources of moral change. (arXiv:2109.00608v1 [cs.CL])","link":"http://arxiv.org/abs/2109.00608","description":"<p>Morality plays an important role in social well-being, but people's moral\nperception is not stable and changes over time. Recent advances in natural\nlanguage processing have shown that text is an effective medium for informing\nmoral change, but no attempt has been made to quantify the origins of these\nchanges. We present a novel unsupervised framework for tracing textual sources\nof moral change toward entities through time. We characterize moral change with\nprobabilistic topical distributions and infer the source text that exerts\nprominent influence on the moral time course. We evaluate our framework on a\ndiverse set of data ranging from social media to news articles. We show that\nour framework not only captures fine-grained human moral judgments, but also\nidentifies coherent source topics of moral change triggered by historical\nevents. We apply our methodology to analyze the news in the COVID-19 pandemic\nand demonstrate its utility in identifying sources of moral change in\nhigh-impact and real-time social events.\n</p>","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":null,"source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":{"contributors":[],"coverages":[],"creators":["<a href=\"http://arxiv.org/find/cs/1/au:+Ramezani_A/0/1/0/all/0/1\">Aida Ramezani</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Zhu_Z/0/1/0/all/0/1\">Zining Zhu</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Rudzicz_F/0/1/0/all/0/1\">Frank Rudzicz</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Xu_Y/0/1/0/all/0/1\">Yang Xu</a>"],"dates":[],"descriptions":[],"formats":[],"identifiers":[],"languages":[],"publishers":[],"relations":[],"rights":[],"sources":[],"subjects":[],"titles":[],"types":[]}},{"title":"Algorithme de recherche approximative dans un dictionnaire fond\\'e sur une distance d'\\'edition d\\'efinie par blocs. (arXiv:2109.00624v1 [cs.CL])","link":"http://arxiv.org/abs/2109.00624","description":"<p>We propose an algorithm for approximative dictionary lookup, where altered\nstrings are matched against reference forms. The algorithm makes use of a\ndivergence function between strings -- broadly belonging to the family of edit\ndistances; it finds dictionary entries whose distance to the search string is\nbelow a certain threshold. The divergence function is not the classical edit\ndistance (DL distance); it is adaptable to a particular corpus, and is based on\nelementary alteration costs defined on character blocks, rather than on\nindividual characters.\n</p>\n<p>Nous proposons un algorithme de recherche approximative de cha\\^ines dans un\ndictionnaire \\`a partir de formes alt\\'er\\'ees. Cet algorithme est fond\\'e sur\nune fonction de divergence entre cha\\^ines~ -- une sorte de distance\nd'\\'edition: il recherche des entr\\'ees pour lesquelles la distance \\`a la\ncha\\^ine cherch\\'ee est inf\\'erieure \\`a un certain seuil. La fonction\nutilis\\'ee n'est pas la distance d'\\'edition classique (distance DL); elle est\nadapt\\'ee \\`a un corpus, et se fonde sur la prise en compte de co\\^uts\nd'alt\\'eration \\'el\\'ementaires d\\'efinis non pas sur des caract\\`eres, mais\nsur des sous-cha\\^ines (des blocs de caract\\`eres).\n</p>","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":null,"source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":{"contributors":[],"coverages":[],"creators":["<a href=\"http://arxiv.org/find/cs/1/au:+Vaillant_P/0/1/0/all/0/1\">Pascal Vaillant</a>"],"dates":[],"descriptions":[],"formats":[],"identifiers":[],"languages":[],"publishers":[],"relations":[],"rights":[],"sources":[],"subjects":[],"titles":[],"types":[]}},{"title":"Tree-constrained Pointer Generator for End-to-end Contextual Speech Recognition. (arXiv:2109.00627v1 [cs.CL])","link":"http://arxiv.org/abs/2109.00627","description":"<p>Contextual knowledge is important for real-world automatic speech recognition\n(ASR) applications. In this paper, a novel tree-constrained pointer generator\n(TCPGen) component is proposed that incorporates such knowledge as a list of\nbiasing words into both attention-based encoder-decoder and transducer\nend-to-end ASR models in a neural-symbolic way. TCPGen structures the biasing\nwords into an efficient prefix tree to serve as its symbolic input and creates\na neural shortcut between the tree and the final ASR output distribution to\nfacilitate recognising biasing words during decoding. Systems were trained and\nevaluated on the Librispeech corpus where biasing words were extracted at the\nscales of an utterance, a chapter, or a book to simulate different application\nscenarios. Experimental results showed that TCPGen consistently improved word\nerror rates (WERs) compared to the baselines, and in particular, achieved\nsignificant WER reductions on the biasing words. TCPGen is highly efficient: it\ncan handle 5,000 biasing words and distractors and only add a small overhead to\nmemory use and computation cost.\n</p>","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":null,"source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":{"contributors":[],"coverages":[],"creators":["<a href=\"http://arxiv.org/find/cs/1/au:+Sun_G/0/1/0/all/0/1\">Guangzhi Sun</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Zhang_C/0/1/0/all/0/1\">Chao Zhang</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Woodland_P/0/1/0/all/0/1\">Philip C. Woodland</a>"],"dates":[],"descriptions":[],"formats":[],"identifiers":[],"languages":[],"publishers":[],"relations":[],"rights":[],"sources":[],"subjects":[],"titles":[],"types":[]}},{"title":"An Ensemble Approach for Annotating Source Code Identifiers with Part-of-speech Tags. (arXiv:2109.00629v1 [cs.SE])","link":"http://arxiv.org/abs/2109.00629","description":"<p>This paper presents an ensemble part-of-speech tagging approach for source\ncode identifiers. Ensemble tagging is a technique that uses machine-learning\nand the output from multiple part-of-speech taggers to annotate natural\nlanguage text at a higher quality than the part-of-speech taggers are able to\nobtain independently. Our ensemble uses three state-of-the-art part-of-speech\ntaggers: SWUM, POSSE, and Stanford. We study the quality of the ensemble's\nannotations on five different types of identifier names: function, class,\nattribute, parameter, and declaration statement at the level of both individual\nwords and full identifier names. We also study and discuss the weaknesses of\nour tagger to promote the future amelioration of these problems through further\nresearch. Our results show that the ensemble achieves 75\\% accuracy at the\nidentifier level and 84-86\\% accuracy at the word level. This is an increase of\n+17\\% points at the identifier level from the closest independent\npart-of-speech tagger.\n</p>","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":null,"source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":{"contributors":[],"coverages":[],"creators":["<a href=\"http://arxiv.org/find/cs/1/au:+Newman_C/0/1/0/all/0/1\">Christian D. Newman</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Decker_M/0/1/0/all/0/1\">Michael J. Decker</a>, <a href=\"http://arxiv.org/find/cs/1/au:+AlSuhaibani_R/0/1/0/all/0/1\">Reem S. AlSuhaibani</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Peruma_A/0/1/0/all/0/1\">Anthony Peruma</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Mohapatra_S/0/1/0/all/0/1\">Satyajit Mohapatra</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Vishnoi_T/0/1/0/all/0/1\">Tejal Vishnoi</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Zampieri_M/0/1/0/all/0/1\">Marcos Zampieri</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Mkaouer_M/0/1/0/all/0/1\">Mohamed W. Mkaouer</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Sheldon_T/0/1/0/all/0/1\">Timothy J. Sheldon</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Hill_E/0/1/0/all/0/1\">Emily Hill</a>"],"dates":[],"descriptions":[],"formats":[],"identifiers":[],"languages":[],"publishers":[],"relations":[],"rights":[],"sources":[],"subjects":[],"titles":[],"types":[]}},{"title":"The VoicePrivacy 2020 Challenge: Results and findings. (arXiv:2109.00648v1 [cs.CL])","link":"http://arxiv.org/abs/2109.00648","description":"<p>This paper presents the results and analyses stemming from the first\nVoicePrivacy 2020 Challenge which focuses on developing anonymization solutions\nfor speech technology. We provide a systematic overview of the challenge design\nwith an analysis of submitted systems and evaluation results. In particular, we\ndescribe the voice anonymization task and datasets used for system development\nand evaluation. Also, we present different attack models and the associated\nobjective and subjective evaluation metrics. We introduce two anonymization\nbaselines and provide a summary description of the anonymization systems\ndeveloped by the challenge participants. We report objective and subjective\nevaluation results for baseline and submitted systems. In addition, we present\nexperimental results for alternative privacy metrics and attack models\ndeveloped as a part of the post-evaluation analysis. Finally, we summarize our\ninsights and observations that will influence the design of the next\nVoicePrivacy challenge edition and some directions for future voice\nanonymization research.\n</p>","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":null,"source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":{"contributors":[],"coverages":[],"creators":["<a href=\"http://arxiv.org/find/cs/1/au:+Tomashenko_N/0/1/0/all/0/1\">Natalia Tomashenko</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Wang_X/0/1/0/all/0/1\">Xin Wang</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Vincent_E/0/1/0/all/0/1\">Emmanuel Vincent</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Patino_J/0/1/0/all/0/1\">Jose Patino</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Srivastava_B/0/1/0/all/0/1\">Brij Mohan Lal Srivastava</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Noe_P/0/1/0/all/0/1\">Paul-Gauthier No&#xe9;</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Nautsch_A/0/1/0/all/0/1\">Andreas Nautsch</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Evans_N/0/1/0/all/0/1\">Nicholas Evans</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Yamagishi_J/0/1/0/all/0/1\">Junichi Yamagishi</a>, <a href=\"http://arxiv.org/find/cs/1/au:+OBrien_B/0/1/0/all/0/1\">Benjamin O&#x27;Brien</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Chanclu_A/0/1/0/all/0/1\">Ana&#xef;s Chanclu</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Bonastre_J/0/1/0/all/0/1\">Jean-Fran&#xe7;ois Bonastre</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Todisco_M/0/1/0/all/0/1\">Massimiliano Todisco</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Maouche_M/0/1/0/all/0/1\">Mohamed Maouche</a>"],"dates":[],"descriptions":[],"formats":[],"identifiers":[],"languages":[],"publishers":[],"relations":[],"rights":[],"sources":[],"subjects":[],"titles":[],"types":[]}},{"title":"Towards Making the Most of Dialogue Characteristics for Neural Chat Translation. (arXiv:2109.00668v1 [cs.CL])","link":"http://arxiv.org/abs/2109.00668","description":"<p>Neural Chat Translation (NCT) aims to translate conversational text between\nspeakers of different languages. Despite the promising performance of\nsentence-level and context-aware neural machine translation models, there still\nremain limitations in current NCT models because the inherent dialogue\ncharacteristics of chat, such as dialogue coherence and speaker personality,\nare neglected. In this paper, we propose to promote the chat translation by\nintroducing the modeling of dialogue characteristics into the NCT model. To\nthis end, we design four auxiliary tasks including monolingual response\ngeneration, cross-lingual response generation, next utterance discrimination,\nand speaker identification. Together with the main chat translation task, we\noptimize the NCT model through the training objectives of all these tasks. By\nthis means, the NCT model can be enhanced by capturing the inherent dialogue\ncharacteristics, thus generating more coherent and speaker-relevant\ntranslations. Comprehensive experiments on four language directions\n(English-German and English-Chinese) verify the effectiveness and superiority\nof the proposed approach.\n</p>","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":null,"source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":{"contributors":[],"coverages":[],"creators":["<a href=\"http://arxiv.org/find/cs/1/au:+Liang_Y/0/1/0/all/0/1\">Yunlong Liang</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Zhou_C/0/1/0/all/0/1\">Chulun Zhou</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Meng_F/0/1/0/all/0/1\">Fandong Meng</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Xu_J/0/1/0/all/0/1\">Jinan Xu</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Chen_Y/0/1/0/all/0/1\">Yufeng Chen</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Su_J/0/1/0/all/0/1\">Jinsong Su</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Zhou_J/0/1/0/all/0/1\">Jie Zhou</a>"],"dates":[],"descriptions":[],"formats":[],"identifiers":[],"languages":[],"publishers":[],"relations":[],"rights":[],"sources":[],"subjects":[],"titles":[],"types":[]}},{"title":"An Empirical Exploration in Quality Filtering of Text Data. (arXiv:2109.00698v1 [cs.CL])","link":"http://arxiv.org/abs/2109.00698","description":"<p>While conventional wisdom suggests that more aggressively filtering data from\nlow-quality sources like Common Crawl always monotonically improves the quality\nof training data, we find that aggressive filtering can in fact lead to a\ndecrease in model quality on a wide array of downstream tasks for a GPT-like\nlanguage model. We speculate that this is because optimizing sufficiently\nstrongly for a proxy metric harms performance on the true objective, suggesting\na need for more robust filtering objectives when attempting to filter more\naggressively. We hope this work leads to detailed analysis of the effects of\ndataset filtering design choices on downstream model performance in future\nwork.\n</p>","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":null,"source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":{"contributors":[],"coverages":[],"creators":["<a href=\"http://arxiv.org/find/cs/1/au:+Gao_L/0/1/0/all/0/1\">Leo Gao</a>"],"dates":[],"descriptions":[],"formats":[],"identifiers":[],"languages":[],"publishers":[],"relations":[],"rights":[],"sources":[],"subjects":[],"titles":[],"types":[]}},{"title":"ShopTalk: A System for Conversational Faceted Search. (arXiv:2109.00702v1 [cs.CL])","link":"http://arxiv.org/abs/2109.00702","description":"<p>We present ShopTalk, a multi-turn conversational faceted search system for\nshopping that is designed to handle large and complex schemas that are beyond\nthe scope of state of the art slot-filling systems. ShopTalk decouples dialog\nmanagement from fulfillment, thereby allowing the dialog understanding system\nto be domain-agnostic and not tied to the particular shopping application. The\ndialog understanding system consists of a deep-learned Contextual Language\nUnderstanding module, which interprets user utterances, and a primarily\nrules-based Dialog-State Tracker (DST), which updates the dialog state and\nformulates search requests intended for the fulfillment engine. The interface\nbetween the two modules consists of a minimal set of domain-agnostic \"intent\noperators,\" which instruct the DST on how to update the dialog state. ShopTalk\nwas deployed in 2020 on the Google Assistant for Shopping searches.\n</p>","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":null,"source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":{"contributors":[],"coverages":[],"creators":["<a href=\"http://arxiv.org/find/cs/1/au:+Manku_G/0/1/0/all/0/1\">Gurmeet Manku</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Lee_Thorp_J/0/1/0/all/0/1\">James Lee-Thorp</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Kanagal_B/0/1/0/all/0/1\">Bhargav Kanagal</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Ainslie_J/0/1/0/all/0/1\">Joshua Ainslie</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Feng_J/0/1/0/all/0/1\">Jingchen Feng</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Pearson_Z/0/1/0/all/0/1\">Zach Pearson</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Anjorin_E/0/1/0/all/0/1\">Ebenezer Anjorin</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Gandhe_S/0/1/0/all/0/1\">Sudeep Gandhe</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Eckstein_I/0/1/0/all/0/1\">Ilya Eckstein</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Rosswog_J/0/1/0/all/0/1\">Jim Rosswog</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Sanghai_S/0/1/0/all/0/1\">Sumit Sanghai</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Pohl_M/0/1/0/all/0/1\">Michael Pohl</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Adams_L/0/1/0/all/0/1\">Larry Adams</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Sivakumar_D/0/1/0/all/0/1\">D. Sivakumar</a>"],"dates":[],"descriptions":[],"formats":[],"identifiers":[],"languages":[],"publishers":[],"relations":[],"rights":[],"sources":[],"subjects":[],"titles":[],"types":[]}},{"title":"LightNER: A Lightweight Generative Framework with Prompt-guided Attention for Low-resource NER. (arXiv:2109.00720v1 [cs.CL])","link":"http://arxiv.org/abs/2109.00720","description":"<p>NER in low-resource languages or domains suffers from inadequate training\ndata. Existing transfer learning approaches for low-resource NER usually have\nthe challenge that the target domain has different label sets compared with a\nresource-rich source domain, which can be concluded as class transfer and\ndomain transfer problems. In this paper, we propose a lightweight generative\nframework with prompt-guided attention for low-resource NER (LightNER) to\naddress these issues. Concretely, instead of tackling the problem by training\nlabel-specific discriminative classifiers, we convert sequence labeling to\ngenerate the entity pointer index sequence and entity categories without any\nlabel-specific classifiers, which can address the class transfer issue. We\nfurther propose prompt-guided attention by incorporating continuous prompts\ninto the self-attention layer to re-modulate the attention and adapt\npre-trained weights. Note that we only tune those continuous prompts with the\nwhole parameter of the pre-trained language model fixed, thus, making our\napproach lightweight and flexible for low-resource scenarios and can better\ntransfer knowledge across domains. Experimental results show that by tuning\nonly 0.16% of the parameters, LightNER can obtain comparable performance in the\nstandard setting and outperform standard sequence labeling and prototype-based\nmethods in low-resource settings.\n</p>","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":null,"source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":{"contributors":[],"coverages":[],"creators":["<a href=\"http://arxiv.org/find/cs/1/au:+Chen_X/0/1/0/all/0/1\">Xiang Chen</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Zhang_N/0/1/0/all/0/1\">Ningyu Zhang</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Li_L/0/1/0/all/0/1\">Lei Li</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Xie_X/0/1/0/all/0/1\">Xin Xie</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Deng_S/0/1/0/all/0/1\">Shumin Deng</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Tan_C/0/1/0/all/0/1\">Chuanqi Tan</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Huang_F/0/1/0/all/0/1\">Fei Huang</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Si_L/0/1/0/all/0/1\">Luo Si</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Chen_H/0/1/0/all/0/1\">Huajun Chen</a>"],"dates":[],"descriptions":[],"formats":[],"identifiers":[],"languages":[],"publishers":[],"relations":[],"rights":[],"sources":[],"subjects":[],"titles":[],"types":[]}},{"title":"Causal Inference in Natural Language Processing: Estimation, Prediction, Interpretation and Beyond. (arXiv:2109.00725v1 [cs.CL])","link":"http://arxiv.org/abs/2109.00725","description":"<p>A fundamental goal of scientific research is to learn about causal\nrelationships. However, despite its critical role in the life and social\nsciences, causality has not had the same importance in Natural Language\nProcessing (NLP), which has traditionally placed more emphasis on predictive\ntasks. This distinction is beginning to fade, with an emerging area of\ninterdisciplinary research at the convergence of causal inference and language\nprocessing. Still, research on causality in NLP remains scattered across\ndomains without unified definitions, benchmark datasets and clear articulations\nof the remaining challenges. In this survey, we consolidate research across\nacademic areas and situate it in the broader NLP landscape. We introduce the\nstatistical challenge of estimating causal effects, encompassing settings where\ntext is used as an outcome, treatment, or as a means to address confounding. In\naddition, we explore potential uses of causal inference to improve the\nperformance, robustness, fairness, and interpretability of NLP models. We thus\nprovide a unified overview of causal inference for the computational\nlinguistics community.\n</p>","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":null,"source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":{"contributors":[],"coverages":[],"creators":["<a href=\"http://arxiv.org/find/cs/1/au:+Feder_A/0/1/0/all/0/1\">Amir Feder</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Keith_K/0/1/0/all/0/1\">Katherine A. Keith</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Manzoor_E/0/1/0/all/0/1\">Emaad Manzoor</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Pryzant_R/0/1/0/all/0/1\">Reid Pryzant</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Sridhar_D/0/1/0/all/0/1\">Dhanya Sridhar</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Wood_Doughty_Z/0/1/0/all/0/1\">Zach Wood-Doughty</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Eisenstein_J/0/1/0/all/0/1\">Jacob Eisenstein</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Grimmer_J/0/1/0/all/0/1\">Justin Grimmer</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Reichart_R/0/1/0/all/0/1\">Roi Reichart</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Roberts_M/0/1/0/all/0/1\">Margaret E. Roberts</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Stewart_B/0/1/0/all/0/1\">Brandon M. Stewart</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Veitch_V/0/1/0/all/0/1\">Victor Veitch</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Yang_D/0/1/0/all/0/1\">Diyi Yang</a>"],"dates":[],"descriptions":[],"formats":[],"identifiers":[],"languages":[],"publishers":[],"relations":[],"rights":[],"sources":[],"subjects":[],"titles":[],"types":[]}},{"title":"ConQX: Semantic Expansion of Spoken Queries for Intent Detection based on Conditioned Text Generation. (arXiv:2109.00729v1 [cs.CL])","link":"http://arxiv.org/abs/2109.00729","description":"<p>Intent detection of spoken queries is a challenging task due to their noisy\nstructure and short length. To provide additional information regarding the\nquery and enhance the performance of intent detection, we propose a method for\nsemantic expansion of spoken queries, called ConQX, which utilizes the text\ngeneration ability of an auto-regressive language model, GPT-2. To avoid\noff-topic text generation, we condition the input query to a structured context\nwith prompt mining. We then apply zero-shot, one-shot, and few-shot learning.\nWe lastly use the expanded queries to fine-tune BERT and RoBERTa for intent\ndetection. The experimental results show that the performance of intent\ndetection can be improved by our semantic expansion method.\n</p>","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":null,"source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":{"contributors":[],"coverages":[],"creators":["<a href=\"http://arxiv.org/find/cs/1/au:+Yilmaz_E/0/1/0/all/0/1\">Eyup Halit Yilmaz</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Toraman_C/0/1/0/all/0/1\">Cagri Toraman</a>"],"dates":[],"descriptions":[],"formats":[],"identifiers":[],"languages":[],"publishers":[],"relations":[],"rights":[],"sources":[],"subjects":[],"titles":[],"types":[]}},{"title":"Neural News Recommendation with Collaborative News Encoding and Structural User Encoding. (arXiv:2109.00750v1 [cs.CL])","link":"http://arxiv.org/abs/2109.00750","description":"<p>Automatic news recommendation has gained much attention from the academic\ncommunity and industry. Recent studies reveal that the key to this task lies\nwithin the effective representation learning of both news and users. Existing\nworks typically encode news title and content separately while neglecting their\nsemantic interaction, which is inadequate for news text comprehension. Besides,\nprevious models encode user browsing history without leveraging the structural\ncorrelation of user browsed news to reflect user interests explicitly. In this\nwork, we propose a news recommendation framework consisting of collaborative\nnews encoding (CNE) and structural user encoding (SUE) to enhance news and user\nrepresentation learning. CNE equipped with bidirectional LSTMs encodes news\ntitle and content collaboratively with cross-selection and cross-attention\nmodules to learn semantic-interactive news representations. SUE utilizes graph\nconvolutional networks to extract cluster-structural features of user history,\nfollowed by intra-cluster and inter-cluster attention modules to learn\nhierarchical user interest representations. Experiment results on the MIND\ndataset validate the effectiveness of our model to improve the performance of\nnews recommendation. Our code is released at\nhttps://github.com/Veason-silverbullet/NNR.\n</p>","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":null,"source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":{"contributors":[],"coverages":[],"creators":["<a href=\"http://arxiv.org/find/cs/1/au:+Mao_Z/0/1/0/all/0/1\">Zhiming Mao</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Zeng_X/0/1/0/all/0/1\">Xingshan Zeng</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Wong_K/0/1/0/all/0/1\">Kam-Fai Wong</a>"],"dates":[],"descriptions":[],"formats":[],"identifiers":[],"languages":[],"publishers":[],"relations":[],"rights":[],"sources":[],"subjects":[],"titles":[],"types":[]}},{"title":"MWPToolkit: An Open-Source Framework for Deep Learning-Based Math Word Problem Solvers. (arXiv:2109.00799v1 [cs.CL])","link":"http://arxiv.org/abs/2109.00799","description":"<p>Developing automatic Math Word Problem (MWP) solvers has been an interest of\nNLP researchers since the 1960s. Over the last few years, there are a growing\nnumber of datasets and deep learning-based methods proposed for effectively\nsolving MWPs. However, most existing methods are benchmarked soly on one or two\ndatasets, varying in different configurations, which leads to a lack of\nunified, standardized, fair, and comprehensive comparison between methods. This\npaper presents MWPToolkit, the first open-source framework for solving MWPs. In\nMWPToolkit, we decompose the procedure of existing MWP solvers into multiple\ncore components and decouple their models into highly reusable modules. We also\nprovide a hyper-parameter search function to boost the performance. In total,\nwe implement and compare 17 MWP solvers on 4 widely-used single equation\ngeneration benchmarks and 2 multiple equations generation benchmarks. These\nfeatures enable our MWPToolkit to be suitable for researchers to reproduce\nadvanced baseline models and develop new MWP solvers quickly. Code and\ndocuments are available at https://github.com/LYH-YF/MWPToolkit.\n</p>","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":null,"source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":{"contributors":[],"coverages":[],"creators":["<a href=\"http://arxiv.org/find/cs/1/au:+Lan_Y/0/1/0/all/0/1\">Yihuai Lan</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Wang_L/0/1/0/all/0/1\">Lei Wang</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Zhang_Q/0/1/0/all/0/1\">Qiyuan Zhang</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Lan_Y/0/1/0/all/0/1\">Yunshi Lan</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Dai_B/0/1/0/all/0/1\">Bing Tian Dai</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Wang_Y/0/1/0/all/0/1\">Yan Wang</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Zhang_D/0/1/0/all/0/1\">Dongxiang Zhang</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Lim_E/0/1/0/all/0/1\">Ee-Peng Lim</a>"],"dates":[],"descriptions":[],"formats":[],"identifiers":[],"languages":[],"publishers":[],"relations":[],"rights":[],"sources":[],"subjects":[],"titles":[],"types":[]}},{"title":"Imposing Relation Structure in Language-Model EmbeddingsUsing Contrastive Learning. (arXiv:2109.00840v1 [cs.CL])","link":"http://arxiv.org/abs/2109.00840","description":"<p>Though language model text embeddings have revolutionized NLP research, their\nability to capture high-level semantic information, such as relations between\nentities in text, is limited. In this paper, we propose a novel contrastive\nlearning framework that trains sentence embeddings to encode the relations in a\ngraph structure. Given a sentence (unstructured text) and its graph, we use\ncontrastive learning to impose relation-related structure on the token-level\nrepresentations of the sentence obtained with a CharacterBERT (El Boukkouri et\nal.,2020) model. The resulting relation-aware sentence embeddings achieve\nstate-of-the-art results on the relation extraction task using only a simple\nKNN classifier, thereby demonstrating the success of the proposed method.\nAdditional visualization by a tSNE analysis shows the effectiveness of the\nlearned representation space compared to baselines. Furthermore, we show that\nwe can learn a different space for named entity recognition, again using a\ncontrastive learning objective, and demonstrate how to successfully combine\nboth representation spaces in an entity-relation task.\n</p>","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":null,"source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":{"contributors":[],"coverages":[],"creators":["<a href=\"http://arxiv.org/find/cs/1/au:+Theodoropoulos_C/0/1/0/all/0/1\">Christos Theodoropoulos</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Henderson_J/0/1/0/all/0/1\">James Henderson</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Coman_A/0/1/0/all/0/1\">Andrei C. Coman</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Moens_M/0/1/0/all/0/1\">Marie-Francine Moens</a>"],"dates":[],"descriptions":[],"formats":[],"identifiers":[],"languages":[],"publishers":[],"relations":[],"rights":[],"sources":[],"subjects":[],"titles":[],"types":[]}},{"title":"CodeT5: Identifier-aware Unified Pre-trained Encoder-Decoder Models for Code Understanding and Generation. (arXiv:2109.00859v1 [cs.CL])","link":"http://arxiv.org/abs/2109.00859","description":"<p>Pre-trained models for Natural Languages (NL) like BERT and GPT have been\nrecently shown to transfer well to Programming Languages (PL) and largely\nbenefit a broad set of code-related tasks. Despite their success, most current\nmethods either rely on an encoder-only (or decoder-only) pre-training that is\nsuboptimal for generation (resp. understanding) tasks or process the code\nsnippet in the same way as NL, neglecting the special characteristics of PL\nsuch as token types. We present CodeT5, a unified pre-trained encoder-decoder\nTransformer model that better leverages the code semantics conveyed from the\ndeveloper-assigned identifiers. Our model employs a unified framework to\nseamlessly support both code understanding and generation tasks and allows for\nmulti-task learning. Besides, we propose a novel identifier-aware pre-training\ntask that enables the model to distinguish which code tokens are identifiers\nand to recover them when they are masked. Furthermore, we propose to exploit\nthe user-written code comments with a bimodal dual generation task for better\nNL-PL alignment. Comprehensive experiments show that CodeT5 significantly\noutperforms prior methods on understanding tasks such as code defect detection\nand clone detection, and generation tasks across various directions including\nPL-NL, NL-PL, and PL-PL. Further analysis reveals that our model can better\ncapture semantic information from code. Our code and pre-trained models are\nreleased at https: //github.com/salesforce/CodeT5 .\n</p>","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":null,"source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":{"contributors":[],"coverages":[],"creators":["<a href=\"http://arxiv.org/find/cs/1/au:+Wang_Y/0/1/0/all/0/1\">Yue Wang</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Wang_W/0/1/0/all/0/1\">Weishi Wang</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Joty_S/0/1/0/all/0/1\">Shafiq Joty</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Hoi_S/0/1/0/all/0/1\">Steven C.H. Hoi</a>"],"dates":[],"descriptions":[],"formats":[],"identifiers":[],"languages":[],"publishers":[],"relations":[],"rights":[],"sources":[],"subjects":[],"titles":[],"types":[]}},{"title":"Knowledge Perceived Multi-modal Pretraining in E-commerce. (arXiv:2109.00895v1 [cs.CV])","link":"http://arxiv.org/abs/2109.00895","description":"<p>In this paper, we address multi-modal pretraining of product data in the\nfield of E-commerce. Current multi-modal pretraining methods proposed for image\nand text modalities lack robustness in the face of modality-missing and\nmodality-noise, which are two pervasive problems of multi-modal product data in\nreal E-commerce scenarios. To this end, we propose a novel method, K3M, which\nintroduces knowledge modality in multi-modal pretraining to correct the noise\nand supplement the missing of image and text modalities. The modal-encoding\nlayer extracts the features of each modality. The modal-interaction layer is\ncapable of effectively modeling the interaction of multiple modalities, where\nan initial-interactive feature fusion model is designed to maintain the\nindependence of image modality and text modality, and a structure aggregation\nmodule is designed to fuse the information of image, text, and knowledge\nmodalities. We pretrain K3M with three pretraining tasks, including masked\nobject modeling (MOM), masked language modeling (MLM), and link prediction\nmodeling (LPM). Experimental results on a real-world E-commerce dataset and a\nseries of product-based downstream tasks demonstrate that K3M achieves\nsignificant improvements in performances than the baseline and state-of-the-art\nmethods when modality-noise or modality-missing exists.\n</p>","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":null,"source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":{"contributors":[],"coverages":[],"creators":["<a href=\"http://arxiv.org/find/cs/1/au:+Zhu_Y/0/1/0/all/0/1\">Yushan Zhu</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Tou_H/0/1/0/all/0/1\">Huaixiao Tou</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Zhang_W/0/1/0/all/0/1\">Wen Zhang</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Ye_G/0/1/0/all/0/1\">Ganqiang Ye</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Chen_H/0/1/0/all/0/1\">Hui Chen</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Zhang_N/0/1/0/all/0/1\">Ningyu Zhang</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Chen_H/0/1/0/all/0/1\">Huajun Chen</a>"],"dates":[],"descriptions":[],"formats":[],"identifiers":[],"languages":[],"publishers":[],"relations":[],"rights":[],"sources":[],"subjects":[],"titles":[],"types":[]}},{"title":"MultiEURLEX - A multi-lingual and multi-label legal document classification dataset for zero-shot cross-lingual transfer. (arXiv:2109.00904v1 [cs.CL])","link":"http://arxiv.org/abs/2109.00904","description":"<p>We introduce MULTI-EURLEX, a new multilingual dataset for topic\nclassification of legal documents. The dataset comprises 65k European Union\n(EU) laws, officially translated in 23 languages, annotated with multiple\nlabels from the EUROVOC taxonomy. We highlight the effect of temporal concept\ndrift and the importance of chronological, instead of random splits. We use the\ndataset as a testbed for zero-shot cross-lingual transfer, where we exploit\nannotated training documents in one language (source) to classify documents in\nanother language (target). We find that fine-tuning a multilingually pretrained\nmodel (XLM-ROBERTA, MT5) in a single source language leads to catastrophic\nforgetting of multilingual knowledge and, consequently, poor zero-shot transfer\nto other languages. Adaptation strategies, namely partial fine-tuning,\nadapters, BITFIT, LNFIT, originally proposed to accelerate fine-tuning for new\nend-tasks, help retain multilingual knowledge from pretraining, substantially\nimproving zero-shot cross-lingual transfer, but their impact also depends on\nthe pretrained model used and the size of the label set.\n</p>","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":null,"source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":{"contributors":[],"coverages":[],"creators":["<a href=\"http://arxiv.org/find/cs/1/au:+Chalkidis_I/0/1/0/all/0/1\">Ilias Chalkidis</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Fergadiotis_M/0/1/0/all/0/1\">Manos Fergadiotis</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Androutsopoulos_I/0/1/0/all/0/1\">Ion Androutsopoulos</a>"],"dates":[],"descriptions":[],"formats":[],"identifiers":[],"languages":[],"publishers":[],"relations":[],"rights":[],"sources":[],"subjects":[],"titles":[],"types":[]}},{"title":"Coarse-To-Fine And Cross-Lingual ASR Transfer. (arXiv:2109.00916v1 [cs.CL])","link":"http://arxiv.org/abs/2109.00916","description":"<p>End-to-end neural automatic speech recognition systems achieved recently\nstate-of-the-art results, but they require large datasets and extensive\ncomputing resources. Transfer learning has been proposed to overcome these\ndifficulties even across languages, e.g., German ASR trained from an English\nmodel. We experiment with much less related languages, reusing an English model\nfor Czech ASR. To simplify the transfer, we propose to use an intermediate\nalphabet, Czech without accents, and document that it is a highly effective\nstrategy. The technique is also useful on Czech data alone, in the style of\ncoarse-to-fine training. We achieve substantial eductions in training time as\nwell as word error rate (WER).\n</p>","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":null,"source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":{"contributors":[],"coverages":[],"creators":["<a href=\"http://arxiv.org/find/cs/1/au:+Polak_P/0/1/0/all/0/1\">Peter Pol&#xe1;k</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Bojar_O/0/1/0/all/0/1\">Ond&#x159;ej Bojar</a>"],"dates":[],"descriptions":[],"formats":[],"identifiers":[],"languages":[],"publishers":[],"relations":[],"rights":[],"sources":[],"subjects":[],"titles":[],"types":[]}},{"title":"Improving Multimodal fusion via Mutual Dependency Maximisation. (arXiv:2109.00922v1 [cs.LG])","link":"http://arxiv.org/abs/2109.00922","description":"<p>Multimodal sentiment analysis is a trending area of research, and the\nmultimodal fusion is one of its most active topic. Acknowledging humans\ncommunicate through a variety of channels (i.e visual, acoustic, linguistic),\nmultimodal systems aim at integrating different unimodal representations into a\nsynthetic one. So far, a consequent effort has been made on developing complex\narchitectures allowing the fusion of these modalities. However, such systems\nare mainly trained by minimising simple losses such as $L_1$ or cross-entropy.\nIn this work, we investigate unexplored penalties and propose a set of new\nobjectives that measure the dependency between modalities. We demonstrate that\nour new penalties lead to a consistent improvement (up to $4.3$ on accuracy)\nacross a large variety of state-of-the-art models on two well-known sentiment\nanalysis datasets: \\texttt{CMU-MOSI} and \\texttt{CMU-MOSEI}. Our method not\nonly achieves a new SOTA on both datasets but also produces representations\nthat are more robust to modality drops. Finally, a by-product of our methods\nincludes a statistical network which can be used to interpret the high\ndimensional representations learnt by the model.\n</p>","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":null,"source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":{"contributors":[],"coverages":[],"creators":["<a href=\"http://arxiv.org/find/cs/1/au:+Colombo_P/0/1/0/all/0/1\">Pierre Colombo</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Chapuis_E/0/1/0/all/0/1\">Emile Chapuis</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Labeau_M/0/1/0/all/0/1\">Matthieu Labeau</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Clavel_C/0/1/0/all/0/1\">Chloe Clavel</a>"],"dates":[],"descriptions":[],"formats":[],"identifiers":[],"languages":[],"publishers":[],"relations":[],"rights":[],"sources":[],"subjects":[],"titles":[],"types":[]}},{"title":"Speaker-Conditioned Hierarchical Modeling for Automated Speech Scoring. (arXiv:2109.00928v1 [eess.AS])","link":"http://arxiv.org/abs/2109.00928","description":"<p>Automatic Speech Scoring (ASS) is the computer-assisted evaluation of a\ncandidate's speaking proficiency in a language. ASS systems face many\nchallenges like open grammar, variable pronunciations, and unstructured or\nsemi-structured content. Recent deep learning approaches have shown some\npromise in this domain. However, most of these approaches focus on extracting\nfeatures from a single audio, making them suffer from the lack of\nspeaker-specific context required to model such a complex task. We propose a\nnovel deep learning technique for non-native ASS, called speaker-conditioned\nhierarchical modeling. In our technique, we take advantage of the fact that\noral proficiency tests rate multiple responses for a candidate. We extract\ncontext vectors from these responses and feed them as additional\nspeaker-specific context to our network to score a particular response. We\ncompare our technique with strong baselines and find that such modeling\nimproves the model's average performance by 6.92% (maximum = 12.86%, minimum =\n4.51%). We further show both quantitative and qualitative insights into the\nimportance of this additional context in solving the problem of ASS.\n</p>","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":null,"source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":{"contributors":[],"coverages":[],"creators":["<a href=\"http://arxiv.org/find/eess/1/au:+Singla_Y/0/1/0/all/0/1\">Yaman Kumar Singla</a>, <a href=\"http://arxiv.org/find/eess/1/au:+Gupta_A/0/1/0/all/0/1\">Avykat Gupta</a>, <a href=\"http://arxiv.org/find/eess/1/au:+Bagga_S/0/1/0/all/0/1\">Shaurya Bagga</a>, <a href=\"http://arxiv.org/find/eess/1/au:+Chen_C/0/1/0/all/0/1\">Changyou Chen</a>, <a href=\"http://arxiv.org/find/eess/1/au:+Krishnamurthy_B/0/1/0/all/0/1\">Balaji Krishnamurthy</a>, <a href=\"http://arxiv.org/find/eess/1/au:+Shah_R/0/1/0/all/0/1\">Rajiv Ratn Shah</a>"],"dates":[],"descriptions":[],"formats":[],"identifiers":[],"languages":[],"publishers":[],"relations":[],"rights":[],"sources":[],"subjects":[],"titles":[],"types":[]}},{"title":"Coordinating Narratives and the Capitol Riots on Parler. (arXiv:2109.00945v1 [cs.SI])","link":"http://arxiv.org/abs/2109.00945","description":"<p>Coordinated disinformation campaigns are used to influence social media\nusers, potentially leading to offline violence. In this study, we introduce a\ngeneral methodology to uncover coordinated messaging through analysis of user\nparleys on Parler. The proposed method constructs a user-to-user coordination\nnetwork graph induced by a user-to-text graph and a text-to-text similarity\ngraph. The text-to-text graph is constructed based on the textual similarity of\nParler posts. We study three influential groups of users in the 6 January 2020\nCapitol riots and detect networks of coordinated user clusters that are all\nposting similar textual content in support of different disinformation\nnarratives related to the U.S. 2020 elections.\n</p>","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":null,"source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":{"contributors":[],"coverages":[],"creators":["<a href=\"http://arxiv.org/find/cs/1/au:+Ng_L/0/1/0/all/0/1\">Lynnette Hui Xian Ng</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Cruickshank_I/0/1/0/all/0/1\">Iain Cruickshank</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Carley_K/0/1/0/all/0/1\">Kathleen M. Carley</a>"],"dates":[],"descriptions":[],"formats":[],"identifiers":[],"languages":[],"publishers":[],"relations":[],"rights":[],"sources":[],"subjects":[],"titles":[],"types":[]}},{"title":"LegaLMFiT: Efficient Short Legal Text Classification with LSTM Language Model Pre-Training. (arXiv:2109.00993v1 [cs.CL])","link":"http://arxiv.org/abs/2109.00993","description":"<p>Large Transformer-based language models such as BERT have led to broad\nperformance improvements on many NLP tasks. Domain-specific variants of these\nmodels have demonstrated excellent performance on a variety of specialised\ntasks. In legal NLP, BERT-based models have led to new state-of-the-art results\non multiple tasks. The exploration of these models has demonstrated the\nimportance of capturing the specificity of the legal language and its\nvocabulary. However, such approaches suffer from high computational costs,\nleading to a higher ecological impact and lower accessibility. Our findings,\nfocusing on English language legal text, show that lightweight LSTM-based\nLanguage Models are able to capture enough information from a small legal text\npretraining corpus and achieve excellent performance on short legal text\nclassification tasks. This is achieved with a significantly reduced\ncomputational overhead compared to BERT-based models. However, our method also\nshows degraded performance on a more complex task, multi-label classification\nof longer documents, highlighting the limitations of this lightweight approach.\n</p>","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":null,"source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":{"contributors":[],"coverages":[],"creators":["<a href=\"http://arxiv.org/find/cs/1/au:+Clavie_B/0/1/0/all/0/1\">Benjamin Clavi&#xe9;</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Gheewala_A/0/1/0/all/0/1\">Akshita Gheewala</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Briton_P/0/1/0/all/0/1\">Paul Briton</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Alphonsus_M/0/1/0/all/0/1\">Marc Alphonsus</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Labiyaad_R/0/1/0/all/0/1\">Rym Labiyaad</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Piccoli_F/0/1/0/all/0/1\">Francesco Piccoli</a>"],"dates":[],"descriptions":[],"formats":[],"identifiers":[],"languages":[],"publishers":[],"relations":[],"rights":[],"sources":[],"subjects":[],"titles":[],"types":[]}},{"title":"TravelBERT: Pre-training Language Model Incorporating Domain-specific Heterogeneous Knowledge into A Unified Representation. (arXiv:2109.01048v1 [cs.CL])","link":"http://arxiv.org/abs/2109.01048","description":"<p>Existing technologies expand BERT from different perspectives, e.g. designing\ndifferent pre-training tasks, different semantic granularities and different\nmodel architectures. Few models consider expanding BERT from different text\nformats. In this paper, we propose a heterogeneous knowledge language model\n(HKLM), a unified pre-trained language model (PLM) for all forms of text,\nincluding unstructured text, semi-structured text and well-structured text. To\ncapture the corresponding relations among these multi-format knowledge, our\napproach uses masked language model objective to learn word knowledge, uses\ntriple classification objective and title matching objective to learn entity\nknowledge and topic knowledge respectively. To obtain the aforementioned\nmulti-format text, we construct a corpus in the tourism domain and conduct\nexperiments on 5 tourism NLP datasets. The results show that our approach\noutperforms the pre-training of plain text using only 1/4 of the data. The\ncode, datasets, corpus and knowledge graph will be released.\n</p>","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":null,"source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":{"contributors":[],"coverages":[],"creators":["<a href=\"http://arxiv.org/find/cs/1/au:+Zhu_H/0/1/0/all/0/1\">Hongyin Zhu</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Peng_H/0/1/0/all/0/1\">Hao Peng</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Lv_Z/0/1/0/all/0/1\">Zhiheng Lv</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Hou_L/0/1/0/all/0/1\">Lei Hou</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Li_J/0/1/0/all/0/1\">Juanzi Li</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Xiao_J/0/1/0/all/0/1\">Jinghui Xiao</a>"],"dates":[],"descriptions":[],"formats":[],"identifiers":[],"languages":[],"publishers":[],"relations":[],"rights":[],"sources":[],"subjects":[],"titles":[],"types":[]}},{"title":"Skim-Attention: Learning to Focus via Document Layout. (arXiv:2109.01078v1 [cs.CL])","link":"http://arxiv.org/abs/2109.01078","description":"<p>Transformer-based pre-training techniques of text and layout have proven\neffective in a number of document understanding tasks. Despite this success,\nmultimodal pre-training models suffer from very high computational and memory\ncosts. Motivated by human reading strategies, this paper presents\nSkim-Attention, a new attention mechanism that takes advantage of the structure\nof the document and its layout. Skim-Attention only attends to the\n2-dimensional position of the words in a document. Our experiments show that\nSkim-Attention obtains a lower perplexity than prior works, while being more\ncomputationally efficient. Skim-Attention can be further combined with\nlong-range Transformers to efficiently process long documents. We also show how\nSkim-Attention can be used off-the-shelf as a mask for any Pre-trained Language\nModel, allowing to improve their performance while restricting attention.\nFinally, we show the emergence of a document structure representation in\nSkim-Attention.\n</p>","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":null,"source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":{"contributors":[],"coverages":[],"creators":["<a href=\"http://arxiv.org/find/cs/1/au:+Nguyen_L/0/1/0/all/0/1\">Laura Nguyen</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Scialom_T/0/1/0/all/0/1\">Thomas Scialom</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Staiano_J/0/1/0/all/0/1\">Jacopo Staiano</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Piwowarski_B/0/1/0/all/0/1\">Benjamin Piwowarski</a>"],"dates":[],"descriptions":[],"formats":[],"identifiers":[],"languages":[],"publishers":[],"relations":[],"rights":[],"sources":[],"subjects":[],"titles":[],"types":[]}},{"title":"How Suitable Are Subword Segmentation Strategies for Translating Non-Concatenative Morphology?. (arXiv:2109.01100v1 [cs.CL])","link":"http://arxiv.org/abs/2109.01100","description":"<p>Data-driven subword segmentation has become the default strategy for\nopen-vocabulary machine translation and other NLP tasks, but may not be\nsufficiently generic for optimal learning of non-concatenative morphology. We\ndesign a test suite to evaluate segmentation strategies on different types of\nmorphological phenomena in a controlled, semi-synthetic setting. In our\nexperiments, we compare how well machine translation models trained on subword-\nand character-level can translate these morphological phenomena. We find that\nlearning to analyse and generate morphologically complex surface\nrepresentations is still challenging, especially for non-concatenative\nmorphological phenomena like reduplication or vowel harmony and for rare word\nstems. Based on our results, we recommend that novel text representation\nstrategies be tested on a range of typologically diverse languages to minimise\nthe risk of adopting a strategy that inadvertently disadvantages certain\nlanguages.\n</p>","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":null,"source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":{"contributors":[],"coverages":[],"creators":["<a href=\"http://arxiv.org/find/cs/1/au:+Amrhein_C/0/1/0/all/0/1\">Chantal Amrhein</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Sennrich_R/0/1/0/all/0/1\">Rico Sennrich</a>"],"dates":[],"descriptions":[],"formats":[],"identifiers":[],"languages":[],"publishers":[],"relations":[],"rights":[],"sources":[],"subjects":[],"titles":[],"types":[]}},{"title":"Sequence-to-Sequence Learning with Latent Neural Grammars. (arXiv:2109.01135v1 [cs.CL])","link":"http://arxiv.org/abs/2109.01135","description":"<p>Sequence-to-sequence learning with neural networks has become the de facto\nstandard for sequence prediction tasks. This approach typically models the\nlocal distribution over the next word with a powerful neural network that can\ncondition on arbitrary context. While flexible and performant, these models\noften require large datasets for training and can fail spectacularly on\nbenchmarks designed to test for compositional generalization. This work\nexplores an alternative, hierarchical approach to sequence-to-sequence learning\nwith quasi-synchronous grammars, where each node in the target tree is\ntransduced by a node in the source tree. Both the source and target trees are\ntreated as latent and induced during training. We develop a neural\nparameterization of the grammar which enables parameter sharing over the\ncombinatorial space of derivation rules without the need for manual feature\nengineering. We apply this latent neural grammar to various domains -- a\ndiagnostic language navigation task designed to test for compositional\ngeneralization (SCAN), style transfer, and small-scale machine translation --\nand find that it performs respectably compared to standard baselines.\n</p>","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":null,"source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":{"contributors":[],"coverages":[],"creators":["<a href=\"http://arxiv.org/find/cs/1/au:+Kim_Y/0/1/0/all/0/1\">Yoon Kim</a>"],"dates":[],"descriptions":[],"formats":[],"identifiers":[],"languages":[],"publishers":[],"relations":[],"rights":[],"sources":[],"subjects":[],"titles":[],"types":[]}},{"title":"An Iterative Multi-Knowledge Transfer Network for Aspect-Based Sentiment Analysis. (arXiv:2004.01935v3 [cs.CL] UPDATED)","link":"http://arxiv.org/abs/2004.01935","description":"<p>Aspect-based sentiment analysis (ABSA) mainly involves three subtasks: aspect\nterm extraction, opinion term extraction, and aspect-level sentiment\nclassification, which are typically handled in a separate or joint manner.\nHowever, previous approaches do not well exploit the interactive relations\namong three subtasks and do not pertinently leverage the easily available\ndocument-level labeled domain/sentiment knowledge, which restricts their\nperformances. To address these issues, we propose a novel Iterative\nMulti-Knowledge Transfer Network (IMKTN) for end-to-end ABSA. For one thing,\nthrough the interactive correlations between the ABSA subtasks, our IMKTN\ntransfers the task-specific knowledge from any two of the three subtasks to\nanother one at the token level by utilizing a well-designed routing algorithm,\nthat is, any two of the three subtasks will help the third one. For another,\nour IMKTN pertinently transfers the document-level knowledge, i.e.,\ndomain-specific and sentiment-related knowledge, to the aspect-level subtasks\nto further enhance the corresponding performance. Experimental results on three\nbenchmark datasets demonstrate the effectiveness and superiority of our\napproach.\n</p>","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":null,"source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":{"contributors":[],"coverages":[],"creators":["<a href=\"http://arxiv.org/find/cs/1/au:+Liang_Y/0/1/0/all/0/1\">Yunlong Liang</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Meng_F/0/1/0/all/0/1\">Fandong Meng</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Zhang_J/0/1/0/all/0/1\">Jinchao Zhang</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Chen_Y/0/1/0/all/0/1\">Yufeng Chen</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Xu_J/0/1/0/all/0/1\">Jinan Xu</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Zhou_J/0/1/0/all/0/1\">Jie Zhou</a>"],"dates":[],"descriptions":[],"formats":[],"identifiers":[],"languages":[],"publishers":[],"relations":[],"rights":[],"sources":[],"subjects":[],"titles":[],"types":[]}},{"title":"Accelerating Real-Time Question Answering via Question Generation. (arXiv:2009.05167v2 [cs.CL] UPDATED)","link":"http://arxiv.org/abs/2009.05167","description":"<p>Although deep neural networks have achieved tremendous success for question\nanswering (QA), they are still suffering from heavy computational and energy\ncost for real product deployment. Further, existing QA systems are bottlenecked\nby the encoding time of real-time questions with neural networks, thus\nsuffering from detectable latency in deployment for large-volume traffic. To\nreduce the computational cost and accelerate real-time question answering\n(RTQA) for practical usage, we propose to remove all the neural networks from\nonline QA systems, and present Ocean-Q (an Ocean of Questions), which\nintroduces a new question generation (QG) model to generate a large pool of QA\npairs offline, then in real time matches an input question with the candidate\nQA pool to predict the answer without question encoding. Ocean-Q can be readily\ndeployed in existing distributed database systems or search engine for\nlarge-scale query usage, and much greener with no additional cost for\nmaintaining large neural networks. Experiments on SQuAD(-open) and HotpotQA\nbenchmarks demonstrate that Ocean-Q is able to accelerate the fastest\nstate-of-the-art RTQA system by 4X times, with only a 3+% accuracy drop.\n</p>","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":null,"source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":{"contributors":[],"coverages":[],"creators":["<a href=\"http://arxiv.org/find/cs/1/au:+Fang_Y/0/1/0/all/0/1\">Yuwei Fang</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Wang_S/0/1/0/all/0/1\">Shuohang Wang</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Gan_Z/0/1/0/all/0/1\">Zhe Gan</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Sun_S/0/1/0/all/0/1\">Siqi Sun</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Liu_J/0/1/0/all/0/1\">Jingjing Liu</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Zhu_C/0/1/0/all/0/1\">Chenguang Zhu</a>"],"dates":[],"descriptions":[],"formats":[],"identifiers":[],"languages":[],"publishers":[],"relations":[],"rights":[],"sources":[],"subjects":[],"titles":[],"types":[]}},{"title":"GMH: A General Multi-hop Reasoning Model for KG Completion. (arXiv:2010.07620v3 [cs.AI] UPDATED)","link":"http://arxiv.org/abs/2010.07620","description":"<p>Knowledge graphs are essential for numerous downstream natural language\nprocessing applications, but are typically incomplete with many facts missing.\nThis results in research efforts on multi-hop reasoning task, which can be\nformulated as a search process and current models typically perform short\ndistance reasoning. However, the long-distance reasoning is also vital with the\nability to connect the superficially unrelated entities. To the best of our\nknowledge, there lacks a general framework that approaches multi-hop reasoning\nin mixed long-short distance reasoning scenarios. We argue that there are two\nkey issues for a general multi-hop reasoning model: i) where to go, and ii)\nwhen to stop. Therefore, we propose a general model which resolves the issues\nwith three modules: 1) the local-global knowledge module to estimate the\npossible paths, 2) the differentiated action dropout module to explore a\ndiverse set of paths, and 3) the adaptive stopping search module to avoid over\nsearching. The comprehensive results on three datasets demonstrate the\nsuperiority of our model with significant improvements against baselines in\nboth short and long distance reasoning scenarios.\n</p>","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":null,"source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":{"contributors":[],"coverages":[],"creators":["<a href=\"http://arxiv.org/find/cs/1/au:+Zhang_Y/0/1/0/all/0/1\">Yao Zhang</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Liang_H/0/1/0/all/0/1\">Hongru Liang</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Jatowt_A/0/1/0/all/0/1\">Adam Jatowt</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Lei_W/0/1/0/all/0/1\">Wenqiang Lei</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Wei_X/0/1/0/all/0/1\">Xin Wei</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Jiang_N/0/1/0/all/0/1\">Ning Jiang</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Yang_Z/0/1/0/all/0/1\">Zhenglu Yang</a>"],"dates":[],"descriptions":[],"formats":[],"identifiers":[],"languages":[],"publishers":[],"relations":[],"rights":[],"sources":[],"subjects":[],"titles":[],"types":[]}},{"title":"Cross-lingual Transfer of Abstractive Summarizer to Less-resource Language. (arXiv:2012.04307v2 [cs.CL] UPDATED)","link":"http://arxiv.org/abs/2012.04307","description":"<p>Automatic text summarization extracts important information from texts and\npresents the information in the form of a summary. Abstractive summarization\napproaches progressed significantly by switching to deep neural networks, but\nresults are not yet satisfactory, especially for languages where large training\nsets do not exist. In several natural language processing tasks, a\ncross-lingual model transfer is successfully applied in less-resource\nlanguages. For summarization, the cross-lingual model transfer was not\nattempted due to a non-reusable decoder side of neural models that cannot\ncorrect target language generation. In our work, we use a pre-trained English\nsummarization model based on deep neural networks and sequence-to-sequence\narchitecture to summarize Slovene news articles. We address the problem of\ninadequate decoder by using an additional language model for the evaluation of\nthe generated text in target language. We test several cross-lingual\nsummarization models with different amounts of target data for fine-tuning. We\nassess the models with automatic evaluation measures and conduct a small-scale\nhuman evaluation. Automatic evaluation shows that the summaries of our best\ncross-lingual model are useful and of quality similar to the model trained only\nin the target language. Human evaluation shows that our best model generates\nsummaries with high accuracy and acceptable readability. However, similar to\nother abstractive models, our models are not perfect and may occasionally\nproduce misleading or absurd content.\n</p>","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":null,"source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":{"contributors":[],"coverages":[],"creators":["<a href=\"http://arxiv.org/find/cs/1/au:+Zagar_A/0/1/0/all/0/1\">Ale&#x161; &#x17d;agar</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Robnik_Sikonja_M/0/1/0/all/0/1\">Marko Robnik-&#x160;ikonja</a>"],"dates":[],"descriptions":[],"formats":[],"identifiers":[],"languages":[],"publishers":[],"relations":[],"rights":[],"sources":[],"subjects":[],"titles":[],"types":[]}},{"title":"A Topic Coverage Approach to Evaluation of Topic Models. (arXiv:2012.06274v3 [cs.IR] UPDATED)","link":"http://arxiv.org/abs/2012.06274","description":"<p>Topic models are widely used unsupervised models capable of learning topics -\nweighted lists of words and documents - from large collections of text\ndocuments. When topic models are used for discovery of topics in text\ncollections, a question that arises naturally is how well the model-induced\ntopics correspond to topics of interest to the analyst. In this paper we\nrevisit and extend a so far neglected approach to topic model evaluation based\non measuring topic coverage - computationally matching model topics with a set\nof reference topics that models are expected to uncover. The approach is well\nsuited for analyzing models' performance in topic discovery and for large-scale\nanalysis of both topic models and measures of model quality. We propose new\nmeasures of coverage and evaluate, in a series of experiments, different types\nof topic models on two distinct text domains for which interest for topic\ndiscovery exists. The experiments include evaluation of model quality, analysis\nof coverage of distinct topic categories, and the analysis of the relationship\nbetween coverage and other methods of topic model evaluation. The paper\ncontributes a new supervised measure of coverage, and the first unsupervised\nmeasure of coverage. The supervised measure achieves topic matching accuracy\nclose to human agreement. The unsupervised measure correlates highly with the\nsupervised one (Spearman's $\\rho \\geq 0.95$). Other contributions include\ninsights into both topic models and different methods of model evaluation, and\nthe datasets and code for facilitating future research on topic coverage.\n</p>","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":null,"source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":{"contributors":[],"coverages":[],"creators":["<a href=\"http://arxiv.org/find/cs/1/au:+Korencic_D/0/1/0/all/0/1\">Damir Koren&#x10d;i&#x107;</a> (1), <a href=\"http://arxiv.org/find/cs/1/au:+Ristov_S/0/1/0/all/0/1\">Strahil Ristov</a> (1), <a href=\"http://arxiv.org/find/cs/1/au:+Repar_J/0/1/0/all/0/1\">Jelena Repar</a> (1), <a href=\"http://arxiv.org/find/cs/1/au:+Snajder_J/0/1/0/all/0/1\">Jan &#x160;najder</a> (2) ((1) Rudjer Bo&#x161;kovi&#x107; Institute, Croatia, (2) University of Zagreb, Faculty of Electrical Engineering and Computing, Croatia)"],"dates":[],"descriptions":[],"formats":[],"identifiers":[],"languages":[],"publishers":[],"relations":[],"rights":[],"sources":[],"subjects":[],"titles":[],"types":[]}},{"title":"NewsBERT: Distilling Pre-trained Language Model for Intelligent News Application. (arXiv:2102.04887v2 [cs.CL] UPDATED)","link":"http://arxiv.org/abs/2102.04887","description":"<p>Pre-trained language models (PLMs) like BERT have made great progress in NLP.\nNews articles usually contain rich textual information, and PLMs have the\npotentials to enhance news text modeling for various intelligent news\napplications like news recommendation and retrieval. However, most existing\nPLMs are in huge size with hundreds of millions of parameters. Many online news\napplications need to serve millions of users with low latency tolerance, which\nposes huge challenges to incorporating PLMs in these scenarios. Knowledge\ndistillation techniques can compress a large PLM into a much smaller one and\nmeanwhile keeps good performance. However, existing language models are\npre-trained and distilled on general corpus like Wikipedia, which has some gaps\nwith the news domain and may be suboptimal for news intelligence. In this\npaper, we propose NewsBERT, which can distill PLMs for efficient and effective\nnews intelligence. In our approach, we design a teacher-student joint learning\nand distillation framework to collaboratively learn both teacher and student\nmodels, where the student model can learn from the learning experience of the\nteacher model. In addition, we propose a momentum distillation method by\nincorporating the gradients of teacher model into the update of student model\nto better transfer useful knowledge learned by the teacher model. Extensive\nexperiments on two real-world datasets with three tasks show that NewsBERT can\neffectively improve the model performance in various intelligent news\napplications with much smaller models.\n</p>","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":null,"source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":{"contributors":[],"coverages":[],"creators":["<a href=\"http://arxiv.org/find/cs/1/au:+Wu_C/0/1/0/all/0/1\">Chuhan Wu</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Wu_F/0/1/0/all/0/1\">Fangzhao Wu</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Yu_Y/0/1/0/all/0/1\">Yang Yu</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Qi_T/0/1/0/all/0/1\">Tao Qi</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Huang_Y/0/1/0/all/0/1\">Yongfeng Huang</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Liu_Q/0/1/0/all/0/1\">Qi Liu</a>"],"dates":[],"descriptions":[],"formats":[],"identifiers":[],"languages":[],"publishers":[],"relations":[],"rights":[],"sources":[],"subjects":[],"titles":[],"types":[]}},{"title":"A Data-Centric Framework for Composable NLP Workflows. (arXiv:2103.01834v4 [cs.CL] UPDATED)","link":"http://arxiv.org/abs/2103.01834","description":"<p>Empirical natural language processing (NLP) systems in application domains\n(e.g., healthcare, finance, education) involve interoperation among multiple\ncomponents, ranging from data ingestion, human annotation, to text retrieval,\nanalysis, generation, and visualization. We establish a unified open-source\nframework to support fast development of such sophisticated NLP workflows in a\ncomposable manner. The framework introduces a uniform data representation to\nencode heterogeneous results by a wide range of NLP tasks. It offers a large\nrepository of processors for NLP tasks, visualization, and annotation, which\ncan be easily assembled with full interoperability under the unified\nrepresentation. The highly extensible framework allows plugging in custom\nprocessors from external off-the-shelf NLP and deep learning libraries. The\nwhole framework is delivered through two modularized yet integratable\nopen-source projects, namely Forte (for workflow infrastructure and NLP\nfunction processors) and Stave (for user interaction, visualization, and\nannotation).\n</p>","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":null,"source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":{"contributors":[],"coverages":[],"creators":["<a href=\"http://arxiv.org/find/cs/1/au:+Liu_Z/0/1/0/all/0/1\">Zhengzhong Liu</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Ding_G/0/1/0/all/0/1\">Guanxiong Ding</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Bukkittu_A/0/1/0/all/0/1\">Avinash Bukkittu</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Gupta_M/0/1/0/all/0/1\">Mansi Gupta</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Gao_P/0/1/0/all/0/1\">Pengzhi Gao</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Ahmed_A/0/1/0/all/0/1\">Atif Ahmed</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Zhang_S/0/1/0/all/0/1\">Shikun Zhang</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Gao_X/0/1/0/all/0/1\">Xin Gao</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Singhavi_S/0/1/0/all/0/1\">Swapnil Singhavi</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Li_L/0/1/0/all/0/1\">Linwei Li</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Wei_W/0/1/0/all/0/1\">Wei Wei</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Hu_Z/0/1/0/all/0/1\">Zecong Hu</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Shi_H/0/1/0/all/0/1\">Haoran Shi</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Zhang_H/0/1/0/all/0/1\">Haoying Zhang</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Liang_X/0/1/0/all/0/1\">Xiaodan Liang</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Mitamura_T/0/1/0/all/0/1\">Teruko Mitamura</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Xing_E/0/1/0/all/0/1\">Eric P. Xing</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Hu_Z/0/1/0/all/0/1\">Zhiting Hu</a>"],"dates":[],"descriptions":[],"formats":[],"identifiers":[],"languages":[],"publishers":[],"relations":[],"rights":[],"sources":[],"subjects":[],"titles":[],"types":[]}},{"title":"Gradual Fine-Tuning for Low-Resource Domain Adaptation. (arXiv:2103.02205v2 [cs.CL] UPDATED)","link":"http://arxiv.org/abs/2103.02205","description":"<p>Fine-tuning is known to improve NLP models by adapting an initial model\ntrained on more plentiful but less domain-salient examples to data in a target\ndomain. Such domain adaptation is typically done using one stage of\nfine-tuning. We demonstrate that gradually fine-tuning in a multi-stage process\ncan yield substantial further gains and can be applied without modifying the\nmodel or learning objective.\n</p>","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":null,"source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":{"contributors":[],"coverages":[],"creators":["<a href=\"http://arxiv.org/find/cs/1/au:+Xu_H/0/1/0/all/0/1\">Haoran Xu</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Ebner_S/0/1/0/all/0/1\">Seth Ebner</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Yarmohammadi_M/0/1/0/all/0/1\">Mahsa Yarmohammadi</a>, <a href=\"http://arxiv.org/find/cs/1/au:+White_A/0/1/0/all/0/1\">Aaron Steven White</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Durme_B/0/1/0/all/0/1\">Benjamin Van Durme</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Murray_K/0/1/0/all/0/1\">Kenton Murray</a>"],"dates":[],"descriptions":[],"formats":[],"identifiers":[],"languages":[],"publishers":[],"relations":[],"rights":[],"sources":[],"subjects":[],"titles":[],"types":[]}},{"title":"Conceptual similarity and communicative need shape colexification: an experimental study. (arXiv:2103.11024v2 [cs.CL] UPDATED)","link":"http://arxiv.org/abs/2103.11024","description":"<p>Colexification refers to the phenomenon of multiple meanings sharing one word\nin a language. Cross-linguistic lexification patterns have been shown to be\nlargely predictable, as similar concepts are often colexified. We test a recent\nclaim that, beyond this general tendency, communicative needs play an important\nrole in shaping colexification patterns. We approach this question by means of\na series of human experiments, using an artificial language communication game\nparadigm. Our results across four experiments match the previous\ncross-linguistic findings: all other things being equal, speakers do prefer to\ncolexify similar concepts. However, we also find evidence supporting the\ncommunicative need hypothesis: when faced with a frequent need to distinguish\nsimilar pairs of meanings, speakers adjust their colexification preferences to\nmaintain communicative efficiency, and avoid colexifying those similar meanings\nwhich need to be distinguished in communication. This research provides further\nevidence to support the argument that languages are shaped by the needs and\npreferences of their speakers.\n</p>","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":null,"source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":{"contributors":[],"coverages":[],"creators":["<a href=\"http://arxiv.org/find/cs/1/au:+Karjus_A/0/1/0/all/0/1\">Andres Karjus</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Blythe_R/0/1/0/all/0/1\">Richard A. Blythe</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Kirby_S/0/1/0/all/0/1\">Simon Kirby</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Wang_T/0/1/0/all/0/1\">Tianyu Wang</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Smith_K/0/1/0/all/0/1\">Kenny Smith</a>"],"dates":[],"descriptions":[],"formats":[],"identifiers":[],"languages":[],"publishers":[],"relations":[],"rights":[],"sources":[],"subjects":[],"titles":[],"types":[]}},{"title":"Knowledge-Aware Graph-Enhanced GPT-2 for Dialogue State Tracking. (arXiv:2104.04466v2 [cs.CL] UPDATED)","link":"http://arxiv.org/abs/2104.04466","description":"<p>Dialogue State Tracking is central to multi-domain task-oriented dialogue\nsystems, responsible for extracting information from user utterances. We\npresent a novel hybrid architecture that augments GPT-2 with representations\nderived from Graph Attention Networks in such a way to allow causal, sequential\nprediction of slot values. The model architecture captures inter-slot\nrelationships and dependencies across domains that otherwise can be lost in\nsequential prediction. We report improvements in state tracking performance in\nMultiWOZ 2.0 against a strong GPT-2 baseline and investigate a simplified\nsparse training scenario in which DST models are trained only on session-level\nannotations but evaluated at the turn level. We further report detailed\nanalyses to demonstrate the effectiveness of graph models in DST by showing\nthat the proposed graph modules capture inter-slot dependencies and improve the\npredictions of values that are common to multiple domains.\n</p>","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":null,"source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":{"contributors":[],"coverages":[],"creators":["<a href=\"http://arxiv.org/find/cs/1/au:+Lin_W/0/1/0/all/0/1\">Weizhe Lin</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Tseng_B/0/1/0/all/0/1\">Bo-Hsian Tseng</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Byrne_B/0/1/0/all/0/1\">Bill Byrne</a>"],"dates":[],"descriptions":[],"formats":[],"identifiers":[],"languages":[],"publishers":[],"relations":[],"rights":[],"sources":[],"subjects":[],"titles":[],"types":[]}},{"title":"The Power of Scale for Parameter-Efficient Prompt Tuning. (arXiv:2104.08691v2 [cs.CL] UPDATED)","link":"http://arxiv.org/abs/2104.08691","description":"<p>In this work, we explore \"prompt tuning\", a simple yet effective mechanism\nfor learning \"soft prompts\" to condition frozen language models to perform\nspecific downstream tasks. Unlike the discrete text prompts used by GPT-3, soft\nprompts are learned through backpropagation and can be tuned to incorporate\nsignal from any number of labeled examples. Our end-to-end learned approach\noutperforms GPT-3's \"few-shot\" learning by a large margin. More remarkably,\nthrough ablations on model size using T5, we show that prompt tuning becomes\nmore competitive with scale: as models exceed billions of parameters, our\nmethod \"closes the gap\" and matches the strong performance of model tuning\n(where all model weights are tuned). This finding is especially relevant in\nthat large models are costly to share and serve, and the ability to reuse one\nfrozen model for multiple downstream tasks can ease this burden. Our method can\nbe seen as a simplification of the recently proposed \"prefix tuning\" of Li and\nLiang (2021), and we provide a comparison to this and other similar approaches.\nFinally, we show that conditioning a frozen model with soft prompts confers\nbenefits in robustness to domain transfer, as compared to full model tuning.\n</p>","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":null,"source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":{"contributors":[],"coverages":[],"creators":["<a href=\"http://arxiv.org/find/cs/1/au:+Lester_B/0/1/0/all/0/1\">Brian Lester</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Al_Rfou_R/0/1/0/all/0/1\">Rami Al-Rfou</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Constant_N/0/1/0/all/0/1\">Noah Constant</a>"],"dates":[],"descriptions":[],"formats":[],"identifiers":[],"languages":[],"publishers":[],"relations":[],"rights":[],"sources":[],"subjects":[],"titles":[],"types":[]}},{"title":"Probing Commonsense Explanation in Dialogue Response Generation. (arXiv:2104.09574v3 [cs.CL] UPDATED)","link":"http://arxiv.org/abs/2104.09574","description":"<p>Humans use commonsense reasoning (CSR) implicitly to produce natural and\ncoherent responses in conversations. Aiming to close the gap between current\nresponse generation (RG) models and human communication abilities, we want to\nunderstand why RG models respond as they do by probing RG model's understanding\nof commonsense reasoning that elicits proper responses. We formalize the\nproblem by framing commonsense as a latent variable in the RG task and using\nexplanations for responses as textual form of commonsense. We collect 6k\nannotated explanations justifying responses from four dialogue datasets and ask\nhumans to verify them and propose two probing settings to evaluate RG models'\nCSR capabilities. Probing results show that models fail to capture the logical\nrelations between commonsense explanations and responses and fine-tuning on\nin-domain data and increasing model sizes do not lead to understanding of CSR\nfor RG. We hope our study motivates more research in making RG models emulate\nthe human reasoning process in pursuit of smooth human-AI communication.\n</p>","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":null,"source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":{"contributors":[],"coverages":[],"creators":["<a href=\"http://arxiv.org/find/cs/1/au:+Zhou_P/0/1/0/all/0/1\">Pei Zhou</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Jandaghi_P/0/1/0/all/0/1\">Pegah Jandaghi</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Lin_B/0/1/0/all/0/1\">Bill Yuchen Lin</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Cho_J/0/1/0/all/0/1\">Justin Cho</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Pujara_J/0/1/0/all/0/1\">Jay Pujara</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Ren_X/0/1/0/all/0/1\">Xiang Ren</a>"],"dates":[],"descriptions":[],"formats":[],"identifiers":[],"languages":[],"publishers":[],"relations":[],"rights":[],"sources":[],"subjects":[],"titles":[],"types":[]}},{"title":"AMMU : A Survey of Transformer-based Biomedical Pretrained Language Models. (arXiv:2105.00827v2 [cs.CL] UPDATED)","link":"http://arxiv.org/abs/2105.00827","description":"<p>Transformer-based pretrained language models (PLMs) have started a new era in\nmodern natural language processing (NLP). These models combine the power of\ntransformers, transfer learning, and self-supervised learning (SSL). Following\nthe success of these models in the general domain, the biomedical research\ncommunity has developed various in-domain PLMs starting from BioBERT to the\nlatest BioELECTRA and BioALBERT models. We strongly believe there is a need for\na survey paper that can provide a comprehensive survey of various\ntransformer-based biomedical pretrained language models (BPLMs). In this\nsurvey, we start with a brief overview of foundational concepts like\nself-supervised learning, embedding layer and transformer encoder layers. We\ndiscuss core concepts of transformer-based PLMs like pretraining methods,\npretraining tasks, fine-tuning methods, and various embedding types specific to\nbiomedical domain. We introduce a taxonomy for transformer-based BPLMs and then\ndiscuss all the models. We discuss various challenges and present possible\nsolutions. We conclude by highlighting some of the open issues which will drive\nthe research community to further improve transformer-based BPLMs.\n</p>","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":null,"source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":{"contributors":[],"coverages":[],"creators":["<a href=\"http://arxiv.org/find/cs/1/au:+Kalyan_K/0/1/0/all/0/1\">Katikapalli Subramanyam Kalyan</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Rajasekharan_A/0/1/0/all/0/1\">Ajit Rajasekharan</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Sangeetha_S/0/1/0/all/0/1\">Sivanesan Sangeetha</a>"],"dates":[],"descriptions":[],"formats":[],"identifiers":[],"languages":[],"publishers":[],"relations":[],"rights":[],"sources":[],"subjects":[],"titles":[],"types":[]}},{"title":"Fastformer: Additive Attention Can Be All You Need. (arXiv:2108.09084v5 [cs.CL] UPDATED)","link":"http://arxiv.org/abs/2108.09084","description":"<p>Transformer is a powerful model for text understanding. However, it is\ninefficient due to its quadratic complexity to input sequence length. Although\nthere are many methods on Transformer acceleration, they are still either\ninefficient on long sequences or not effective enough. In this paper, we\npropose Fastformer, which is an efficient Transformer model based on additive\nattention. In Fastformer, instead of modeling the pair-wise interactions\nbetween tokens, we first use additive attention mechanism to model global\ncontexts, and then further transform each token representation based on its\ninteraction with global context representations. In this way, Fastformer can\nachieve effective context modeling with linear complexity. Extensive\nexperiments on five datasets show that Fastformer is much more efficient than\nmany existing Transformer models and can meanwhile achieve comparable or even\nbetter long text modeling performance.\n</p>","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":null,"source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":{"contributors":[],"coverages":[],"creators":["<a href=\"http://arxiv.org/find/cs/1/au:+Wu_C/0/1/0/all/0/1\">Chuhan Wu</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Wu_F/0/1/0/all/0/1\">Fangzhao Wu</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Qi_T/0/1/0/all/0/1\">Tao Qi</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Huang_Y/0/1/0/all/0/1\">Yongfeng Huang</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Xie_X/0/1/0/all/0/1\">Xing Xie</a>"],"dates":[],"descriptions":[],"formats":[],"identifiers":[],"languages":[],"publishers":[],"relations":[],"rights":[],"sources":[],"subjects":[],"titles":[],"types":[]}},{"title":"Smart Bird: Learnable Sparse Attention for Efficient and Effective Transformer. (arXiv:2108.09193v3 [cs.CL] UPDATED)","link":"http://arxiv.org/abs/2108.09193","description":"<p>Transformer has achieved great success in NLP. However, the quadratic\ncomplexity of the self-attention mechanism in Transformer makes it inefficient\nin handling long sequences. Many existing works explore to accelerate\nTransformers by computing sparse self-attention instead of a dense one, which\nusually attends to tokens at certain positions or randomly selected tokens.\nHowever, manually selected or random tokens may be uninformative for context\nmodeling. In this paper, we propose Smart Bird, which is an efficient and\neffective Transformer with learnable sparse attention. In Smart Bird, we first\ncompute a sketched attention matrix with a single-head low-dimensional\nTransformer, which aims to find potential important interactions between\ntokens. We then sample token pairs based on their probability scores derived\nfrom the sketched attention matrix to generate different sparse attention index\nmatrices for different attention heads. Finally, we select token embeddings\naccording to the index matrices to form the input of sparse attention networks.\nExtensive experiments on six benchmark datasets for different tasks validate\nthe efficiency and effectiveness of Smart Bird in text modeling.\n</p>","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":null,"source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":{"contributors":[],"coverages":[],"creators":["<a href=\"http://arxiv.org/find/cs/1/au:+Wu_C/0/1/0/all/0/1\">Chuhan Wu</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Wu_F/0/1/0/all/0/1\">Fangzhao Wu</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Qi_T/0/1/0/all/0/1\">Tao Qi</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Jiao_B/0/1/0/all/0/1\">Binxing Jiao</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Jiang_D/0/1/0/all/0/1\">Daxin Jiang</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Huang_Y/0/1/0/all/0/1\">Yongfeng Huang</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Xie_X/0/1/0/all/0/1\">Xing Xie</a>"],"dates":[],"descriptions":[],"formats":[],"identifiers":[],"languages":[],"publishers":[],"relations":[],"rights":[],"sources":[],"subjects":[],"titles":[],"types":[]}},{"title":"One Chatbot Per Person: Creating Personalized Chatbots based on Implicit User Profiles. (arXiv:2108.09355v2 [cs.CL] UPDATED)","link":"http://arxiv.org/abs/2108.09355","description":"<p>Personalized chatbots focus on endowing chatbots with a consistent\npersonality to behave like real users, give more informative responses, and\nfurther act as personal assistants. Existing personalized approaches tried to\nincorporate several text descriptions as explicit user profiles. However, the\nacquisition of such explicit profiles is expensive and time-consuming, thus\nbeing impractical for large-scale real-world applications. Moreover, the\nrestricted predefined profile neglects the language behavior of a real user and\ncannot be automatically updated together with the change of user interests. In\nthis paper, we propose to learn implicit user profiles automatically from\nlarge-scale user dialogue history for building personalized chatbots.\nSpecifically, leveraging the benefits of Transformer on language understanding,\nwe train a personalized language model to construct a general user profile from\nthe user's historical responses. To highlight the relevant historical responses\nto the input post, we further establish a key-value memory network of\nhistorical post-response pairs, and build a dynamic post-aware user profile.\nThe dynamic profile mainly describes what and how the user has responded to\nsimilar posts in history. To explicitly utilize users' frequently used words,\nwe design a personalized decoder to fuse two decoding strategies, including\ngenerating a word from the generic vocabulary and copying one word from the\nuser's personalized vocabulary. Experiments on two real-world datasets show the\nsignificant improvement of our model compared with existing methods. Our code\nis available at https://github.com/zhengyima/DHAP\n</p>","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":null,"source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":{"contributors":[],"coverages":[],"creators":["<a href=\"http://arxiv.org/find/cs/1/au:+Ma_Z/0/1/0/all/0/1\">Zhengyi Ma</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Dou_Z/0/1/0/all/0/1\">Zhicheng Dou</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Zhu_Y/0/1/0/all/0/1\">Yutao Zhu</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Zhong_H/0/1/0/all/0/1\">Hanxun Zhong</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Wen_J/0/1/0/all/0/1\">Ji-Rong Wen</a>"],"dates":[],"descriptions":[],"formats":[],"identifiers":[],"languages":[],"publishers":[],"relations":[],"rights":[],"sources":[],"subjects":[],"titles":[],"types":[]}},{"title":"A Partition Filter Network for Joint Entity and Relation Extraction. (arXiv:2108.12202v3 [cs.CL] UPDATED)","link":"http://arxiv.org/abs/2108.12202","description":"<p>In joint entity and relation extraction, existing work either sequentially\nencode task-specific features, leading to an imbalance in inter-task feature\ninteraction where features extracted later have no direct contact with those\nthat come first. Or they encode entity features and relation features in a\nparallel manner, meaning that feature representation learning for each task is\nlargely independent of each other except for input sharing. We propose a\npartition filter network to model two-way interaction between tasks properly,\nwhere feature encoding is decomposed into two steps: partition and filter. In\nour encoder, we leverage two gates: entity and relation gate, to segment\nneurons into two task partitions and one shared partition. The shared partition\nrepresents inter-task information valuable to both tasks and is evenly shared\nacross two tasks to ensure proper two-way interaction. The task partitions\nrepresent intra-task information and are formed through concerted efforts of\nboth gates, making sure that encoding of task-specific features is dependent\nupon each other. Experiment results on five public datasets show that our model\nperforms significantly better than previous approaches. In addition, contrary\nto what previous work claims, our auxiliary experiments suggest that relation\nprediction is contributory to named entity prediction in a non-negligible way.\nThe source code can be found at https://github.com/Coopercoppers/PFN.\n</p>","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":null,"source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":{"contributors":[],"coverages":[],"creators":["<a href=\"http://arxiv.org/find/cs/1/au:+Yan_Z/0/1/0/all/0/1\">Zhiheng Yan</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Zhang_C/0/1/0/all/0/1\">Chong Zhang</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Fu_J/0/1/0/all/0/1\">Jinlan Fu</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Zhang_Q/0/1/0/all/0/1\">Qi Zhang</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Wei_Z/0/1/0/all/0/1\">Zhongyu Wei</a>"],"dates":[],"descriptions":[],"formats":[],"identifiers":[],"languages":[],"publishers":[],"relations":[],"rights":[],"sources":[],"subjects":[],"titles":[],"types":[]}},{"title":"Tree Decomposition Attention for AMR-to-Text Generation. (arXiv:2108.12300v2 [cs.CL] UPDATED)","link":"http://arxiv.org/abs/2108.12300","description":"<p>Text generation from AMR requires mapping a semantic graph to a string that\nit annotates. Transformer-based graph encoders, however, poorly capture vertex\ndependencies that may benefit sequence prediction. To impose order on an\nencoder, we locally constrain vertex self-attention using a graph's tree\ndecomposition. Instead of forming a full query-key bipartite graph, we restrict\nattention to vertices in parent, subtree, and same-depth bags of a vertex. This\nhierarchical context lends both sparsity and structure to vertex state updates.\nWe apply dynamic programming to derive a forest of tree decompositions,\nchoosing the most structurally similar tree to the AMR. Our system outperforms\na self-attentive baseline by 1.6 BLEU and 1.8 chrF++.\n</p>","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":null,"source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":{"contributors":[],"coverages":[],"creators":["<a href=\"http://arxiv.org/find/cs/1/au:+Jin_L/0/1/0/all/0/1\">Lisa Jin</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Gildea_D/0/1/0/all/0/1\">Daniel Gildea</a>"],"dates":[],"descriptions":[],"formats":[],"identifiers":[],"languages":[],"publishers":[],"relations":[],"rights":[],"sources":[],"subjects":[],"titles":[],"types":[]}},{"title":"Latent Tree Decomposition Parsers for AMR-to-Text Generation. (arXiv:2108.12304v2 [cs.CL] UPDATED)","link":"http://arxiv.org/abs/2108.12304","description":"<p>Graph encoders in AMR-to-text generation models often rely on neighborhood\nconvolutions or global vertex attention. While these approaches apply to\ngeneral graphs, AMRs may be amenable to encoders that target their tree-like\nstructure. By clustering edges into a hierarchy, a tree decomposition\nsummarizes graph structure. Our model encodes a derivation forest of tree\ndecompositions and extracts an expected tree. From tree node embeddings, it\nbuilds graph edge features used in vertex attention of the graph encoder.\nEncoding TD forests instead of shortest-pairwise paths in a self-attentive\nbaseline raises BLEU by 0.7 and chrF++ by 0.3. The forest encoder also\nsurpasses a convolutional baseline for molecular property prediction by 1.92%\nROC-AUC.\n</p>","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":null,"source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":{"contributors":[],"coverages":[],"creators":["<a href=\"http://arxiv.org/find/cs/1/au:+Jin_L/0/1/0/all/0/1\">Lisa Jin</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Gildea_D/0/1/0/all/0/1\">Daniel Gildea</a>"],"dates":[],"descriptions":[],"formats":[],"identifiers":[],"languages":[],"publishers":[],"relations":[],"rights":[],"sources":[],"subjects":[],"titles":[],"types":[]}},{"title":"Smoothing Dialogue States for Open Conversational Machine Reading. (arXiv:2108.12599v2 [cs.CL] UPDATED)","link":"http://arxiv.org/abs/2108.12599","description":"<p>Conversational machine reading (CMR) requires machines to communicate with\nhumans through multi-turn interactions between two salient dialogue states of\ndecision making and question generation processes. In open CMR settings, as the\nmore realistic scenario, the retrieved background knowledge would be noisy,\nwhich results in severe challenges in the information transmission. Existing\nstudies commonly train independent or pipeline systems for the two subtasks.\nHowever, those methods are trivial by using hard-label decisions to activate\nquestion generation, which eventually hinders the model performance. In this\nwork, we propose an effective gating strategy by smoothing the two dialogue\nstates in only one decoder and bridge decision making and question generation\nto provide a richer dialogue state reference. Experiments on the OR-ShARC\ndataset show the effectiveness of our method, which achieves new\nstate-of-the-art results.\n</p>","author":null,"categories":[],"comments":null,"enclosure":null,"guid":null,"pub_date":null,"source":null,"content":null,"extensions":{},"itunes_ext":null,"dublin_core_ext":{"contributors":[],"coverages":[],"creators":["<a href=\"http://arxiv.org/find/cs/1/au:+Zhang_Z/0/1/0/all/0/1\">Zhuosheng Zhang</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Ouyang_S/0/1/0/all/0/1\">Siru Ouyang</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Zhao_H/0/1/0/all/0/1\">Hai Zhao</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Utiyama_M/0/1/0/all/0/1\">Masao Utiyama</a>, <a href=\"http://arxiv.org/find/cs/1/au:+Sumita_E/0/1/0/all/0/1\">Eiichiro Sumita</a>"],"dates":[],"descriptions":[],"formats":[],"identifiers":[],"languages":[],"publishers":[],"relations":[],"rights":[],"sources":[],"subjects":[],"titles":[],"types":[]}}],"extensions":{},"itunes_ext":null,"dublin_core_ext":{"contributors":[],"coverages":[],"creators":[],"dates":["2021-09-02T20:30:00-05:00"],"descriptions":[],"formats":[],"identifiers":[],"languages":["en-us"],"publishers":["help@arxiv.org"],"relations":[],"rights":[],"sources":[],"subjects":["Computer Science -- Computation and Language"],"titles":[],"types":[]},"syndication_ext":{"period":"DAILY","frequency":1,"base":"1901-01-01T00:00+00:00"},"namespaces":{"rdf":"http://www.w3.org/1999/02/22-rdf-syntax-ns#","content":"http://purl.org/rss/1.0/modules/content/","syn":"http://purl.org/rss/1.0/modules/syndication/","admin":"http://webns.net/mvcb/","dc":"http://purl.org/dc/elements/1.1/","taxo":"http://purl.org/rss/1.0/modules/taxonomy/"}}]}]}